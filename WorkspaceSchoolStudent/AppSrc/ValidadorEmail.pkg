Define cSimbolos for "!#$%&'*/\=?^+, `{|}~[]"

Use cJsonHttpTransfer.pkg

Function ValidadorEmail String sCorreo String ByRef sMsg Returns Boolean
    
    Boolean bRet

    // Comprobamos que se haya introducido algun valor
    If (Length(sCorreo) = 0) Begin
        Move "No se ha ingresado correo electronico" to sMsg
        Function_Return False
    End
    
    If (Length(sCorreo) > 256 and (not(Length(sCorreo) = 0))) Begin
        Move "El correo electronico introducido tiene mas de 256 caracteres" to sMsg
        Function_Return False
    End 
    
    //Validacion propia
    Get IsEmail sCorreo to bRet
    If (not(bRet)) Begin
        Move "El correo no tiene un formato correcto segun la funcion propia" to sMsg
    End
    Else Begin
        Move "El correo tiene un formato correcto segun la funcion propia" to sMsg
    End
    
//    Get validacionAPI sCorreo to bRet
//    If (not(bRet)) Begin
//        Move "Introduzca un correo valido" to sMsg
//    End
//    Else Begin
//        Move "El correo es valido segun la API de neutrino" to sMsg
//    End
    
    Function_Return (not(bRet))
End_Function




// Funcion que comprueba los distintos requisitos del formato de un correo electronico
Function IsEmail String sCorreo Returns Boolean
    
    Integer iCount iCountAux iLengthString
    String sCaracter
    Boolean bRet
    
    Move (Length(sCorreo)) to iLengthString
    //Comprobamos que el primer caracter no sea un simbolo valido en vez de numero o letra
    If ((Left(sCorreo, 1) = ".") or (Left(sCorreo, 1) = "-") or (Left(sCorreo, 1) = "_") or (Left(sCorreo, 1) = "@")) Begin
        //Move "El correo no puede comenzar por un simbolo" to sMsg
        Function_Return False
    End
    
    For iCount from 1 to (iLengthString)
        Move (Mid(sCorreo,1,iCount)) to sCaracter
        
        // Comprobamos que el caracter no sea un simbolo prohibido
        Get ComprobarSimbolos sCaracter to bRet
        If (bRet) Begin
            //Move "Se ha ingresado un simbolo no permitido (simbolos permitidos . - _)" to sMsg
            Function_Return False
        End
        
        // Comprobamos que no haya 2 puntos juntos
        If ((sCaracter = ".") and (Mid(sCorreo,1,iCount+1) = ".")) Begin
            //Move "El correo no puede contener dos puntos seguidos" to sMsg
            Function_Return False
        End
        
        // Comprobamos que antes de la @ haya un minimo de caracteres y un maximo
        If ((sCaracter = "@") and (iCount > 1) and (iCount < 66)) Begin
            Move (iCountAux+1) to iCountAux
        End
        
        // Comprobamos si (desde la derecha) la 3, 4 o 5 posicion es un .
        If (not((Mid(sCorreo,1,iLengthString-2) = ".") or (Mid(sCorreo,1,iLengthString-3) = ".") or (Mid(sCorreo,1,iLengthString-4) = "."))) Begin
            //Move "Tras el '.' de dominio, solo se podran escribir entre 2 y 4 caracteres" to sMsg
            Function_Return False
        End
    Loop
    
    // Comprobamos que solo haya una @ en el correo
    If (iCountAux = 1) Begin
        Function_Return True
    End 
    Else If (iCountAux > 1) Begin 
         //Move "No puede introducir 2 '@'" to sMsg
    End
    
End_Function

// Comprobador de simbolos permitidos
Function ComprobarSimbolos String sCaracter Returns Boolean
    Integer iCount
    String sSimbolosProhibidos
    
    For iCount from 1 to (Length(cSimbolos))
        Move (Mid(cSimbolos,1,iCount)) to sSimbolosProhibidos
        If (sCaracter = sSimbolosProhibidos) Begin
            Function_Return True
        End
    Loop
End_Function

// FUNCION PARA CONSUMIR API NEUTRINO

Function validacionAPI String sEmail Returns Boolean
    Handle hoHttp hoJsonRequest hoResponse
    Boolean bRet bIsnull
    String sResponse
    
    // https://www.neutrinoapi.com/api/email-validate/
    
    Get Create (RefClass(cJsonHttpTransfer)) to hoHttp
    Get Create (RefClass(cJsonObject))       to hoJsonRequest
    
    Send InitializeJsonType of hoJsonRequest jsonTypeObject
    
    Send SetMemberValue of hoJsonRequest "email"        jsonTypeString  sEmail
    Send SetMemberValue of hoJsonRequest "fix-typos"    jsonTypeBoolean False
    
    Get AddHeader of hoHttp "User-ID" "Jaime1346" to bRet
    Get AddHeader of hoHttp "API-Key" "5jiDCPbsFp2LBaN3p9F2uXc4KvrrT3ZizN5ac1Rrfjc9cVj6" to bRet
    
    Get HttpPostJson of hoHttp "neutrinoapi.net" "/email-validate" hoJsonRequest (&bRet) to hoResponse
    
    
    If (bRet and (ResponseStatusCode(hoHttp) = 200)) Begin
        //Send Info_Box (Stringify(hoResponse)) "Respuesta de la API"
        If (HasMember(hoResponse,"valid")) Begin
            Get IsMemberOfJsonType of hoResponse "valid" jsonTypeNull to bIsnull
            If (bIsnull) Begin
                Function_Return False
            End
            Else Begin
                Get MemberValue of hoResponse "valid" to sResponse
                If (sResponse = "1") Begin
                End
                Else Begin
                    Function_Return False
                End
            End
        End
        If (HasMember(hoResponse,"is-disposable")) Begin
            Get IsMemberOfJsonType of hoResponse "is-disposable" jsonTypeNull to bIsnull
            If (bIsnull) Begin
                Function_Return False
            End
            Else Begin
                Get MemberValue of hoResponse "is-disposable" to sResponse
                If (sResponse = "0") Begin
                    //Send Info_Box "El correo no es temporal" ""
                    Function_Return True
                End
                Else Begin
                    //Move "El correo es temporal" to sMsg
                    Function_Return False
                End
            End
        End
        
    End
    
    
    
End_Function