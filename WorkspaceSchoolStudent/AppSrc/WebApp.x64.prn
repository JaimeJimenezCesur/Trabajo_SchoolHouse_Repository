Compiling Program: C:\Users\Usuario\Documents\GitHub\Trabajo_SchoolHouse_Repository\WorkspaceSchoolStudent\AppSrc\WebApp.src
Memory Available: 51762360320
1>Use AllWebAppClasses.pkg
Using pre-compiled package ALLWEBAPPCLASSES.PKG
Including file: AllWebAppClasses.x64.pkd    (C:\Program Files\DataFlex 24.0\Pkg\AllWebAppClasses.x64.pkd)
36015>Use cConnection.pkg
36015>Use cWebMenuItem.pkg
36015>
36015>Object oApplication is a cApplication
36017>    Object oConnection is a cConnection
36019>        Use LoginEncryption.pkg
Including file: LoginEncryption.pkg    (C:\Program Files\DataFlex 24.0\Pkg\LoginEncryption.pkg)
36019>>>Use cLoginEncryption.pkg
Including file: cLoginEncryption.pkg    (C:\Program Files\DataFlex 24.0\Pkg\cLoginEncryption.pkg)
36019>>>>>Use cCryptographerEx.pkg
36019>>>>>
36019>>>>>Class cLoginEncryption is a cObject
36020>>>>>    
36020>>>>>    Procedure Construct_Object
36022>>>>>        Forward Send Construct_Object
36024>>>>>        // this must be set to a multi (40ish) character random key
36024>>>>>        Property String psEncryptPassword ""
36025>>>>>        
36025>>>>>        Object oDataCrypter is a cCryptographerEx
36027>>>>>            Set piHash to CALG_SHA_256
36028>>>>>            Set piCipher to CALG_AES_256
36029>>>>>            Set psProvider to "" //  Not providing a specific provider gives the default provider for the provider type
36030>>>>>            Set piProvider to PROV_RSA_AES
36031>>>>>        End_Object
36032>>>>>    End_Procedure
36033>>>>>    
36033>>>>>    // This can be augmented to return a password encryption key using any
36033>>>>>    // hidden mechanism desired.
36033>>>>>    Function GetEncryptionPassword Returns String
36035>>>>>        String sPassword
36035>>>>>        Get psEncryptPassword to sPassword
36036>>>>>        Function_Return sPassword
36037>>>>>    End_Function
36038>>>>>    
36038>>>>>    // Encrypts a string into an unreadable hash that can later be decrypted using DecryptKey.
36038>>>>>    //
36038>>>>>    // Params:
36038>>>>>    //   sPlainText     String to encrypt.
36038>>>>>    // Returns:
36038>>>>>    //   Base64 encoded hash.
36038>>>>>    Function EncryptPassword String sPlainText Returns String
36040>>>>>        String sEncryptPassword sBase64
36040>>>>>        UChar[] ucBinary
36041>>>>>        Pointer pBase64
36041>>>>>        Integer iVoid
36041>>>>>        
36041>>>>>        //  Encrypt Key
36041>>>>>        Get GetEncryptionPassword to sEncryptPassword
36042>>>>>        If (sEncryptPassword = "") Begin
36044>>>>>            Error DFERR_PROGRAM "No encryption password set"
36045>>>>>>
36045>>>>>        End
36045>>>>>>
36045>>>>>        
36045>>>>>        Get Encrypt of oDataCrypter (StringToUCharArray(sEncryptPassword)) (StringToUCharArray(sPlainText)) to ucBinary
36046>>>>>        
36046>>>>>        If (SizeOfArray(ucBinary) = 0) Begin
36048>>>>>            Error DFERR_PROGRAM "Unable to encrypt database login password"
36049>>>>>>
36049>>>>>            Function_Return ""
36050>>>>>        End
36050>>>>>>
36050>>>>>        
36050>>>>>        //  Encode binary hash to Base64
36050>>>>>        Move (Base64Encode(AddressOf(ucBinary), SizeOfArray(ucBinary))) to pBase64
36051>>>>>        Move (PointerToString(pBase64)) to sBase64
36052>>>>>        Move (Free(pBase64)) to iVoid
36053>>>>>        
36053>>>>>        Function_Return sBase64
36054>>>>>    End_Function
36055>>>>>    
36055>>>>>    
36055>>>>>    // Decrypts the unreadable hash generated by EncryptKey into a readable string.
36055>>>>>    //
36055>>>>>    // Params:
36055>>>>>    //   sBase64EncryptedPassword       Base64 Encrypted password
36055>>>>>    // Returns:
36055>>>>>    //   Readable plain text password
36055>>>>>    Function DecryptPassword String sBase64EncryptedPassword Returns String
36057>>>>>        String sEncryptPassword
36057>>>>>        UChar[] ucBinary ucPlain
36059>>>>>        Boolean bIsHex
36059>>>>>        Integer iLen iVoid
36059>>>>>        Pointer pBinary
36059>>>>>        
36059>>>>>        If (sBase64EncryptedPassword <> "") Begin
36061>>>>>            //  Decode from Base64
36061>>>>>            Move (Base64Decode(AddressOf(sBase64EncryptedPassword), &iLen)) to pBinary
36062>>>>>            
36062>>>>>            Move (ResizeArray(ucBinary, iLen, 0)) to ucBinary
36063>>>>>            Move (MemCopy(AddressOf(ucBinary), pBinary, iLen)) to iVoid
36064>>>>>                        
36064>>>>>            Move (Free(pBinary)) to iVoid
36065>>>>>            
36065>>>>>            //  Encrypted binary hash to string
36065>>>>>            Get GetEncryptionPassword to sEncryptPassword
36066>>>>>            Get Decrypt of oDataCrypter (StringToUCharArray(sEncryptPassword)) ucBinary to ucPlain
36067>>>>>        End
36067>>>>>>
36067>>>>>        
36067>>>>>        Function_Return (UCharArrayToString(ucPlain))
36068>>>>>    End_Function
36069>>>>>End_Class
36070>>>
36070>>>Object oLoginEncryption is a cLoginEncryption
36072>>>
36072>>>    // this must be created in your appsrc directory and must contain an encryption
36072>>>    // key that is set to psEncryptPassword. It will look something like this
36072>>>    //
36072>>>    // Set psEncryptPassword to "JchUAo7W@r.b{<Yk~OONi0nq=sMi[*Rn[A-`Vo)q"
36072>>>    //  
Including file: LoginEncryptionKey.inc    (C:\Users\Usuario\Documents\GitHub\Trabajo_SchoolHouse_Repository\WorkspaceSchoolStudent\AppSrc\LoginEncryptionKey.inc)
36072>>>>// Studio generated login encryption key
36072>>>>Set psEncryptPassword to "H\-<*+kCq)H>TRhbD]]-Q}m7i>%f(nX)Hgh>Hl5u"
36073>>>>
36073>>>    
36073>>>    // use this to register this object to your cConnection Object. This object
36073>>>    // must be created after the cConnection object
36073>>>    Move Self to ghoLoginEncryption
36074>>>End_Object
36075>    End_Object
36076>End_Object
36077>
36077>Object oWebApp is a cWebApp
36079>    Set psTheme to "Df_Flat_Touch"
36080>    Set peAlignView to alignCenter
36081>    
36081>    
36081>    // It is important to set this so that all views will default
36081>    // to drill down style views.
36081>    Set peApplicationStyle to wvsDrillDown   
36082>    Set peApplicationStateMode to asmHistoryAndUrls 
36083>    Set psEncryptPassword to "J>cZw#-xCKBoUj6{(F4r%DnFD|QOxMn3`$xS|G7R"
36084>    
36084>    Object oViewStack is a cWebViewStack
36086>    End_Object
36087>    
36087>    Procedure HideHeader
36090>        WebSet pbRender of oHeaderPanel to False
36091>    End_Procedure
36092>
36092>    Procedure ShowHeader
36095>        WebSet pbRender of oHeaderPanel to True 
36096>    End_Procedure
36097>
36097>    Object oHeaderPanel is a cWebPanel
36099>        Set peRegion to prTop
36100>        Set psCSSClass to "HeaderPanel"
36101>        
36101>        Object oMenuPanel is a cWebPanel
36103>            Set peRegion to prLeft
36104>            Set piWidth to 50
36105>            
36105>            Object oMenuButton is a cWebMenuButton
36107>                Set piMenuHeight to 500
36108>
36108>                Object oDashboard_itm is a cWebMenuItem
36110>                    Set psCaption to "Dashboard"
36111>                    
36111>                    WebRegisterPath ntNavigateBegin oDashboard
36117>
36117>                    Procedure OnClick
36120>                        Send NavigatePath
36121>                    End_Procedure
36122>                End_Object
36123>
36123>                Object oViewMenu is a cWebMenuItem
36125>                    Set psCaption to "Selects"
36126>
36126>                    Object oSelectSchoolHouseItem1 is a cWebMenuItem
36128>                        Set psCaption to "SelectSchoolHouse"
36129>
36129>                        WebRegisterPath ntNavigateBegin oSelectSchoolHouse
36135>
36135>                        Procedure OnClick
36138>                            Forward Send OnClick
36140>                                Send NavigatePath
36141>                        End_Procedure
36142>                    End_Object
36143>
36143>                    Object oSelectStudentItem1 is a cWebMenuItem
36145>                        Set psCaption to "SelectStudent"
36146>
36146>                        WebRegisterPath ntNavigateBegin oSelectStudent
36152>
36152>                        Procedure OnClick
36155>                            Forward Send OnClick
36157>                                Send NavigatePath
36158>                        End_Procedure
36159>                    End_Object
36160>                End_Object
36161>                
36161>                Object oViewMenu2 is a cWebMenuItem
36163>                    Set psCaption to "Zooms"
36164>
36164>                    Object oSelectSchoolHouseItem1 is a cWebMenuItem
36166>                        Set psCaption to "ZoomSchoolHouse"
36167>
36167>                        WebRegisterPath ntNavigateBegin oZoomSchoolHouse
36173>
36173>                        Procedure OnClick
36176>                            Forward Send OnClick
36178>                                Send NavigatePath
36179>                        End_Procedure
36180>                    End_Object
36181>
36181>                    Object oSelectStudentItem1 is a cWebMenuItem
36183>                        Set psCaption to "ZoomStudent"
36184>
36184>                        WebRegisterPath ntNavigateBegin oZoomStudent
36190>
36190>                        Procedure OnClick
36193>                            Forward Send OnClick
36195>                                Send NavigatePath
36196>                        End_Procedure
36197>                    End_Object
36198>                End_Object
36199>
36199>                Object oSignOut_itm is a cWebMenuItem
36201>                    Set psCaption to "Log out"
36202>
36202>                    Procedure OnClick
36205>                        Send RequestLogOut of ghoWebSessionManager
36206>                    End_Procedure
36207>                End_Object
36208>            End_Object  
36209>
36209>            Object oBackButton is a cWebButton
36211>                Set psCSSClass to "WebBack_Icon"
36212>                Set pbRender to False
36213>                
36213>                Procedure OnClick
36216>                    Handle hoTop
36216>                    
36216>                    Get TopViewHandle of oViewStack to hoTop
36217>                    If (hoTop > 0) Begin
36219>                        Send NavigateCancel of hoTop 
36220>                    End
36220>                End_Procedure
36221>            End_Object
36222>            
36222>            Send AddClient of oViewStack Self
36223>                
36223>            Procedure OnUpdateViewStack
36226>                Handle hoTop hoDflt
36226>                Integer eMode
36226>                Boolean bTop
36226>                
36226>                WebGet peMode of (Owner(Self)) to eMode
36227>                
36227>                Get TopViewHandle of oViewStack to hoTop
36228>                Get GetDefaultView to hoDflt
36229>                Move (hoTop=0 or hoTop=hoDflt) to bTop
36230>                
36230>                WebSet pbRender of oBackButton to (not(bTop) and eMode >= rmMobile)
36231>                WebSet pbRender of oMenuButton to (bTop or eMode < rmMobile)
36232>            End_Procedure
36233>
36233>        End_Object
36234>
36234>        Object oCaptionPanel is a cWebPanel
36236>            Set piColumnCount to 12
36237>
36237>            Object oCaptionBreadcrumb is a cWebBreadcrumb
36239>                Set peBreadcrumbStyle to crumbCaption
36240>                WebSetResponsive peBreadcrumbStyle rmMobile to crumbDropDown
36241>            End_Object         
36242>        End_Object
36243>        
36243>        Object oActionPanel is a cWebPanel
36245>            Set peRegion to prRight
36246>            Set piColumnCount to 1
36247>            Set piWidth to 120
36248>
36248>            Object oMainActions is a cWebActionBar
36250>                Set psGroupName to "MainActions"
36251>
36251>                Set piColumnSpan to 0
36252>                Set peAlign to alignRight
36253>            End_Object
36254>        End_Object
36255>
36255>        Object oBreadcrumbPanel is a cWebPanel
36257>            Set peRegion to prBottom
36258>            
36258>            Object oHorizontalBreadcrumb is a cWebBreadcrumb
36260>                WebSetResponsive pbRender rmMobile to False
36261>            End_Object         
36262>        End_Object
36263>
36263>    End_Object    
36264>
36264>    Use SessionManager.wo
Including file: SessionManager.wo    (C:\Users\Usuario\Documents\GitHub\Trabajo_SchoolHouse_Repository\WorkspaceSchoolStudent\AppSrc\SessionManager.wo)
36264>>>Use cWebSessionManagerStandard.pkg
Including file: cWebSessionManagerStandard.pkg    (C:\Program Files\DataFlex 24.0\Pkg\cWebSessionManagerStandard.pkg)
36264>>>>>Use cWebSessionManager.pkg
36264>>>>>Use cWebAppSessionDataDictionary.dd
Including file: cWebAppSessionDataDictionary.dd    (C:\Program Files\DataFlex 24.0\Pkg\cWebAppSessionDataDictionary.dd)
36264>>>>>>>Use DataDict.pkg
36264>>>>>>>
36264>>>>>>>Open WebAppSession
Including file: WebAppSession.fd    (C:\Users\Usuario\Documents\GitHub\Trabajo_SchoolHouse_Repository\WorkspaceSchoolStudent\DDSrc\WebAppSession.fd)
36266>>>>>>>Open WebAppUser
Including file: WebAppUser.fd    (C:\Users\Usuario\Documents\GitHub\Trabajo_SchoolHouse_Repository\WorkspaceSchoolStudent\DDSrc\WebAppUser.fd)
36268>>>>>>>
36268>>>>>>>Class cWebAppSessionDataDictionary is a DataDictionary
36269>>>>>>>    Procedure Construct_Object
36271>>>>>>>        Forward Send Construct_Object
36273>>>>>>>
36273>>>>>>>        Set Main_File to WebAppSession.File_Number
36274>>>>>>>
36274>>>>>>>        Set Add_Server_File to WebAppUser.File_Number
36275>>>>>>>
36275>>>>>>>        Set ParentNullAllowed WebAppUser.File_Number to True
36276>>>>>>>
36276>>>>>>>        Set Foreign_Field_Option DD_KEYFIELD DD_NOPUT to True
36277>>>>>>>        Set Foreign_Field_Option DD_KEYFIELD DD_FINDREQ to True
36278>>>>>>>        Set Foreign_Field_Option DD_INDEXFIELD DD_NOPUT to True
36279>>>>>>>        Set Foreign_Field_Option DD_DEFAULT DD_DISPLAYONLY to True
36280>>>>>>>
36280>>>>>>>        Set Field_Checkbox_Values Field WebAppSession.Active to "Y" "N"
36281>>>>>>>        Set Field_Error Field WebAppSession.Active to 500 "Invalid WebAppSession Active State"
36282>>>>>>>    End_Procedure
36283>>>>>>>
36283>>>>>>>    Procedure Creating
36285>>>>>>>        DateTime dtCurrentDateTime
36285>>>>>>>        
36285>>>>>>>        Forward Send Creating
36287>>>>>>>        
36287>>>>>>>        //  Init usecounter
36287>>>>>>>        Move 0 to WebAppSession.UseCount
36288>>>>>>>        
36288>>>>>>>        //  Set the creation and access time to the current time
36288>>>>>>>        Move (CurrentDateTime()) to dtCurrentDateTime
36289>>>>>>>    
36289>>>>>>>        Get TimeToString dtCurrentDateTime to WebAppSession.CreateTime
36290>>>>>>>        Get TimeToString dtCurrentDateTime to WebAppSession.LastAccessTime
36291>>>>>>>        
36291>>>>>>>        Move dtCurrentDateTime to WebAppSession.CreateDate
36292>>>>>>>        Move dtCurrentDateTime to WebAppSession.LastAccessDate
36293>>>>>>>    End_Procedure
36294>>>>>>>    
36294>>>>>>>    //
36294>>>>>>>    //  Converts the given time to an string that can be saved in the database.
36294>>>>>>>    //
36294>>>>>>>    //  Params:
36294>>>>>>>    //      dtTime  Time to convert
36294>>>>>>>    //  Returns:
36294>>>>>>>    //      String with "HH:MM:SS" format
36294>>>>>>>    //
36294>>>>>>>    Function TimeToString DateTime dtTime Returns String
36296>>>>>>>        String sHours sMinutes sSeconds
36296>>>>>>>        
36296>>>>>>>        //  Extract parts
36296>>>>>>>        Move (String(DateGetHour(dtTime))) to sHours
36297>>>>>>>        Move (String(DateGetMinute(dtTime))) to sMinutes
36298>>>>>>>        Move (String(DateGetSecond(dtTime))) to sSeconds
36299>>>>>>>        
36299>>>>>>>        //  Fill out with 0
36299>>>>>>>        If (Length(sHours) = 1) ;            Move ("0" + sHours) to sHours
36302>>>>>>>        If (Length(sMinutes) = 1) ;            Move ("0" + sMinutes) to sMinutes
36305>>>>>>>        If (Length(sSeconds) = 1) ;            Move ("0" + sSeconds) to sSeconds
36308>>>>>>>        
36308>>>>>>>        Function_Return (sHours + ":" + sMinutes + ":" + sSeconds)
36309>>>>>>>    End_Function
36310>>>>>>>    
36310>>>>>>>    //
36310>>>>>>>    //  Sets the time of the datetime variable to the time in the string.
36310>>>>>>>    //
36310>>>>>>>    //  Params:
36310>>>>>>>    //      dtTime  Datetime variable to add time to
36310>>>>>>>    //      sTimeString String with time in the format "HH:MM:SS"
36310>>>>>>>    //  Returns:
36310>>>>>>>    //      dtDateTime with the loaded time
36310>>>>>>>    //
36310>>>>>>>    Function StringToTime DateTime dtTime String sTimeString Returns DateTime
36312>>>>>>>        String sHours sMinutes sSeconds
36312>>>>>>>        
36312>>>>>>>        //  Extract parts
36312>>>>>>>        Move (Mid(sTimeString, 2, 1)) to sHours
36313>>>>>>>        Move (Mid(sTimeString, 2, 4)) to sMinutes
36314>>>>>>>        Move (Mid(sTimeString, 2, 7)) to sSeconds
36315>>>>>>>        
36315>>>>>>>        //  Set to DateTime
36315>>>>>>>        Move (DateSetHour(dtTime, (Integer(sHours)))) to dtTime
36316>>>>>>>        Move (DateSetMinute(dtTime, (Integer(sMinutes)))) to dtTime
36317>>>>>>>        Move (DateSetSecond(dtTime, (Integer(sSeconds)))) to dtTime
36318>>>>>>>        
36318>>>>>>>        Function_Return dtTime
36319>>>>>>>    End_Function
36320>>>>>>>End_Class
36321>>>>>Use cWebAppUserDataDictionary.dd
Including file: cWebAppUserDataDictionary.dd    (C:\Program Files\DataFlex 24.0\Pkg\cWebAppUserDataDictionary.dd)
36321>>>>>>>Use DataDict.pkg
36321>>>>>>>Open WebAppUser
36323>>>>>>>Open WebAppSession
36325>>>>>>>
36325>>>>>>>Class cWebAppUserDataDictionary is a DataDictionary
36326>>>>>>>    
36326>>>>>>>    Procedure Construct_Object
36328>>>>>>>        Forward Send Construct_Object
36330>>>>>>>        Set Main_File to WebAppUser.File_Number
36331>>>>>>>
36331>>>>>>>        Set Add_Client_File to WebAppSession.File_Number
36332>>>>>>>
36332>>>>>>>        Set Foreign_Field_Option DD_KEYFIELD DD_NOPUT to True
36333>>>>>>>        Set Foreign_Field_Option DD_KEYFIELD DD_FINDREQ to True
36334>>>>>>>        Set Foreign_Field_Option DD_INDEXFIELD DD_NOPUT to True
36335>>>>>>>        Set Foreign_Field_Option DD_DEFAULT DD_DISPLAYONLY to True
36336>>>>>>>    End_Procedure
36337>>>>>>>
36337>>>>>>>End_Class
36338>>>>>
36338>>>>>Class cWebSessionManagerStandard is a cWebSessionManager
36339>>>>>    
36339>>>>>    Procedure Construct_Object
36341>>>>>        Handle hoUserDD hoSessionDD
36341>>>>>        
36341>>>>>        Forward Send Construct_Object
36343>>>>>        
36343>>>>>        Property Handle phoUserDD 0      // Handle to the WebAppUser DDO
36344>>>>>        Property Handle phoSessionDD 0   // Handle to the WebAppSession DDO        
36345>>>>>        
36345>>>>>        Get Create (RefClass(cWebAppUserDataDictionary)) to hoUserDD
36346>>>>>        Get Create (RefClass(cWebAppSessionDataDictionary)) to hoSessionDD
36347>>>>>        Set DDO_Server of hoSessionDD to hoUserDD
36348>>>>>
36348>>>>>        Set phoUserDD to hoUserDD
36349>>>>>        Set phoSessionDD to hoSessionDD
36350>>>>>        Property Boolean pbCreatingNewSession False
36351>>>>>        Property String psLoginName
36352>>>>>        Property String psUserName ""
36353>>>>>        Property Integer piUserRights 0
36354>>>>>    End_Procedure
36355>>>>>    
36355>>>>>    Function CreateSession String sRemoteAddress Returns String
36357>>>>>        String sSessionKey
36357>>>>>        Integer iErr
36357>>>>>        Boolean bLogWebSession
36357>>>>>        Handle hoSessionDD       
36357>>>>>        Get phoSessionDD to hoSessionDD
36358>>>>>        
36358>>>>>        //  Get session key
36358>>>>>        Forward Get CreateSession sRemoteAddress to sSessionKey
36360>>>>>        
36360>>>>>        Get pbLogWebSession to bLogWebSession
36361>>>>>        If not bLogWebSession Begin
36363>>>>>            Function_Return sSessionKey        
36364>>>>>        End
36364>>>>>>
36364>>>>>
36364>>>>>        //  Store session
36364>>>>>        Send Clear of hoSessionDD
36365>>>>>        Set Field_Changed_Value of hoSessionDD Field WebAppSession.SessionKey to sSessionKey
36366>>>>>        Set Field_Changed_Value of hoSessionDD Field WebAppSession.RemoteAddress to sRemoteAddress
36367>>>>>        Set Field_Changed_Value of hoSessionDD Field WebAppSession.Active to "Y"
36368>>>>>        Get Request_Validate of hoSessionDD to iErr
36369>>>>>        If (iErr) Begin
36371>>>>>            // this should not happen. If it does its a programming error
36371>>>>>            Error DFERR_PROGRAM C_$WebAppSesionValidateFailed
36372>>>>>>
36372>>>>>            Function_Return ""
36373>>>>>        End
36373>>>>>>
36373>>>>>        Send Request_Save of hoSessionDD
36374>>>>>        If (Err) Begin
36376>>>>>            // this shouldn't happen, if it does likely a duplicate session key issue, even through request_save already gave an error we give another one to make tracking down easier
36376>>>>>            Error DFERR_PROGRAM C_$WebAppSesionSaveFailed
36377>>>>>>
36377>>>>>            Function_Return ""
36378>>>>>        End
36378>>>>>>
36378>>>>>       
36378>>>>>        Function_Return sSessionKey        
36379>>>>>    End_Function
36380>>>>>    
36380>>>>>    
36380>>>>>    Function ValidateSession String sSessionKey Boolean bOptLoadWebApp Returns Boolean
36382>>>>>        DateTime dtLastAccess dtCurrent
36382>>>>>        TimeSpan tsDiff
36382>>>>>        Integer iErr iSessionTimeout iSpanMinutes
36382>>>>>        Boolean bResult bCreatingNewSession
36382>>>>>        Boolean bLogWebSession bLoadWebApp
36382>>>>>        Integer eLoginMode
36382>>>>>        String sTime
36382>>>>>        Handle hoSessionDD hoUserDD       
36382>>>>>        
36382>>>>>        Move False to bLoadWebApp
36383>>>>>        If (num_arguments >= 2) Begin
36385>>>>>            Move bOptLoadWebApp to bLoadWebApp
36386>>>>>        End
36386>>>>>>
36386>>>>>        
36386>>>>>        Get phoSessionDD to hoSessionDD
36387>>>>>        Get phoUserDD to hoUserDD
36388>>>>>        
36388>>>>>        Get pbLogWebSession to bLogWebSession
36389>>>>>        Get peLoginMode to eLoginMode
36390>>>>>        
36390>>>>>        // for this object, you can only disable logging if login completely is disabled
36390>>>>>        If (not(bLogWebSession) and (eLoginMode<>lmLoginNone)) Begin
36392>>>>>            Error DFERR_PROGRAM C_$WebSessionLoggingMustBeEnabled
36393>>>>>>
36393>>>>>            Function_Return False
36394>>>>>        End
36394>>>>>>
36394>>>>>
36394>>>>>        //  Clear session properties
36394>>>>>        Set psSessionKey to ""
36395>>>>>        Send UpdateSessionProperties True
36396>>>>>        
36396>>>>>        If not bLogWebSession Begin
36398>>>>>            Forward Get ValidateSession sSessionKey to bResult
36400>>>>>            Function_Return bResult
36401>>>>>        End        
36401>>>>>>
36401>>>>>        
36401>>>>>        Move False to bResult
36402>>>>>        Get piSessionTimeout to iSessionTimeout 
36403>>>>>        
36403>>>>>        //  Check if session exists
36403>>>>>        Send Clear of hoSessionDD
36404>>>>>        Move sSessionKey to WebAppSession.SessionKey
36405>>>>>        Send Find of hoSessionDD EQ Index.1
36406>>>>>            
36406>>>>>        If (Found) Begin
36408>>>>>            //  Calculate timespan between now and last access time
36408>>>>>            Move (CurrentDateTime()) to dtCurrent
36409>>>>>            Move WebAppSession.LastAccessDate to dtLastAccess
36410>>>>>            Get StringToTime of hoSessionDD dtLastAccess WebAppSession.LastAccessTime to dtLastAccess
36411>>>>>            Move (dtCurrent - dtLastAccess) to tsDiff
36412>>>>>            Move (SpanTotalMinutes(tsDiff)) to iSpanMinutes
36413>>>>>            
36413>>>>>            //  Check if session didn't time out
36413>>>>>            If (IsDateValid(dtLastAccess) and (iSessionTimeout <= 0 or (iSpanMinutes < iSessionTimeout)) and WebAppSession.Active = "Y") Begin
36415>>>>>                Forward Get ValidateSession sSessionKey to bResult
36417>>>>>                   
36417>>>>>                If (bResult) Begin
36419>>>>>                    //  Update session record
36419>>>>>                    Get TimeToString of hoSessionDD dtCurrent to sTime 
36420>>>>>                    Set Field_Changed_Value of hoSessionDD Field WebAppSession.LastAccessDate to dtCurrent
36421>>>>>                    Set Field_Changed_Value of hoSessionDD Field WebAppSession.LastAccessTime to sTime
36422>>>>>                    Set Field_Changed_Value of hoSessionDD Field WebAppSession.UseCount to (WebAppSession.UseCount + 1)
36423>>>>>                    Get Request_Validate of hoSessionDD to iErr
36424>>>>>                    If (iErr) Begin
36426>>>>>                        // this should not happen. If it does its a programming error
36426>>>>>                        Error DFERR_PROGRAM C_$WebAppSesionValidateFailed
36427>>>>>>
36427>>>>>                        Function_Return False
36428>>>>>                    End
36428>>>>>>
36428>>>>>                    Send Request_Save of hoSessionDD
36429>>>>>                    
36429>>>>>                    //  Update user properties
36429>>>>>                    Send UpdateSessionProperties False
36430>>>>>                End
36430>>>>>>
36430>>>>>            End
36430>>>>>>
36430>>>>>            Else Begin
36431>>>>>                // Test the Creating New Session Flag to protect against infinite recursion....
36431>>>>>                Get pbCreatingNewSession to bCreatingNewSession
36432>>>>>                
36432>>>>>                If (not(bCreatingNewSession)) Begin
36434>>>>>                    If (not(bLoadWebApp)) Begin
36436>>>>>                        Move False to bResult   //  We can only continue immediately if we were loading the webapp, other operations are not allowed!
36437>>>>>                        Error DFERR_WEBAPP_SESSION_TIMEOUT "Your application session has timed out or is inactive, please login again."
36438>>>>>>
36438>>>>>                        Send NavigateRefresh of ghoWebApp          // refresh the WebApp at the client (triggers a login)
36439>>>>>                    End
36439>>>>>>
36439>>>>>                    Else Begin
36440>>>>>                        Set pbCreatingNewSession to True                    
36441>>>>>                        Get RecreateSession of ghoWebApp to bResult 
36442>>>>>                        Set pbCreatingNewSession to False                        
36443>>>>>                    End
36443>>>>>>
36443>>>>>                End
36443>>>>>>
36443>>>>>            End
36443>>>>>>
36443>>>>>        End
36443>>>>>>
36443>>>>>        Else Begin
36444>>>>>            Error DFERR_WEBAPP_BAD_SESSION_KEY "Session key not known (reload page to recreate session)"
36445>>>>>>
36445>>>>>        End
36445>>>>>>
36445>>>>>        
36445>>>>>        Function_Return bResult
36446>>>>>    End_Function
36447>>>>>    
36447>>>>>    Function UserLogin String sLoginName String sPassword Returns Boolean
36449>>>>>        String sSessionKey sUserPassword
36449>>>>>        Handle hoSessionDD hoUserDD
36449>>>>>        Boolean bMatch  
36449>>>>>        
36449>>>>>        Get phoSessionDD to hoSessionDD
36450>>>>>        Get phoUserDD to hoUserDD
36451>>>>>        Integer iErr eLoginMode
36451>>>>>        
36451>>>>>        // Refind session record
36451>>>>>        Get psSessionKey to sSessionKey
36452>>>>>        Send Clear of hoSessionDD
36453>>>>>        Move sSessionKey to WebAppSession.SessionKey
36454>>>>>        Send Find of hoSessionDD EQ Index.1
36455>>>>>        
36455>>>>>        If (Found and WebAppSession.SessionKey = sSessionKey) Begin
36457>>>>>            Get peLoginMode to eLoginMode
36458>>>>>            
36458>>>>>            //  Find the user
36458>>>>>            Move sLoginName to WebAppUser.LoginName
36459>>>>>            Send Find of hoUserDD EQ Index.1
36460>>>>>            
36460>>>>>            // Check username and password
36460>>>>>            If (Found and (Lowercase(sLoginName) = Lowercase(Trim(WebAppUser.LoginName)))) Begin
36462>>>>>                Get Field_Current_Value of hoUserDD Field WebAppUser.Password to sUserPassword
36463>>>>>                Get ComparePasswords (Trim(sUserPassword)) (Trim(sPassword)) to bMatch
36464>>>>>                
36464>>>>>                If (bMatch) Begin
36466>>>>>                    // Store the login
36466>>>>>                    Set Field_Changed_Value of hoUserDD Field WebAppUser.LastLogin to (CurrentDateTime())
36467>>>>>                    Get Request_Validate of hoSessionDD to iErr
36468>>>>>                    If (iErr) Begin
36470>>>>>                        // this should not happen. If it does its a programming error
36470>>>>>                        Error DFERR_PROGRAM C_$WebAppSesionValidateFailed
36471>>>>>>
36471>>>>>                        Function_Return False
36472>>>>>                    End
36472>>>>>>
36472>>>>>                    
36472>>>>>                    Send Request_Save of hoSessionDD
36473>>>>>                    
36473>>>>>                    // Update session properties
36473>>>>>                    Send UpdateSessionProperties False
36474>>>>>                    Send NotifyChangeRights
36475>>>>>                    Function_Return True
36476>>>>>                End
36476>>>>>>
36476>>>>>                Else Begin
36477>>>>>                    //  We should rely directly on this buffer elsewhere but just be sure
36477>>>>>                    Send Clear of hoUserDD
36478>>>>>                End
36478>>>>>>
36478>>>>>            End
36478>>>>>>
36478>>>>>        End
36478>>>>>>
36478>>>>>          
36478>>>>>        Function_Return False
36479>>>>>    End_Function
36480>>>>>    
36480>>>>>    Function IsLoggedIn Returns Boolean
36482>>>>>        String sLoginName
36482>>>>>        Boolean bLogWebSession bLoggedIn
36482>>>>>        
36482>>>>>        Get pbLogWebSession to bLogWebSession
36483>>>>>        If not bLogWebSession Begin
36485>>>>>            Forward Get IsLoggedIn to bLoggedIn
36487>>>>>            Function_Return bLoggedIn
36488>>>>>        End
36488>>>>>>
36488>>>>>        
36488>>>>>        Get psLoginName to sLoginName
36489>>>>>        
36489>>>>>        Function_Return (sLoginName <> "")
36490>>>>>    End_Function
36491>>>>>    
36491>>>>>    
36491>>>>>    //
36491>>>>>    // This procedure is called when validating a session and after logging in. Its purpose is to 
36491>>>>>    // update properties based on the session and user data. Augment this function to update 
36491>>>>>    // properties based on the session / user table. Note that WebAppUser and WebAppSession contain
36491>>>>>    // the right records when this procedure is called.
36491>>>>>    //
36491>>>>>    // Params:
36491>>>>>    //      bClear   True if the procedure is called before session validation to clear properties.
36491>>>>>    //
36491>>>>>    Procedure UpdateSessionProperties Boolean bClear
36493>>>>>        Handle hoUserDD
36493>>>>>        
36493>>>>>        Get phoUserDD to hoUserDD
36494>>>>>        
36494>>>>>        //  Update user properties
36494>>>>>        If (not(bClear) and HasRecord(hoUserDD)) Begin
36496>>>>>            Set psUsername to (Trim(WebAppUser.FullName))
36497>>>>>            Set psLoginName to (Trim(WebAppUser.LoginName))
36498>>>>>            Set piUserRights to WebAppUser.Rights
36499>>>>>            
36499>>>>>            Send OnSessionPropertiesSet 
36500>>>>>        End
36500>>>>>>
36500>>>>>        Else Begin
36501>>>>>            Set psUsername to ""
36502>>>>>            Set psLoginName to ""
36503>>>>>            Set piUserRights to 0
36504>>>>>            
36504>>>>>            Send OnSessionPropertiesClear
36505>>>>>        End
36505>>>>>>
36505>>>>>    End_Procedure
36506>>>>>    
36506>>>>>    //
36506>>>>>    // This function is called to perform the password comparison. It gets the entered password and
36506>>>>>    // the password value of the user table as parameters. The WebAppUser buffer will contain the
36506>>>>>    // right record. This function can be augmented to implement security features like storing the
36506>>>>>    // password as a hashed value.
36506>>>>>    //
36506>>>>>    // Params:
36506>>>>>    //      sUserPassword       Value of the WebAppUser.Password field.
36506>>>>>    //      sEnteredPassword    Value entered on the login screen during login.
36506>>>>>    //
36506>>>>>    Function ComparePasswords String sUserPassword String sEnteredPassword Returns Boolean
36508>>>>>        Function_Return (sUserPassword = sEnteredPassword)
36509>>>>>    End_Function
36510>>>>>    
36510>>>>>    Procedure OnSessionPropertiesSet
36512>>>>>        //  Empty event stub
36512>>>>>    End_Procedure
36513>>>>>    
36513>>>>>    Procedure OnSessionPropertiesClear
36515>>>>>        //  Empty event stub
36515>>>>>    End_Procedure
36516>>>>>    
36516>>>>>    Procedure EndSession
36518>>>>>        Integer iErr
36518>>>>>        Boolean bLogWebSession
36518>>>>>        Handle hoSessionDD       
36518>>>>>        
36518>>>>>        Get phoSessionDD to hoSessionDD
36519>>>>>        Get pbLogWebSession to bLogWebSession
36520>>>>>        If not bLogWebSession Begin
36522>>>>>            Forward Send EndSession
36524>>>>>            Procedure_Return
36525>>>>>        End
36525>>>>>>
36525>>>>>            
36525>>>>>        //  Check if session exists
36525>>>>>        Send Clear of hoSessionDD
36526>>>>>        Get psSessionKey to WebAppSession.SessionKey
36527>>>>>        
36527>>>>>        Send Find of hoSessionDD EQ Index.1
36528>>>>>        If (Found) Begin
36530>>>>>            Set Field_Changed_Value of hoSessionDD Field WebAppSession.Active to "N"
36531>>>>>            Get Request_Validate of hoSessionDD to iErr
36532>>>>>            If (iErr) Begin
36534>>>>>                // this should not happen. If it does its a programming error
36534>>>>>                Error DFERR_PROGRAM C_$WebAppSesionValidateFailed
36535>>>>>>
36535>>>>>                Procedure_Return
36536>>>>>            End
36536>>>>>>
36536>>>>>            Send Request_Save of hoSessionDD
36537>>>>>        End
36537>>>>>>
36537>>>>>    End_Procedure
36538>>>>>
36538>>>>>End_Class
36539>>>>>
36539>>>
36539>>>Object oSessionManager is a cWebSessionManagerStandard
36541>>>End_Object
36542>>>
36542>>>
36542>    Use Login.wo
Including file: Login.wo    (C:\Users\Usuario\Documents\GitHub\Trabajo_SchoolHouse_Repository\WorkspaceSchoolStudent\AppSrc\Login.wo)
36542>>>Use cWebView.pkg
36542>>>Use cWebForm.pkg
36542>>>Use cWebButton.pkg
36542>>>Use cWebPanel.pkg
36542>>>Use cWebLabel.pkg
36542>>>Use cWebSpacer.pkg
36542>>>Use cWebImage.pkg
36542>>>
36542>>>Object oLogin is a cWebView
36544>>>    Set piMinWidth to 250
36545>>>    Set piMaxWidth to 420
36546>>>    Set pbLoginModeEnforced to False
36547>>>    Set piColumnCount to 12
36548>>>    Set psCSSClass to "LoginView"
36549>>>    Set pbServerOnSubmit to True
36550>>>    
36550>>>    Set psStateViewName to "Login"
36551>>>    Set pbStateReplace to True  // Always replace the state so the login never becomes its own history item
36552>>>    
36552>>>    Property String psPrevStateHash ""  // Remember the state hash that the user navigated too so we can redirect after login
36555>>>    
36555>>>    Delegate Set phoLoginView to Self
36557>>>    
36557>>>    Object oTopSpacer is a cWebSpacer
36559>>>        Set pbFillHeight to True
36560>>>        Set piColumnSpan to 12
36561>>>    End_Object
36562>>>    
36562>>>    Object oWarning is a cWebLabel
36564>>>        Set pbVisible to False
36565>>>        Set psCaption to "Invalid User ID or password. \n\rHint: 'Guest' & 'guest'."
36566>>>        Set peAlign to alignCenter
36567>>>        Set piColumnSpan to 12
36568>>>        Set psCSSClass to "LoginWarning"
36569>>>    End_Object
36570>>>    
36570>>>    Object oLogo is a cWebImage
36572>>>        Set piColumnSpan to 10
36573>>>        Set psUrl to "images/DF_Logo_Retina.png"
36574>>>        Set pePosition to wiFit
36575>>>        Set piColumnIndex to 1
36576>>>        Set piHeight to 160
36577>>>        
36577>>>        WebSetResponsive piHeight rmMobile to 100  // Best for small smart phones
36578>>>    End_Object
36579>>>    
36579>>>    Object oLoginName is a cWebForm
36581>>>        Set psLabel to "User ID:"
36582>>>        Set peLabelPosition to lpTop
36583>>>        Set piMaxLength to 20
36584>>>        Set piColumnIndex to 1
36585>>>        Set pbShowLabel to False
36586>>>        Set psPlaceHolder to "loginname"
36587>>>        Set piColumnSpan to 10
36588>>>        Set psAutoComplete to "username"
36589>>>    End_Object
36590>>>    
36590>>>    Object oPassword is a cWebForm
36592>>>        Set psLabel to "Password:"
36593>>>        Set pbPassword to True
36594>>>        Set peLabelAlign to alignLeft
36595>>>        Set piMaxLength to 20
36596>>>        Set peLabelPosition to lpTop
36597>>>        Set pbShowLabel to False
36598>>>        Set psPlaceHolder to "password"
36599>>>        Set piColumnSpan to 10
36600>>>        Set piColumnIndex to 1
36601>>>        Set psAutoComplete to "current-password"
36602>>>    End_Object
36603>>>    
36603>>>    Object oWebSpacer1 is a cWebSpacer
36605>>>        Set piColumnSpan to 12
36606>>>        Set piHeight to 10
36607>>>    End_Object
36608>>>    
36608>>>    Object oLoginButton is a cWebButton
36610>>>        Set pbShowLabel to False
36611>>>        Set psCaption to "sign in"
36612>>>        Set pbServerOnClick to True
36613>>>        Set piColumnSpan to 10
36614>>>        Set piColumnIndex to 1
36615>>>        
36615>>>        Procedure OnClick
36618>>>            Send DoLogin
36619>>>        End_Procedure
36620>>>    End_Object
36621>>>    
36621>>>    Object oBottomSpacer is a cWebSpacer
36623>>>        Set pbFillHeight to True
36624>>>        Set piColumnSpan to 12
36625>>>    End_Object
36626>>>    
36626>>>    Procedure DoLogin
36629>>>        String sLoginName sPassword sPrevStateHash
36629>>>        Boolean bResult
36629>>>        
36629>>>        WebGet psValue of oLoginName to sLoginName
36630>>>        WebGet psValue of oPassword to sPassword
36631>>>        
36631>>>        Get UserLogin of ghoWebSessionManager sLoginName sPassword to bResult
36632>>>        
36632>>>        If (bResult) Begin
36634>>>            Send Hide of oLogin
36635>>>            Send ShowHeader of ghoWebApp
36636>>>            WebSet psCSSClass of ghoWebApp to ""
36637>>>            
36637>>>            WebGet psPrevStateHash to sPrevStateHash
36638>>>            Send NavigateToStateHash of ghoWebApp sPrevStateHash True
36639>>>            
36639>>>            // clear the login values. we don't want to return the login id & password as synchronized properties....
36639>>>            WebSet psValue of oLoginName to ""
36640>>>            WebSet psValue of oPassword  to ""
36641>>>            WebSet pbVisible of oWarning to False
36642>>>        End
36642>>>>
36642>>>        Else Begin
36643>>>            WebSet pbVisible of oWarning to True
36644>>>        End
36644>>>>
36644>>>    End_Procedure
36645>>>    
36645>>>    Procedure OnSubmit
36648>>>        Send DoLogin
36649>>>    End_Procedure
36650>>>    
36650>>>    Procedure OnLoad
36653>>>        String sPrevStateHash sView
36653>>>        
36653>>>        Forward Send OnLoad
36655>>>        
36655>>>        //  Store the current state so we can go back to that later (only if it points to a different view)
36655>>>        Get StateHash of ghoWebApp to sPrevStateHash
36656>>>        Send ParseViewStateHash sPrevStateHash (&sView)
36657>>>        If (Lowercase(sView) <> Lowercase(psStateViewName(Self))) Begin
36659>>>            WebSet psPrevStateHash to sPrevStateHash
36660>>>        End
36660>>>>
36660>>>        
36660>>>    End_Procedure
36661>>>    
36661>>>    Procedure OnBeforeShow
36664>>>        //  Hide header & apply nice background style
36664>>>        Send HideHeader to ghoWebApp
36665>>>        WebSet psCSSClass of ghoWebApp to "LoginBackground"
36666>>>    End_Procedure
36667>>>    
36667>>>End_Object
36668>>>
36668>>>
36668>>>
36668>>>
36668>    Use WebResourceManager.wo
Including file: WebResourceManager.wo    (C:\Users\Usuario\Documents\GitHub\Trabajo_SchoolHouse_Repository\WorkspaceSchoolStudent\AppSrc\WebResourceManager.wo)
36668>>>Use cWebResourceManager.pkg
36668>>>
36668>>>Object oWebResourceManager is a cWebResourceManager
36670>>>End_Object
36671>    
36671>    Use Dashboard.wo
Including file: Dashboard.wo    (C:\Users\Usuario\Documents\GitHub\Trabajo_SchoolHouse_Repository\WorkspaceSchoolStudent\AppSrc\Dashboard.wo)
36671>>>Use cWebView.pkg
36671>>>Use cWebPanel.pkg
36671>>>Use cWebForm.pkg
36671>>>Use cWebButton.pkg
36671>>>Use cWebGroup.pkg
36671>>>Use cWebSpacer.pkg
36671>>>Use cWebHtmlBox.pkg
36671>>>Use cWebMenuGroup.pkg
36671>>>Use cWebMenuItem.pkg
36671>>>Use cWebLabel.pkg
36671>>>Use cWebList.pkg
36671>>>Use cWebColumn.pkg
36671>>>
36671>>>Object oDashboard is a cWebView
36673>>>
36673>>>    // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -  
36673>>>    // Add a DDO Structure 
36673>>>    //
36673>>>    // There is no need to synchronize a DD structure on the client so we do
36673>>>    // not set the Server property or send ADDOStructure. We will simply use
36673>>>    // DDO's to mine data and generate HTML for our cWebHTMLBox objects.
36673>>>    // It is the HTML in these objects that is sent to the client each time 
36673>>>    // this page is shown.
36673>>>    //
36673>>>    // Also, it is important for the drill-down Navigation interface that we
36673>>>    // do not set the Server property to some DDO because this will affect 
36673>>>    // constraints in the next view that we navigate to.
36673>>>    // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
36673>>>
36673>>>    Set piMaxWidth to 1024
36674>>>    
36674>>>    // Set psbackgroundcolor to "Gray"
36674>>>    Set psCaption to "Dashboard"
36675>>>    Set peViewType to vtUndefined
36676>>>    Set pbShowCaption to False
36677>>>    Set psCSSClass to "Dashboard"
36678>>>    
36678>>>    Object oWebMainPanel is a cWebPanel
36680>>>        Set piColumnCount to 24
36681>>>        
36681>>>        // - - - - - - - - - - - - - - -
36681>>>        // Main Panel's Responsive Rules
36681>>>        // - - - - - - - - - - - - - - -
36681>>>        WebSetResponsive piColumnCount rmMobile to 1
36682>>>        WebSetResponsive piColumnCount rmTabletPortrait to 16
36683>>>    
36683>>>        Object oTiles_grp is a cWebGroup
36685>>>            Set piColumnSpan to 30
36686>>>            Set pbShowBorder to False
36687>>>            Set pbShowCaption to False
36688>>>            Set piColumnCount to 20
36689>>>            
36689>>>            Set psCSSClass to "TilesGroup"
36690>>>    
36690>>>            Object oTile1 is a cWebHtmlBox
36692>>>                Set pbServerOnClick to True
36693>>>                Set piColumnSpan to 10
36694>>>                Set psCSSClass to "Tile Dark"
36695>>>                Set psHtml to '<div class="WebCon_Sizer" data-ServerOnClick="openview"><div Class="Tile_Title">Students</div><div class="Tile_Subtitle">Shows the registered students</div></div>'
36696>>>    
36696>>>                WebRegisterPath ntNavigateForwardCustom oSelectStudent
36702>>>                
36702>>>                Procedure OnClick String sId String sParam
36705>>>                    Send NavigatePath
36706>>>                End_Procedure
36707>>>                
36707>>>            End_Object
36708>>>    
36708>>>            Object oTile2 is a cWebHtmlBox
36710>>>                Set pbServerOnClick to True
36711>>>                Set piColumnSpan to 10
36712>>>                Set piColumnIndex to 10
36713>>>                Set psCSSClass to "Tile Dark"
36714>>>                Set psHtml to '<div class="WebCon_Sizer" data-ServerOnClick="openview"><div Class="Tile_Title">New Student</div><div class="Tile_Subtitle">Form to insert a new student</div></div>'
36715>>>            
36715>>>                WebRegisterPath ntNavigateForwardCustom oZoomStudent
36721>>>                
36721>>>                Procedure OnClick String sId String sParam
36724>>>                    Send NavigatePath
36725>>>                End_Procedure
36726>>>                
36726>>>            End_Object
36727>>>            
36727>>>            Object oTile3 is a cWebHtmlBox
36729>>>                Set pbServerOnClick to True
36730>>>                Set piColumnSpan to 10
36731>>>                Set psCSSClass to "Tile Dark"
36732>>>                Set psHtml to '<div class="WebCon_Sizer" data-ServerOnClick="openview"><div Class="Tile_Title">School Houses</div><div class="Tile_Subtitle">Shows the registered school houses</div></div>'
36733>>>    
36733>>>                WebRegisterPath ntNavigateForwardCustom oSelectSchoolHouse
36739>>>                
36739>>>                Procedure OnClick String sId String sParam
36742>>>                    Send NavigatePath
36743>>>                End_Procedure
36744>>>                
36744>>>            End_Object
36745>>>    
36745>>>            Object oTile4 is a cWebHtmlBox
36747>>>                Set pbServerOnClick to True
36748>>>                Set piColumnSpan to 10
36749>>>                Set piColumnIndex to 10
36750>>>                Set psCSSClass to "Tile Dark"
36751>>>                Set psHtml to '<div class="WebCon_Sizer" data-ServerOnClick="openview"><div Class="Tile_Title">New School House</div><div class="Tile_Subtitle">Form to insert a new school house</div></div>'
36752>>>            
36752>>>                WebRegisterPath ntNavigateForwardCustom oZoomSchoolHouse
36758>>>                
36758>>>                Procedure OnClick String sId String sParam
36761>>>                    Send NavigatePath
36762>>>                End_Procedure
36763>>>                
36763>>>            End_Object
36764>>>        End_Object
36765>>>    
36765>>>    End_Object
36766>>>    
36766>>>    Procedure OnBeforeShow
36769>>>        // Each time this view is shown we will update the appropriate information.
36769>>>    End_Procedure
36770>>>
36770>>>End_Object
36771>    Use ZoomSchoolHouse.wo
Including file: ZoomSchoolHouse.wo    (C:\Users\Usuario\Documents\GitHub\Trabajo_SchoolHouse_Repository\WorkspaceSchoolStudent\AppSrc\ZoomSchoolHouse.wo)
36771>>>// C:\Users\Usuario\Desktop\Trabajo Jaime\Trabajos\WorkspaceSchoolStudent\AppSrc\ZoomSchoolHouse.wo
36771>>>// ZoomSchoolHouse
36771>>>//
36771>>>
36771>>>Use cWebView.pkg
36771>>>Use cWebPanel.pkg
36771>>>Use cWebMenuGroup.pkg
36771>>>Use cWebMenuItem.pkg
36771>>>Use cWebForm.pkg
36771>>>Use cWebEdit.pkg
36771>>>
36771>>>Use cschoolhouseDataDictionary.dd
Including file: cschoolhouseDataDictionary.dd    (C:\Users\Usuario\Documents\GitHub\Trabajo_SchoolHouse_Repository\WorkspaceSchoolStudent\DDSrc\cschoolhouseDataDictionary.dd)
36771>>>>>Use DataDict.pkg
36771>>>>>Use ValidadorEmail.pkg
Including file: ValidadorEmail.pkg    (C:\Users\Usuario\Documents\GitHub\Trabajo_SchoolHouse_Repository\WorkspaceSchoolStudent\AppSrc\ValidadorEmail.pkg)
36771>>>>>>>Define cSimbolos for "!#$%&'*/\=?^+, `{|}~[]"
36771>>>>>>>
36771>>>>>>>Use cJsonHttpTransfer.pkg
Including file: cJsonHttpTransfer.pkg    (C:\Program Files\DataFlex 24.0\Pkg\cJsonHttpTransfer.pkg)
36771>>>>>>>>>// DF JSON internet transfer class definitions.
36771>>>>>>>>>Use cHttpTransfer.pkg
Including file: cHttpTransfer.pkg    (C:\Program Files\DataFlex 24.0\Pkg\cHttpTransfer.pkg)
36771>>>>>>>>>>>Use VDFBase.pkg
36771>>>>>>>>>>>Use GlobalFunctionsProcedures.pkg
36771>>>>>>>>>>>
36771>>>>>>>>>>>External_Function WinAPI_HttpQueryInfo "HttpQueryInfoW" WinInet.dll ;    Handle hRequest ;    DWord dwInfoLevel ;    Pointer lpBuffer ;    Pointer lpdwBufferLength ;    Pointer lpdwIndex ;    Returns Integer
36772>>>>>>>>>>>
36772>>>>>>>>>>>/*BOOL InternetSetOptionW(  [in] HINTERNET hInternet,  [in] DWORD     dwOption,  [in] LPVOID    lpBuffer,  [in] DWORD     dwBufferLength);*/
36772>>>>>>>>>>>External_Function WinAPI_InternetSetOption "InternetSetOptionW" WinInet.dll ;    Handle hInternet ;    DWord dwOption ;    Pointer lpBuffer ;    DWord dwBufferLength ;    Returns Integer
36773>>>>>>>>>>>
36773>>>>>>>>>>>/*BOOL InternetQueryOptionW(  [in]      HINTERNET hInternet,  [in]      DWORD     dwOption,  [out]     LPVOID    lpBuffer,  [in, out] LPDWORD   lpdwBufferLength);*/
36773>>>>>>>>>>>External_Function WinAPI_InternetQueryOption "InternetQueryOptionW" WinInet.dll ;    Handle hInternet ;    DWord dwOption ;    Pointer lpBuffer ;    Pointer lpdwBufferLength ;    Returns Integer
36774>>>>>>>>>>>
36774>>>>>>>>>>>
36774>>>>>>>>>>>//  Available options for dwInfoLevel of WinAPI_HttpQueryInfo
36774>>>>>>>>>>>Define HTTP_QUERY_MIME_VERSION                for 0
36774>>>>>>>>>>>Define HTTP_QUERY_CONTENT_TYPE                for 1
36774>>>>>>>>>>>Define HTTP_QUERY_CONTENT_TRANSFER_ENCODING   for 2
36774>>>>>>>>>>>Define HTTP_QUERY_CONTENT_ID                  for 3
36774>>>>>>>>>>>Define HTTP_QUERY_CONTENT_DESCRIPTION         for 4
36774>>>>>>>>>>>Define HTTP_QUERY_CONTENT_LENGTH              for 5
36774>>>>>>>>>>>Define HTTP_QUERY_CONTENT_LANGUAGE            for 6
36774>>>>>>>>>>>Define HTTP_QUERY_ALLOW                       for 7
36774>>>>>>>>>>>Define HTTP_QUERY_PUBLIC                      for 8
36774>>>>>>>>>>>Define HTTP_QUERY_DATE                        for 9
36774>>>>>>>>>>>Define HTTP_QUERY_EXPIRES                     for 10
36774>>>>>>>>>>>Define HTTP_QUERY_LAST_MODIFIED               for 11
36774>>>>>>>>>>>Define HTTP_QUERY_MESSAGE_ID                  for 12
36774>>>>>>>>>>>Define HTTP_QUERY_URI                         for 13
36774>>>>>>>>>>>Define HTTP_QUERY_DERIVED_FROM                for 14
36774>>>>>>>>>>>Define HTTP_QUERY_COST                        for 15
36774>>>>>>>>>>>Define HTTP_QUERY_LINK                        for 16
36774>>>>>>>>>>>Define HTTP_QUERY_PRAGMA                      for 17
36774>>>>>>>>>>>Define HTTP_QUERY_VERSION                     for 18  // special: part of status line
36774>>>>>>>>>>>Define HTTP_QUERY_STATUS_CODE                 for 19  // special: part of status line
36774>>>>>>>>>>>Define HTTP_QUERY_STATUS_TEXT                 for 20  // special: part of status line
36774>>>>>>>>>>>Define HTTP_QUERY_RAW_HEADERS                 for 21  // special: all headers as ASCIIZ
36774>>>>>>>>>>>Define HTTP_QUERY_RAW_HEADERS_CRLF            for 22  // special: all headers
36774>>>>>>>>>>>Define HTTP_QUERY_CONNECTION                  for 23
36774>>>>>>>>>>>Define HTTP_QUERY_ACCEPT                      for 24
36774>>>>>>>>>>>Define HTTP_QUERY_ACCEPT_CHARSET              for 25
36774>>>>>>>>>>>Define HTTP_QUERY_ACCEPT_ENCODING             for 26
36774>>>>>>>>>>>Define HTTP_QUERY_ACCEPT_LANGUAGE             for 27
36774>>>>>>>>>>>Define HTTP_QUERY_AUTHORIZATION               for 28
36774>>>>>>>>>>>Define HTTP_QUERY_CONTENT_ENCODING            for 29
36774>>>>>>>>>>>Define HTTP_QUERY_FORWARDED                   for 30
36774>>>>>>>>>>>Define HTTP_QUERY_FROM                        for 31
36774>>>>>>>>>>>Define HTTP_QUERY_IF_MODIFIED_SINCE           for 32
36774>>>>>>>>>>>Define HTTP_QUERY_LOCATION                    for 33
36774>>>>>>>>>>>Define HTTP_QUERY_ORIG_URI                    for 34
36774>>>>>>>>>>>Define HTTP_QUERY_REFERER                     for 35
36774>>>>>>>>>>>Define HTTP_QUERY_RETRY_AFTER                 for 36
36774>>>>>>>>>>>Define HTTP_QUERY_SERVER                      for 37
36774>>>>>>>>>>>Define HTTP_QUERY_TITLE                       for 38
36774>>>>>>>>>>>Define HTTP_QUERY_USER_AGENT                  for 39
36774>>>>>>>>>>>Define HTTP_QUERY_WWW_AUTHENTICATE            for 40
36774>>>>>>>>>>>Define HTTP_QUERY_PROXY_AUTHENTICATE          for 41
36774>>>>>>>>>>>Define HTTP_QUERY_ACCEPT_RANGES               for 42
36774>>>>>>>>>>>Define HTTP_QUERY_SET_COOKIE                  for 43
36774>>>>>>>>>>>Define HTTP_QUERY_COOKIE                      for 44
36774>>>>>>>>>>>Define HTTP_QUERY_REQUEST_METHOD              for 45  // special: GET/POST etc.
36774>>>>>>>>>>>Define HTTP_QUERY_REFRESH                     for 46
36774>>>>>>>>>>>Define HTTP_QUERY_CONTENT_DISPOSITION         for 47
36774>>>>>>>>>>>
36774>>>>>>>>>>>
36774>>>>>>>>>>>Class cHttpTransfer is a cBaseHttpTransfer
36775>>>>>>>>>>>    
36775>>>>>>>>>>>    Function HttpPostRequest String sFilePath String sData Integer bDataIsFile Returns Integer
36777>>>>>>>>>>>        Integer bStat
36777>>>>>>>>>>>        Get HttpPostAddrRequest sFilePath (AddressOf(sData)) (SizeOfString(sData)) bDataIsfile to bStat
36778>>>>>>>>>>>        Function_Return bStat
36779>>>>>>>>>>>    End_Function
36780>>>>>>>>>>>    
36780>>>>>>>>>>>    // This event is triggered from the runtime. It now uses UChar arrays as the data might 
36780>>>>>>>>>>>    // not be a valid string (it can be any binary data). It still calls the original event for 
36780>>>>>>>>>>>    // backwards compatibility.
36780>>>>>>>>>>>    Procedure OnDataReceivedUC String sContentType UChar[] ucData
36782>>>>>>>>>>>        Send OnDataReceived sContentType (UCharArrayToString(ucData))
36783>>>>>>>>>>>    End_Procedure
36784>>>>>>>>>>>    
36784>>>>>>>>>>>    // Only use this event if you know for sure the data is a string and make sure piBufferSize is
36784>>>>>>>>>>>    // smaller than the argument size.
36784>>>>>>>>>>>    Procedure OnDataReceived String sContentType String sData
36786>>>>>>>>>>>        
36786>>>>>>>>>>>    End_Procedure
36787>>>>>>>>>>>    
36787>>>>>>>>>>>    // Called just before the request is sent. Use this message to set options to the RequestHandle if nessecary.
36787>>>>>>>>>>>    Procedure OnPreSendRequest 
36789>>>>>>>>>>>        
36789>>>>>>>>>>>    End_Procedure
36790>>>>>>>>>>>    
36790>>>>>>>>>>>    Function HttpPutRequest String sFilePath String sData Integer bDataIsFile Returns Integer
36792>>>>>>>>>>>        Integer bStat
36792>>>>>>>>>>>        Get HttpPutAddrRequest sFilePath (AddressOf(sData)) (SizeOfString(sData)) bDataIsfile to bStat
36793>>>>>>>>>>>        Function_Return bStat
36794>>>>>>>>>>>    End_Function
36795>>>>>>>>>>>    
36795>>>>>>>>>>>    // Retrieve header information associated with the previous request.
36795>>>>>>>>>>>    Function QueryInfo DWord dwInfoLevel Returns String
36797>>>>>>>>>>>        Handle hRequestHandle
36797>>>>>>>>>>>        WString wResult
36797>>>>>>>>>>>        Integer iBufferSize iRes iVoid
36797>>>>>>>>>>>
36797>>>>>>>>>>>        Get RequestHandle to hRequestHandle
36798>>>>>>>>>>>        
36798>>>>>>>>>>>        If (hRequestHandle) Begin
36800>>>>>>>>>>>            Move 200 to iBufferSize
36801>>>>>>>>>>>            Move (Repeat(" ", iBufferSize)) to wResult
36802>>>>>>>>>>>            Move (WinAPI_HttpQueryInfo(hRequestHandle, dwInfoLevel, AddressOf(wResult), AddressOf(iBufferSize), 0)) to iRes
36803>>>>>>>>>>>            
36803>>>>>>>>>>>            If (not(iRes) and GetLastError() = 122) Begin //  Insufficient buffersize, retry with received iBufferSize value
36805>>>>>>>>>>>                Increment iBufferSize      
36806>>>>>>>>>>>                
36806>>>>>>>>>>>                Move (Repeat(" ", iBufferSize)) to wResult
36807>>>>>>>>>>>                Move (WinAPI_HttpQueryInfo(hRequestHandle, dwInfoLevel, AddressOf(wResult), AddressOf(iBufferSize), 0)) to iRes  
36808>>>>>>>>>>>            End
36808>>>>>>>>>>>>
36808>>>>>>>>>>>            
36808>>>>>>>>>>>            If (not(iRes)) Begin
36810>>>>>>>>>>>                Move (ShowLastError()) to iVoid
36811>>>>>>>>>>>            End
36811>>>>>>>>>>>>
36811>>>>>>>>>>>        End
36811>>>>>>>>>>>>
36811>>>>>>>>>>>        
36811>>>>>>>>>>>        Function_Return (CString(wResult))
36812>>>>>>>>>>>    End_Function
36813>>>>>>>>>>>    
36813>>>>>>>>>>>    // Returns the statustext returned by the previous request.
36813>>>>>>>>>>>    Function ResponseStatusText Returns String
36815>>>>>>>>>>>        String sStatus
36815>>>>>>>>>>>        
36815>>>>>>>>>>>        Get QueryInfo HTTP_QUERY_STATUS_TEXT to sStatus
36816>>>>>>>>>>>        
36816>>>>>>>>>>>        Function_Return sStatus
36817>>>>>>>>>>>    End_Function
36818>>>>>>>>>>>    
36818>>>>>>>>>>>End_Class
36819>>>>>>>>>Use cJsonObject.pkg
36819>>>>>>>>>Use GlobalFunctionsProcedures.pkg
36819>>>>>>>>>
36819>>>>>>>>>// these define the three characters that define BOM for utf8.
36819>>>>>>>>>// These serve no purpos and are rarely used. If used they must be removed
36819>>>>>>>>>Define C_BOM1 for |CI$EF
36819>>>>>>>>>Define C_BOM2 for |CI$BB
36819>>>>>>>>>Define C_BOM3 for |CI$BF
36819>>>>>>>>>
36819>>>>>>>>>
36819>>>>>>>>>
36819>>>>>>>>>// define JSON transfer status codes used by peJsonTransferStatus
36819>>>>>>>>>Enum_List
36819>>>>>>>>>    Define jtsOk                 // ok
36819>>>>>>>>>    Define jtsHttpRequestFailed  // the post/get http request returned an error
36819>>>>>>>>>    Define jtsInvalidContentType // response content type not JSON
36819>>>>>>>>>    Define jtsNotJson            // return value not JSON (could not load in object)
36819>>>>>>>>>    Define jtsError              // unspecified return error
36819>>>>>>>>>End_Enum_List
36819>>>>>>>>>
36819>>>>>>>>>
36819>>>>>>>>>Class cJsonHttpTransfer is a cHttpTransfer
36820>>>>>>>>>    
36820>>>>>>>>>    Procedure Construct_Object
36822>>>>>>>>>        Forward Send Construct_object
36824>>>>>>>>>        
36824>>>>>>>>>        Property String  psContentTypeSent "application/json; charset=utf-8"     // default content type for posted data
36825>>>>>>>>>        
36825>>>>>>>>>        Property Boolean pbClearHeaders      True         // should headers always be cleared after a post
36826>>>>>>>>>        
36826>>>>>>>>>        Property UChar[] pucDataReceived                 // maintained by object
36827>>>>>>>>>        
36827>>>>>>>>>        Property String  psContentTypeReceived ''         // content type received
36828>>>>>>>>>        
36828>>>>>>>>>        Property String  psJsonParseError ''              // Set if response JSON can't be parsed
36829>>>>>>>>>        
36829>>>>>>>>>        Property String  psContentTypeExpected 'application/json' // content type received - expected value should be contained in here.
36830>>>>>>>>>        
36830>>>>>>>>>        Property Integer peJsonTransferStatus jtsOk
36831>>>>>>>>>        
36831>>>>>>>>>        // if true, the http post does not happend and whatever was posted is just returned as a copy.
36831>>>>>>>>>        // Good for internal Testing
36831>>>>>>>>>        Property Boolean pbPostLoopTest False
36832>>>>>>>>>        
36832>>>>>>>>>        Set piBufferSize to -1  //  No chunking needed
36833>>>>>>>>>    End_Procedure
36834>>>>>>>>>    
36834>>>>>>>>>    // private helper function. Convert data passed by pointer to an JSON document.
36834>>>>>>>>>    // return 0, if error
36834>>>>>>>>>    //
36834>>>>>>>>>    Function UCharDatatoJson UChar[] ucJson Returns Handle
36836>>>>>>>>>        Integer iVoid bOk
36836>>>>>>>>>        Handle hoJson
36836>>>>>>>>>        String sError
36836>>>>>>>>>        Get Create of Desktop (RefClass(cJsonObject)) to hoJson
36837>>>>>>>>>        Get ParseUTF8 of hoJson ucJson to bOk
36838>>>>>>>>>        If not bOk Begin
36840>>>>>>>>>            // store the JSON parse error info
36840>>>>>>>>>            Get psParseError of hoJson to sError
36841>>>>>>>>>            Set psJsonParseError to sError
36842>>>>>>>>>            Send Destroy of hoJson
36843>>>>>>>>>            Move 0 to hoJson
36844>>>>>>>>>        End
36844>>>>>>>>>>
36844>>>>>>>>>        Function_Return hoJson
36845>>>>>>>>>    End_Function
36846>>>>>>>>>    
36846>>>>>>>>>    // Clear pucDataReceived
36846>>>>>>>>>    Procedure ClearDataReceived
36848>>>>>>>>>        UChar[] ucEmpty
36849>>>>>>>>>        
36849>>>>>>>>>        Set pucDataReceived to ucEmpty
36850>>>>>>>>>        Set psJsonParseError to ''
36851>>>>>>>>>    End_Procedure
36852>>>>>>>>>    
36852>>>>>>>>>    // augment to release any memor
36852>>>>>>>>>    Procedure Destroy_Object
36854>>>>>>>>>        Send ClearDataReceived
36855>>>>>>>>>        Forward Send Destroy_object
36857>>>>>>>>>    End_Procedure
36858>>>>>>>>>    
36858>>>>>>>>>    // called during http transfer. Take passed data and append to pucDataReceived.
36858>>>>>>>>>    // If new transfer save contenttype.
36858>>>>>>>>>    Procedure OnDataReceivedUC String sContentType UChar[] ucData
36860>>>>>>>>>        UChar[] ucBuffer
36861>>>>>>>>>        Integer iDataLen
36861>>>>>>>>>        
36861>>>>>>>>>        Move (SizeOfArray(ucData)) to iDataLen
36862>>>>>>>>>        
36862>>>>>>>>>        If (iDataLen > 0) Begin
36864>>>>>>>>>            Get pucDataReceived to ucBuffer
36865>>>>>>>>>            If (SizeOfArray(ucBuffer) > 0) Begin
36867>>>>>>>>>                Set pucDataReceived to (AppendArray(ucBuffer, ucData))
36868>>>>>>>>>            End
36868>>>>>>>>>>
36868>>>>>>>>>            Else Begin
36869>>>>>>>>>                Set psContentTypeReceived to sContentType
36870>>>>>>>>>                
36870>>>>>>>>>                If (iDataLen > 3 and ucData[0]=C_BOM1 and ucData[1]=C_BOM2 and ucData[2]=C_BOM3) Begin
36872>>>>>>>>>                    Set pucDataReceived to (CopyArray(ucData, 3, iDataLen - 1))
36873>>>>>>>>>                End
36873>>>>>>>>>>
36873>>>>>>>>>                Else Begin
36874>>>>>>>>>                    Set pucDataReceived to ucData
36875>>>>>>>>>                End
36875>>>>>>>>>>
36875>>>>>>>>>            End
36875>>>>>>>>>>
36875>>>>>>>>>        End
36875>>>>>>>>>>
36875>>>>>>>>>    End_Procedure
36876>>>>>>>>>    
36876>>>>>>>>>    Function LoopDataBack UChar[] ucData Returns Boolean
36878>>>>>>>>>        Pointer pInData
36878>>>>>>>>>        Boolean bOk
36878>>>>>>>>>        
36878>>>>>>>>>        Set pucDataReceived to ucData
36879>>>>>>>>>        Set psContentTypeReceived to (psContentTypeExpected(Self))
36880>>>>>>>>>        
36880>>>>>>>>>        Function_Return True
36881>>>>>>>>>    End_Function
36882>>>>>>>>>    
36882>>>>>>>>>    
36882>>>>>>>>>    Function HttpVerbJsonAddrExec String sHost String sFilePath Pointer pJson Integer iLen String sVerb  Returns Boolean
36884>>>>>>>>>        Boolean bOk
36884>>>>>>>>>        Integer iError
36884>>>>>>>>>        String sContentType
36884>>>>>>>>>        
36884>>>>>>>>>        Send ClearDataReceived  // this should be zero, just in case it is not
36885>>>>>>>>>        Set psRemoteHost to sHost
36886>>>>>>>>>        
36886>>>>>>>>>        Get psContentTypeSent to sContentType
36887>>>>>>>>>        If (iLen > 0 and sContentType <> "") Begin
36889>>>>>>>>>            Get AddHeader "Content-Type" sContentType to bok
36890>>>>>>>>>        End
36890>>>>>>>>>>
36890>>>>>>>>>        Get HttpVerbAddrRequest sFilePath pJson iLen False sVerb to bOK
36891>>>>>>>>>        
36891>>>>>>>>>        // You need to clear headers between posts. If you need to set custom headers you should
36891>>>>>>>>>        // set pbClearHeaders to false and then manually send ClearHeaders and AddHeaders in your code
36891>>>>>>>>>        If (pbClearHeaders(Self)) ;            Send ClearHeaders
36894>>>>>>>>>        
36894>>>>>>>>>        
36894>>>>>>>>>        Function_Return bOk
36895>>>>>>>>>    End_Function
36896>>>>>>>>>    
36896>>>>>>>>>    // We assume but do not verify that the data in ucJson is actually UTF8 JSON
36896>>>>>>>>>    Function HttpVerbJsonUChar String sHost String sFilePath UChar[] ucJson String sVerb Returns UChar[]
36898>>>>>>>>>        Integer iLen
36898>>>>>>>>>        Boolean bOk
36898>>>>>>>>>        UChar[] ucJsonReceived
36899>>>>>>>>>        String sContentTypeReceived sContentTypeExpected
36899>>>>>>>>>        
36899>>>>>>>>>        Move (SizeOfArray(ucJson)) to iLen
36900>>>>>>>>>        
36900>>>>>>>>>        If (pbPostLoopTest(Self)) Begin
36902>>>>>>>>>            Get LoopDataBack ucJson to bOk
36903>>>>>>>>>        End
36903>>>>>>>>>>
36903>>>>>>>>>        Else Begin
36904>>>>>>>>>            Get HttpVerbJsonAddrExec sHost sFilePath (AddressOf(ucJson)) iLen sVerb to bOk
36905>>>>>>>>>        End
36905>>>>>>>>>>
36905>>>>>>>>>                
36905>>>>>>>>>        If bOk Begin
36907>>>>>>>>>            Set peJsonTransferStatus to jtsOk
36908>>>>>>>>>            Get pucDataReceived to ucJsonReceived
36909>>>>>>>>>            
36909>>>>>>>>>            If (SizeOfArray(ucJsonReceived) > 0) Begin
36911>>>>>>>>>                // we have data, check that the content type is ok. This is as far
36911>>>>>>>>>                // as we can go here.
36911>>>>>>>>>                Get psContentTypeReceived to sContentTypeReceived
36912>>>>>>>>>                Get psContentTypeExpected to sContentTypeExpected
36913>>>>>>>>>                // If contentType expected is empty, we allow anything
36913>>>>>>>>>                If (sContentTypeExpected<>"" and pos(lowercase(sContentTypeExpected),lowercase(sContentTypeReceived))=0) Begin
36915>>>>>>>>>                    Set peJsonTransferStatus to jtsInvalidContentType
36916>>>>>>>>>                End
36916>>>>>>>>>>
36916>>>>>>>>>            End
36916>>>>>>>>>>
36916>>>>>>>>>        End
36916>>>>>>>>>>
36916>>>>>>>>>        Else Begin
36917>>>>>>>>>            Set peJsonTransferStatus to jtsHttpRequestFailed
36918>>>>>>>>>        End
36918>>>>>>>>>>
36918>>>>>>>>>                
36918>>>>>>>>>        Function_Return ucJsonReceived
36919>>>>>>>>>    End_Function
36920>>>>>>>>>    
36920>>>>>>>>>    // Generic HTTP Request - it is passed the Verb. Used by all other http requests
36920>>>>>>>>>    Function HttpVerbJson  String sHost String sFilePath Handle  hoJsonRequest String sVerb Boolean ByRef bOk Returns Handle
36922>>>>>>>>>        UChar[] ucJsonRequest ucJsonResponse
36924>>>>>>>>>        Handle hoJsonResponse
36924>>>>>>>>>        Integer eStat
36924>>>>>>>>>        
36924>>>>>>>>>        If (hoJsonRequest<>0) Begin
36926>>>>>>>>>            Get StringifyUTF8 of hoJsonRequest to ucJsonRequest
36927>>>>>>>>>        End
36927>>>>>>>>>>
36927>>>>>>>>>        
36927>>>>>>>>>        Get HttpVerbJsonUChar sHost sFilePath ucJsonRequest sVerb to ucJsonResponse
36928>>>>>>>>>        
36928>>>>>>>>>        If (SizeOfArray(ucJsonResponse)) Begin
36930>>>>>>>>>            Get UCharDatatoJson ucJsonResponse to hoJsonResponse
36931>>>>>>>>>            If (hoJsonResponse=0) Begin
36933>>>>>>>>>                // this indicates that data was returned but it could not be loaded as Json
36933>>>>>>>>>                Set peJsonTransferStatus to jtsNotJson
36934>>>>>>>>>                // note bad data is still is ppDataReceived (might be useful for debugging)
36934>>>>>>>>>            End
36934>>>>>>>>>>
36934>>>>>>>>>        End
36934>>>>>>>>>>
36934>>>>>>>>>        
36934>>>>>>>>>        // return Ok status by reference
36934>>>>>>>>>        Get peJsonTransferStatus to eStat
36935>>>>>>>>>        Move (eStat=jtsOk) to bOk
36936>>>>>>>>>        
36936>>>>>>>>>        Function_Return hoJsonResponse
36937>>>>>>>>>    End_Function
36938>>>>>>>>>    
36938>>>>>>>>>    Function HttpPostJson String sHost String sFilePath Handle hoJsonRequest Boolean ByRef bOk Returns Handle
36940>>>>>>>>>        Handle hoJson
36940>>>>>>>>>        Get HttpVerbJson sHost sFilePath hoJsonRequest "POST" (&bOk) to hoJson
36941>>>>>>>>>        Function_Return hoJson
36942>>>>>>>>>    End_Function
36943>>>>>>>>>    
36943>>>>>>>>>    Function HttpGetJson String sHost String sFilePath Boolean ByRef bOk Returns Handle
36945>>>>>>>>>        Pointer pJson
36945>>>>>>>>>        Integer iVoid iLen
36945>>>>>>>>>        Handle hoJson
36945>>>>>>>>>        Get HttpVerbJson sHost sFilePath 0 "GET" (&bOk) to hoJson
36946>>>>>>>>>        Function_Return hoJson
36947>>>>>>>>>    End_Function
36948>>>>>>>>>    
36948>>>>>>>>>    Function HttpPutJson String sHost String sFilePath Handle hoJsonRequest Boolean ByRef bOk Returns Handle
36950>>>>>>>>>        Handle hoJson
36950>>>>>>>>>        Get HttpVerbJson sHost sFilePath hoJsonRequest "PUT" (&bOk) to hoJson
36951>>>>>>>>>        Function_Return hoJson
36952>>>>>>>>>    End_Function
36953>>>>>>>>>    
36953>>>>>>>>>    Function HttpDeleteJson String sHost String sFilePath Handle hoJsonRequest Boolean ByRef bOk Returns Handle
36955>>>>>>>>>        Handle hoJson
36955>>>>>>>>>        Get HttpVerbJson sHost sFilePath hoJsonRequest "DELETE" (&bOk) to hoJson
36956>>>>>>>>>        Function_Return hoJson
36957>>>>>>>>>    End_Function
36958>>>>>>>>>    
36958>>>>>>>>>    Function HttpPatchJson  String sHost String sFilePath Handle hoJsonRequest Boolean ByRef bOk Returns Handle
36960>>>>>>>>>        Handle hoJson
36960>>>>>>>>>        Get HttpVerbJson sHost sFilePath hoJsonRequest "PATCH" (&bOk) to hoJson
36961>>>>>>>>>        Function_Return hoJson
36962>>>>>>>>>    End_Function
36963>>>>>>>>>    
36963>>>>>>>>>    // After an Json xfer request this message can be sent to display an error message if one occurred.
36963>>>>>>>>>    // Normally you would first check peJsonTransferStatus to see if it is not jtsOk. If not, send
36963>>>>>>>>>    // LastError to see the error
36963>>>>>>>>>    
36963>>>>>>>>>    // return last JSON transfer error text
36963>>>>>>>>>    Function TransferErrorDescription Returns String
36965>>>>>>>>>        String  sError sJsonError
36965>>>>>>>>>        Integer eJsonTransferStatus
36965>>>>>>>>>        Get peJsonTransferStatus to eJsonTransferStatus
36966>>>>>>>>>        Get psJsonParseError to sJsonError
36967>>>>>>>>>        Case Begin
36967>>>>>>>>>            Case (eJsonTransferStatus=jtsOk) ;                Move '' to sError
36970>>>>>>>>>            Case (eJsonTransferStatus=jtsHttpRequestFailed) ;                Move C_$HttpRequestFailed to sError
36974>>>>>>>>>            Case (eJsonTransferStatus=jtsInvalidContentType) ;                Move (SFormat(C_$InvalidContentTypeReceived,psContentTypeReceived(Self))) to sError
36978>>>>>>>>>            Case (eJsonTransferStatus=jtsNotJson) ;                Move (C_$ReceivedDataNotInJsonFormat * sJsonError) to sError
36982>>>>>>>>>            Case Else ;                Move C_$ReceivedDataIsBad to sError
36984>>>>>>>>>        Case End
36984>>>>>>>>>        Function_Return sError
36985>>>>>>>>>    End_Function
36986>>>>>>>>>    
36986>>>>>>>>>    // can be send to raise an error.
36986>>>>>>>>>    Procedure LastError
36988>>>>>>>>>        Integer eJsonTransferStatus
36988>>>>>>>>>        String sError
36988>>>>>>>>>        
36988>>>>>>>>>        Get peJsonTransferStatus to eJsonTransferStatus
36989>>>>>>>>>        If (eJsonTransferStatus<>jtsOk) Begin
36991>>>>>>>>>            Get TransferErrorDescription to sError
36992>>>>>>>>>            Error DFERR_JSON_HTTP sError
36993>>>>>>>>>>
36993>>>>>>>>>        End
36993>>>>>>>>>>
36993>>>>>>>>>    End_Procedure
36994>>>>>>>>>    
36994>>>>>>>>>    
36994>>>>>>>>>End_Class
36995>>>>>>>
36995>>>>>>>Function ValidadorEmail String sCorreo String ByRef sMsg Returns Boolean
36998>>>>>>>    
36998>>>>>>>    Boolean bRet
36998>>>>>>>
36998>>>>>>>    // Comprobamos que se haya introducido algun valor
36998>>>>>>>    If (Length(sCorreo) = 0) Begin
37000>>>>>>>        Move "No se ha ingresado correo electronico" to sMsg
37001>>>>>>>        Function_Return False
37002>>>>>>>    End
37002>>>>>>>>
37002>>>>>>>    
37002>>>>>>>    If (Length(sCorreo) > 256 and (not(Length(sCorreo) = 0))) Begin
37004>>>>>>>        Move "El correo electronico introducido tiene mas de 256 caracteres" to sMsg
37005>>>>>>>        Function_Return False
37006>>>>>>>    End 
37006>>>>>>>>
37006>>>>>>>    
37006>>>>>>>    //Validacion propia
37006>>>>>>>    Get IsEmail sCorreo to bRet
37007>>>>>>>    If (not(bRet)) Begin
37009>>>>>>>        Move "El correo no tiene un formato correcto segun la funcion propia" to sMsg
37010>>>>>>>    End
37010>>>>>>>>
37010>>>>>>>    Else Begin
37011>>>>>>>        Move "El correo tiene un formato correcto segun la funcion propia" to sMsg
37012>>>>>>>    End
37012>>>>>>>>
37012>>>>>>>    
37012>>>>>>>//    Get validacionAPI sCorreo to bRet
37012>>>>>>>//    If (not(bRet)) Begin
37012>>>>>>>//        Move "Introduzca un correo valido" to sMsg
37012>>>>>>>//    End
37012>>>>>>>//    Else Begin
37012>>>>>>>//        Move "El correo es valido segun la API de neutrino" to sMsg
37012>>>>>>>//    End
37012>>>>>>>    
37012>>>>>>>    Function_Return (not(bRet))
37013>>>>>>>End_Function
37014>>>>>>>
37014>>>>>>>
37014>>>>>>>
37014>>>>>>>
37014>>>>>>>// Funcion que comprueba los distintos requisitos del formato de un correo electronico
37014>>>>>>>Function IsEmail String sCorreo Returns Boolean
37017>>>>>>>    
37017>>>>>>>    Integer iCount iCountAux iLengthString
37017>>>>>>>    String sCaracter
37017>>>>>>>    Boolean bRet
37017>>>>>>>    
37017>>>>>>>    Move (Length(sCorreo)) to iLengthString
37018>>>>>>>    //Comprobamos que el primer caracter no sea un simbolo valido en vez de numero o letra
37018>>>>>>>    If ((Left(sCorreo, 1) = ".") or (Left(sCorreo, 1) = "-") or (Left(sCorreo, 1) = "_") or (Left(sCorreo, 1) = "@")) Begin
37020>>>>>>>        //Move "El correo no puede comenzar por un simbolo" to sMsg
37020>>>>>>>        Function_Return False
37021>>>>>>>    End
37021>>>>>>>>
37021>>>>>>>    
37021>>>>>>>    For iCount from 1 to (iLengthString)
37027>>>>>>>>
37027>>>>>>>        Move (Mid(sCorreo,1,iCount)) to sCaracter
37028>>>>>>>        
37028>>>>>>>        // Comprobamos que el caracter no sea un simbolo prohibido
37028>>>>>>>        Get ComprobarSimbolos sCaracter to bRet
37029>>>>>>>        If (bRet) Begin
37031>>>>>>>            //Move "Se ha ingresado un simbolo no permitido (simbolos permitidos . - _)" to sMsg
37031>>>>>>>            Function_Return False
37032>>>>>>>        End
37032>>>>>>>>
37032>>>>>>>        
37032>>>>>>>        // Comprobamos que no haya 2 puntos juntos
37032>>>>>>>        If ((sCaracter = ".") and (Mid(sCorreo,1,iCount+1) = ".")) Begin
37034>>>>>>>            //Move "El correo no puede contener dos puntos seguidos" to sMsg
37034>>>>>>>            Function_Return False
37035>>>>>>>        End
37035>>>>>>>>
37035>>>>>>>        
37035>>>>>>>        // Comprobamos que antes de la @ haya un minimo de caracteres y un maximo
37035>>>>>>>        If ((sCaracter = "@") and (iCount > 1) and (iCount < 66)) Begin
37037>>>>>>>            Move (iCountAux+1) to iCountAux
37038>>>>>>>        End
37038>>>>>>>>
37038>>>>>>>        
37038>>>>>>>        // Comprobamos si (desde la derecha) la 3, 4 o 5 posicion es un .
37038>>>>>>>        If (not((Mid(sCorreo,1,iLengthString-2) = ".") or (Mid(sCorreo,1,iLengthString-3) = ".") or (Mid(sCorreo,1,iLengthString-4) = "."))) Begin
37040>>>>>>>            //Move "Tras el '.' de dominio, solo se podran escribir entre 2 y 4 caracteres" to sMsg
37040>>>>>>>            Function_Return False
37041>>>>>>>        End
37041>>>>>>>>
37041>>>>>>>    Loop
37042>>>>>>>>
37042>>>>>>>    
37042>>>>>>>    // Comprobamos que solo haya una @ en el correo
37042>>>>>>>    If (iCountAux = 1) Begin
37044>>>>>>>        Function_Return True
37045>>>>>>>    End 
37045>>>>>>>>
37045>>>>>>>    Else If (iCountAux > 1) Begin 
37048>>>>>>>         //Move "No puede introducir 2 '@'" to sMsg
37048>>>>>>>    End
37048>>>>>>>>
37048>>>>>>>    
37048>>>>>>>End_Function
37049>>>>>>>
37049>>>>>>>// Comprobador de simbolos permitidos
37049>>>>>>>Function ComprobarSimbolos String sCaracter Returns Boolean
37052>>>>>>>    Integer iCount
37052>>>>>>>    String sSimbolosProhibidos
37052>>>>>>>    
37052>>>>>>>    For iCount from 1 to (Length(cSimbolos))
37058>>>>>>>>
37058>>>>>>>        Move (Mid(cSimbolos,1,iCount)) to sSimbolosProhibidos
37059>>>>>>>        If (sCaracter = sSimbolosProhibidos) Begin
37061>>>>>>>            Function_Return True
37062>>>>>>>        End
37062>>>>>>>>
37062>>>>>>>    Loop
37063>>>>>>>>
37063>>>>>>>End_Function
37064>>>>>>>
37064>>>>>>>// FUNCION PARA CONSUMIR API NEUTRINO
37064>>>>>>>
37064>>>>>>>Function validacionAPI String sEmail Returns Boolean
37067>>>>>>>    Handle hoHttp hoJsonRequest hoResponse
37067>>>>>>>    Boolean bRet bIsnull
37067>>>>>>>    String sResponse
37067>>>>>>>    
37067>>>>>>>    // https://www.neutrinoapi.com/api/email-validate/
37067>>>>>>>    
37067>>>>>>>    Get Create (RefClass(cJsonHttpTransfer)) to hoHttp
37068>>>>>>>    Get Create (RefClass(cJsonObject))       to hoJsonRequest
37069>>>>>>>    
37069>>>>>>>    Send InitializeJsonType of hoJsonRequest jsonTypeObject
37070>>>>>>>    
37070>>>>>>>    Send SetMemberValue of hoJsonRequest "email"        jsonTypeString  sEmail
37071>>>>>>>    Send SetMemberValue of hoJsonRequest "fix-typos"    jsonTypeBoolean False
37072>>>>>>>    
37072>>>>>>>    Get AddHeader of hoHttp "User-ID" "Jaime1346" to bRet
37073>>>>>>>    Get AddHeader of hoHttp "API-Key" "5jiDCPbsFp2LBaN3p9F2uXc4KvrrT3ZizN5ac1Rrfjc9cVj6" to bRet
37074>>>>>>>    
37074>>>>>>>    Get HttpPostJson of hoHttp "neutrinoapi.net" "/email-validate" hoJsonRequest (&bRet) to hoResponse
37075>>>>>>>    
37075>>>>>>>    
37075>>>>>>>    If (bRet and (ResponseStatusCode(hoHttp) = 200)) Begin
37077>>>>>>>        //Send Info_Box (Stringify(hoResponse)) "Respuesta de la API"
37077>>>>>>>        If (HasMember(hoResponse,"valid")) Begin
37079>>>>>>>            Get IsMemberOfJsonType of hoResponse "valid" jsonTypeNull to bIsnull
37080>>>>>>>            If (bIsnull) Begin
37082>>>>>>>                Function_Return False
37083>>>>>>>            End
37083>>>>>>>>
37083>>>>>>>            Else Begin
37084>>>>>>>                Get MemberValue of hoResponse "valid" to sResponse
37085>>>>>>>                If (sResponse = "1") Begin
37087>>>>>>>                End
37087>>>>>>>>
37087>>>>>>>                Else Begin
37088>>>>>>>                    Function_Return False
37089>>>>>>>                End
37089>>>>>>>>
37089>>>>>>>            End
37089>>>>>>>>
37089>>>>>>>        End
37089>>>>>>>>
37089>>>>>>>        If (HasMember(hoResponse,"is-disposable")) Begin
37091>>>>>>>            Get IsMemberOfJsonType of hoResponse "is-disposable" jsonTypeNull to bIsnull
37092>>>>>>>            If (bIsnull) Begin
37094>>>>>>>                Function_Return False
37095>>>>>>>            End
37095>>>>>>>>
37095>>>>>>>            Else Begin
37096>>>>>>>                Get MemberValue of hoResponse "is-disposable" to sResponse
37097>>>>>>>                If (sResponse = "0") Begin
37099>>>>>>>                    //Send Info_Box "El correo no es temporal" ""
37099>>>>>>>                    Function_Return True
37100>>>>>>>                End
37100>>>>>>>>
37100>>>>>>>                Else Begin
37101>>>>>>>                    //Move "El correo es temporal" to sMsg
37101>>>>>>>                    Function_Return False
37102>>>>>>>                End
37102>>>>>>>>
37102>>>>>>>            End
37102>>>>>>>>
37102>>>>>>>        End
37102>>>>>>>>
37102>>>>>>>        
37102>>>>>>>    End
37102>>>>>>>>
37102>>>>>>>    
37102>>>>>>>    
37102>>>>>>>    
37102>>>>>>>End_Function
37103>>>>>
37103>>>>>Open schoolhouse
Including file: schoolhouse.fd    (C:\Users\Usuario\Documents\GitHub\Trabajo_SchoolHouse_Repository\WorkspaceSchoolStudent\DDSrc\schoolhouse.fd)
37105>>>>>Open student
Including file: student.fd    (C:\Users\Usuario\Documents\GitHub\Trabajo_SchoolHouse_Repository\WorkspaceSchoolStudent\DDSrc\student.fd)
37107>>>>>
37107>>>>>Register_Function validarError_Email Integer iField Returns Boolean
37107>>>>>Class cschoolhouseDataDictionary is a DataDictionary
37108>>>>>    
37108>>>>>    Procedure Construct_Object
37110>>>>>        Forward Send Construct_Object
37112>>>>>        Set Main_File to schoolhouse.File_Number
37113>>>>>
37113>>>>>        Set Add_Client_File to student.File_Number
37114>>>>>
37114>>>>>        Set Foreign_Field_Option DD_KEYFIELD DD_NOPUT to True
37115>>>>>        Set Foreign_Field_Option DD_KEYFIELD DD_FINDREQ to True
37116>>>>>        Set Foreign_Field_Option DD_INDEXFIELD DD_NOPUT to True
37117>>>>>        Set Foreign_Field_Option DD_DEFAULT DD_DISPLAYONLY to True
37118>>>>>
37118>>>>>        Set Key_Field_State Field schoolhouse.ID to True
37119>>>>>
37119>>>>>        Set Field_Option Field schoolhouse.Name DD_REQUIRED to True
37120>>>>>        
37120>>>>>        Set Field_Option Field schoolhouse.Email DD_REQUIRED to True
37121>>>>>        Set Field_Option Field schoolhouse.City DD_REQUIRED to True
37122>>>>>        
37122>>>>>        Set Field_Validate_msg Field schoolhouse.Email to get_validarError_Email
37123>>>>>    End_Procedure
37124>>>>>
37124>>>>>
37124>>>>>    Function validarError_Email Integer iField Returns Boolean
37126>>>>>        Boolean bRet
37126>>>>>        String sMsg sEmail
37126>>>>>        
37126>>>>>        Get Field_Current_Value Field schoolhouse.Email to sEmail
37127>>>>>        Get ValidadorEmail sEmail (&sMsg) to bRet
37128>>>>>        
37128>>>>>        If (bRet) Begin
37130>>>>>            Send Data_set_error iField DFERR_OPERATOR sMsg
37131>>>>>        End
37131>>>>>>
37131>>>>>        Function_Return (bRet)
37132>>>>>        
37132>>>>>    End_Function
37133>>>>>    
37133>>>>>End_Class
37134>>>
37134>>>Object oZoomSchoolHouse is a cWebView
37136>>>    Set piColumnCount to 12
37137>>>    Set psCaption to "ZoomSchoolHouse"
37138>>>    Set peWebViewStyle to wvsDrilldown
37139>>>    Set peViewType to vtZoom
37140>>>    Set pbShowCaption to False
37141>>>    Set Verify_Save_Msg to 0
37142>>>    Set piMaxWidth to 1024
37143>>>
37143>>>    Object oschoolhouse_DD is a cschoolhouseDataDictionary
37145>>>    End_Object 
37146>>>
37146>>>    Set Main_DD To oschoolhouse_DD
37147>>>    Set Server  To oschoolhouse_DD
37148>>>
37148>>>
37148>>>    Object oWebMainPanel is a cWebPanel
37150>>>        Set piColumnCount to 12
37151>>>        WebSetResponsive piColumnCount rmMobile to 4
37152>>>
37152>>>        Object oschoolhouseID is a cWebForm
37154>>>            Entry_Item schoolhouse.ID
37155>>>            Set piColumnSpan to 2
37156>>>            Set piColumnIndex to 0
37157>>>            Set peLabelPosition to lpTop
37158>>>            Set psLabel to "ID"
37159>>>        End_Object 
37160>>>
37160>>>        Object oschoolhouseName is a cWebForm
37162>>>            Entry_Item schoolhouse.Name
37163>>>            Set piColumnSpan to 10
37164>>>            Set piColumnIndex to 2
37165>>>            Set peLabelPosition to lpTop
37166>>>            Set psLabel to "Name"
37167>>>        End_Object 
37168>>>
37168>>>        Object oschoolhouseCounty is a cWebForm
37170>>>            Entry_Item schoolhouse.County
37171>>>            Set piColumnSpan to 12
37172>>>            Set piColumnIndex to 0
37173>>>            Set peLabelPosition to lpTop
37174>>>            Set psLabel to "County"
37175>>>        End_Object 
37176>>>
37176>>>        Object oschoolhouseZipCode is a cWebForm
37178>>>            Entry_Item schoolhouse.ZipCode
37179>>>            Set piColumnSpan to 1
37180>>>            Set piColumnIndex to 0
37181>>>            Set peLabelPosition to lpTop
37182>>>            Set psLabel to "ZipCode"
37183>>>        End_Object 
37184>>>
37184>>>        Object oschoolhouseCity is a cWebForm
37186>>>            Entry_Item schoolhouse.City
37187>>>            Set piColumnSpan to 11
37188>>>            Set piColumnIndex to 1
37189>>>            Set peLabelPosition to lpTop
37190>>>            Set psLabel to "City"
37191>>>        End_Object 
37192>>>
37192>>>        Object oschoolhouseAddress is a cWebForm
37194>>>            Entry_Item schoolhouse.Address
37195>>>            Set piColumnSpan to 12
37196>>>            Set piColumnIndex to 0
37197>>>            Set peLabelPosition to lpTop
37198>>>            Set psLabel to "Address"
37199>>>        End_Object 
37200>>>
37200>>>        Object oschoolhouseEmail is a cWebEdit
37202>>>            Entry_Item schoolhouse.Email
37203>>>            Set piColumnSpan to 0
37204>>>            Set piColumnIndex to 0
37205>>>            Set peLabelPosition to lpTop
37206>>>            Set psLabel to "Email"
37207>>>            Set piMinHeight to 150
37208>>>        End_Object 
37209>>>
37209>>>        Object oschoolhouseNotes is a cWebForm
37211>>>            Entry_Item schoolhouse.Notes
37212>>>            Set piColumnSpan to 12
37213>>>            Set piColumnIndex to 0
37214>>>            Set peLabelPosition to lpTop
37215>>>            Set psLabel to "Notes"
37216>>>        End_Object 
37217>>>
37217>>>        Object oschoolhouseModifiedTime is a cWebForm
37219>>>            Entry_Item schoolhouse.ModifiedTime
37220>>>            Set piColumnSpan to 5
37221>>>            Set piColumnIndex to 0
37222>>>            Set peLabelPosition to lpTop
37223>>>            Set psLabel to "ModifiedTime"
37224>>>        End_Object 
37225>>>
37225>>>        Object oschoolhouseCreatedTime is a cWebForm
37227>>>            Entry_Item schoolhouse.CreatedTime
37228>>>            Set piColumnSpan to 5
37229>>>            Set piColumnIndex to 0
37230>>>            Set peLabelPosition to lpTop
37231>>>            Set psLabel to "CreatedTime"
37232>>>        End_Object 
37233>>>    End_Object 
37234>>>
37234>>>    Object oActionGroup is a cWebMenuGroup
37236>>>
37236>>>        Object oSaveBtn is a cWebMenuItem
37238>>>            Set psCSSClass to "WebSaveMenuItem"
37239>>>            Set psCaption to "Save"
37240>>>
37240>>>            Procedure OnClick
37243>>>                Send Request_Save
37244>>>            End_Procedure
37245>>>
37245>>>        End_Object 
37246>>>
37246>>>        Object oEditBtn is a cWebMenuItem
37248>>>            Set psCSSClass to "WebEditMenuItem"
37249>>>            Set psCaption to "Edit"
37250>>>            Procedure OnClick
37253>>>                Send ChangeEditMode True
37254>>>                Send SetActionButtons
37255>>>            End_Procedure
37256>>>
37256>>>        End_Object 
37257>>>
37257>>>        Object oDeleteBtn is a cWebMenuItem
37259>>>            Set psCSSClass to "WebDeleteMenuItem"
37260>>>            Set psCaption to "Delete"
37261>>>            Set peActionDisplay to adMenu
37262>>>
37262>>>            Procedure OnClick
37265>>>                Send Request_Delete
37266>>>            End_Procedure
37267>>>
37267>>>        End_Object 
37268>>>
37268>>>        Object oCancelChangesBtn is a cWebMenuItem
37270>>>            Set psCSSClass to "WebIcon_Refresh"
37271>>>            Set psCaption to "Clear Changes"
37272>>>            Set peActionDisplay to adMenu
37273>>>            Procedure OnClick
37276>>>                Send RefreshRecord
37277>>>            End_Procedure
37278>>>
37278>>>        End_Object 
37279>>>    End_Object 
37280>>>
37280>>>    Procedure SetActionButtons
37283>>>        tWebNavigateData NavigateData
37283>>>        tWebNavigateData NavigateData
37283>>>        Boolean bHasRecord
37283>>>        Handle hoDD
37283>>>
37283>>>        Get Server to hoDD
37284>>>        Get GetNavigateData to NavigateData
37285>>>        Get HasRecord of hoDD to bHasRecord
37286>>>
37286>>>        // let's hide all buttons and then Show the ones we want
37286>>>        WebSet pbRender of oEditBtn to False
37287>>>        WebSet pbRender of oSaveBtn to False
37288>>>        WebSet pbRender of oCancelChangesBtn to False
37289>>>        WebSet pbRender of oDeleteBtn to False
37290>>>
37290>>>        If (NavigateData.bReadOnly) Begin
37292>>>            WebSet pbRender of oEditBtn to True
37293>>>        End
37293>>>>
37293>>>        Else Begin
37294>>>            WebSet pbRender of oSaveBtn to True
37295>>>            WebSet pbRender of oCancelChangesBtn to True
37296>>>            WebSet pbRender of oDeleteBtn to bHasRecord
37297>>>        End
37297>>>>
37297>>>    End_Procedure
37298>>>
37298>>>    Procedure OnViewSaved Handle hoServer Boolean bChanged
37301>>>        // Close after save
37301>>>        Send NavigateClose Self
37302>>>    End_Procedure
37303>>>
37303>>>    // this will close the view after a delete
37303>>>    Procedure OnViewDeleted Handle hoDDO
37306>>>        Send NavigateClose Self
37307>>>    End_Procedure
37308>>>
37308>>>    Procedure OnNavigateForward tWebNavigateData NavigateData Integer hoInvokingView Integer hoInvokingObject
37311>>>        Case Begin
37311>>>            Case (NavigateData.eNavigateType = nfFromMain)
37313>>>                // If from main, this is a propbably a main file Select to Zoom.
37313>>>                Case Break
37314>>>
37314>>>            Case (NavigateData.eNavigateType = nfFromParent)
37317>>>                // If from parent, this is a constrained drill down.
37317>>>                Case Break
37318>>>
37318>>>            Case (NavigateData.eNavigateType = nfFromChild)
37321>>>                // If from child, this is a probably a parent Zoom from a Zoom.
37321>>>                Case Break
37322>>>
37322>>>            Case Else // must be nfUndefined
37322>>>
37322>>>        Case End
37322>>>
37322>>>        Send SetActionButtons
37323>>>
37323>>>    End_Procedure
37324>>>
37324>>>End_Object 
37325>    Use ZoomStudent.wo
Including file: ZoomStudent.wo    (C:\Users\Usuario\Documents\GitHub\Trabajo_SchoolHouse_Repository\WorkspaceSchoolStudent\AppSrc\ZoomStudent.wo)
37325>>>// C:\Users\Usuario\Desktop\Trabajo Jaime\Trabajos\WorkspaceSchoolStudent\AppSrc\ZoomStudent.wo
37325>>>// ZoomStudent
37325>>>//
37325>>>
37325>>>Use cWebView.pkg
37325>>>Use cWebPanel.pkg
37325>>>Use cWebMenuGroup.pkg
37325>>>Use cWebMenuItem.pkg
37325>>>Use cWebForm.pkg
37325>>>Use cWebEdit.pkg
37325>>>
37325>>>Use cschoolhouseDataDictionary.dd
37325>>>Use cstudentDataDictionary.dd
Including file: cstudentDataDictionary.dd    (C:\Users\Usuario\Documents\GitHub\Trabajo_SchoolHouse_Repository\WorkspaceSchoolStudent\DDSrc\cstudentDataDictionary.dd)
37325>>>>>Use DataDict.pkg
37325>>>>>Use ValidadorEmail.pkg
37325>>>>>Use ValidadorDNI.pkg
Including file: ValidadorDNI.pkg    (C:\Users\Usuario\Documents\GitHub\Trabajo_SchoolHouse_Repository\WorkspaceSchoolStudent\AppSrc\ValidadorDNI.pkg)
37325>>>>>>>Define cLetter for "TRWAGMYFPDXBNJZSQVHLCKE"
37325>>>>>>>Define cNumeric for "0123456789"
37325>>>>>>>
37325>>>>>>>
37325>>>>>>>Function ValidadorDNI String sDNI String ByRef sMsg Returns Boolean
37328>>>>>>>    
37328>>>>>>>    Boolean bRet
37328>>>>>>>    
37328>>>>>>>    // Hacemos que el DNI se use indistintamente como mayusculas
37328>>>>>>>    Move (Uppercase(sDNI)) to sDNI
37329>>>>>>>    
37329>>>>>>>    // Comprobamos que el DNI introducido tenga el tamanno indicado y que se haya introducido algun valor
37329>>>>>>>    If (Length(sDNI) = 0) Begin
37331>>>>>>>        Move "No se ha ingresado DNI" to sMsg
37332>>>>>>>        Function_Return True
37333>>>>>>>    End
37333>>>>>>>>
37333>>>>>>>    If (Length(sDNI) <> 9 and (not(Length(sDNI) = 0))) Begin
37335>>>>>>>        Move "El DNI introducido no tiene 9 caracteres" to sMsg
37336>>>>>>>        Function_Return True
37337>>>>>>>    End
37337>>>>>>>>
37337>>>>>>>    
37337>>>>>>>    // Comprobamos que el documento introducido termine en una letra
37337>>>>>>>    Get IsLastChar sDNI to bRet
37338>>>>>>>    If (not(bRet)) Begin
37340>>>>>>>        Move "El documento debe acabar con una letra valida" to sMsg
37341>>>>>>>        Function_Return True
37342>>>>>>>    End
37342>>>>>>>>
37342>>>>>>>    
37342>>>>>>>    
37342>>>>>>>    
37342>>>>>>>    // Condicional para asegurarse de que sea letra o numero
37342>>>>>>>    If ((Left(sDNI, 1) = "X") or (Left(sDNI, 1) = "X") or (Left(sDNI, 1) = "X")) Begin
37344>>>>>>>        If (Left(sDNI, 1) = "X") Begin
37346>>>>>>>            Move (("0") + Right(sDNI,8)) to sDNI
37347>>>>>>>        End 
37347>>>>>>>>
37347>>>>>>>        If (Left(sDNI, 1) = "Y") Begin
37349>>>>>>>            Move (("1") + Right(sDNI,8)) to sDNI
37350>>>>>>>        End
37350>>>>>>>>
37350>>>>>>>        If (Left(sDNI, 1) = "Z") Begin
37352>>>>>>>            Move (("2") + Right(sDNI,8)) to sDNI
37353>>>>>>>        End
37353>>>>>>>>
37353>>>>>>>        
37353>>>>>>>        // Comprobamos que el documento introducido termine en una letra
37353>>>>>>>        
37353>>>>>>>        If (not(bRet)) Begin
37355>>>>>>>            Move "El documento debe contener una letra, 7 digitos y una letra" to sMsg
37356>>>>>>>            Function_Return True
37357>>>>>>>        End
37357>>>>>>>>
37357>>>>>>>        
37357>>>>>>>        // Comprobamos que tengamos los digitos necesarios
37357>>>>>>>        Get AreNumbers sDNI to bRet
37358>>>>>>>    End
37358>>>>>>>>
37358>>>>>>>    Else Begin
37359>>>>>>>        // Comprobamos que tengamos los digitos necesarios
37359>>>>>>>        Get AreNumbers sDNI to bRet
37360>>>>>>>        // Comprobamos que el documento introducido termine en una letra
37360>>>>>>>        If (not(bRet)) Begin
37362>>>>>>>            Move "El documento debe contener 8 digitos y una letra" to sMsg
37363>>>>>>>            Function_Return True
37364>>>>>>>        End
37364>>>>>>>>
37364>>>>>>>    End
37364>>>>>>>>
37364>>>>>>>    
37364>>>>>>>
37364>>>>>>>    
37364>>>>>>>    Get IsDNI sDNI to bRet
37365>>>>>>>    
37365>>>>>>>    If (bRet) Begin
37367>>>>>>>        Move "El documento ingresado no es correcto" to sMsg
37368>>>>>>>    End
37368>>>>>>>>
37368>>>>>>>
37368>>>>>>>    Function_Return bRet
37369>>>>>>>End_Function
37370>>>>>>>
37370>>>>>>>
37370>>>>>>>// Funcion para comprobar DNI
37370>>>>>>>Function IsDNI String sDNI Returns Boolean
37373>>>>>>>    
37373>>>>>>>    //Send Info_Box sDNI "DNI introducido"
37373>>>>>>>    String  sLetter 
37373>>>>>>>    Integer iDigitos iResto
37373>>>>>>>    
37373>>>>>>>    Move (Left(sDNI,8)) to iDigitos
37374>>>>>>>    Move (Mod(iDigitos,23)) to iResto
37375>>>>>>>    Move (Mid(cLetter,1,(iResto+1))) to sLetter
37376>>>>>>>    
37376>>>>>>>    If (Right(sDNI, 1) = sLetter) Begin
37378>>>>>>>        Function_Return False
37379>>>>>>>    End
37379>>>>>>>>
37379>>>>>>>    Else Begin
37380>>>>>>>        Function_Return True
37381>>>>>>>    End
37381>>>>>>>>
37381>>>>>>>End_Function
37382>>>>>>>
37382>>>>>>>// Funcion que comprueba si el ultimo caracter es una letra valida
37382>>>>>>>Function IsLastChar String sDNI Returns Boolean
37385>>>>>>>    Integer iCount
37385>>>>>>>    String sLetra sPosiblesLetras
37385>>>>>>>    
37385>>>>>>>    Move (Uppercase(Right(sDNI,1))) to sLetra
37386>>>>>>>    For iCount from 1 to (Length(cLetter))
37392>>>>>>>>
37392>>>>>>>        Move (Mid(cLetter,1,iCount)) to sPosiblesLetras
37393>>>>>>>        If (sLetra = sPosiblesLetras) Begin
37395>>>>>>>            Function_Return True
37396>>>>>>>        End
37396>>>>>>>>
37396>>>>>>>    Loop
37397>>>>>>>>
37397>>>>>>>End_Function
37398>>>>>>>
37398>>>>>>>// Funcion que comprueba que menos el ultimo, todos los caracteres son digitos (o conversion en los NIE)
37398>>>>>>>Function AreNumbers String sDNI Returns Boolean
37401>>>>>>>    Integer iCount iAuxCount
37401>>>>>>>    String sDigito sDigitosPosibles
37401>>>>>>>    Boolean bComprobador
37401>>>>>>> 
37401>>>>>>>    For iCount from 1 to (Length(sDNI)-1)
37407>>>>>>>>
37407>>>>>>>        
37407>>>>>>>        Move False to bComprobador
37408>>>>>>>        Move (Mid(sDNI,1,iCount)) to sDigito
37409>>>>>>>        For iAuxCount from 1 to (Length(cNumeric))
37415>>>>>>>>
37415>>>>>>>            Move (Mid(cNumeric,1,iAuxCount)) to sDigitosPosibles
37416>>>>>>>            If (sDigito = sDigitosPosibles) Begin
37418>>>>>>>                Move True to bComprobador
37419>>>>>>>            End
37419>>>>>>>>
37419>>>>>>>        Loop
37420>>>>>>>>
37420>>>>>>>
37420>>>>>>>        If (not(bComprobador)) Begin
37422>>>>>>>            Function_Return False
37423>>>>>>>        End
37423>>>>>>>>
37423>>>>>>>    Loop
37424>>>>>>>>
37424>>>>>>>    Function_Return true
37425>>>>>>>End_Function
37426>>>>>
37426>>>>>Open student
37428>>>>>Open schoolhouse
37430>>>>>
37430>>>>>Register_Function validarError_Email_student Integer iField Returns Boolean
37430>>>>>Register_Function validarError_DNI Integer iField Returns Boolean
37430>>>>>
37430>>>>>Class cstudentDataDictionary is a DataDictionary
37431>>>>>    
37431>>>>>    Procedure Construct_Object
37433>>>>>        Forward Send Construct_Object
37435>>>>>        Set Main_File to student.File_Number
37436>>>>>
37436>>>>>        Set Add_Server_File to schoolhouse.File_Number
37437>>>>>
37437>>>>>        Set Foreign_Field_Option DD_KEYFIELD DD_NOPUT to True
37438>>>>>        Set Foreign_Field_Option DD_KEYFIELD DD_FINDREQ to True
37439>>>>>        Set Foreign_Field_Option DD_INDEXFIELD DD_NOPUT to True
37440>>>>>        Set Foreign_Field_Option DD_DEFAULT DD_DISPLAYONLY to True
37441>>>>>
37441>>>>>        Set Key_Field_State Field student.ID to True
37442>>>>>
37442>>>>>        Set Field_Option Field student.Name DD_REQUIRED to True
37443>>>>>
37443>>>>>        Set Field_Option Field student.LastName DD_REQUIRED to True
37444>>>>>
37444>>>>>        Set Field_Option Field student.DNI DD_REQUIRED to True
37445>>>>>
37445>>>>>        Set Field_Option Field student.Email DD_REQUIRED to True
37446>>>>>
37446>>>>>        Set Field_Option Field student.City DD_REQUIRED to True
37447>>>>>        
37447>>>>>        Set Field_Validate_msg Field student.Email to get_validarError_Email_student
37448>>>>>        Set Field_Validate_msg Field student.DNI to get_validarError_DNI
37449>>>>>    End_Procedure
37450>>>>>
37450>>>>>    Function validarError_Email_student Integer iField Returns Boolean
37452>>>>>        Boolean bRet
37452>>>>>        String sMsg sEmail
37452>>>>>        
37452>>>>>        Get Field_Current_Value Field student.Email to sEmail
37453>>>>>        Get ValidadorEmail sEmail (&sMsg) to bRet
37454>>>>>        
37454>>>>>        If (bRet) Begin
37456>>>>>            Send Data_set_error iField DFERR_OPERATOR sMsg
37457>>>>>        End
37457>>>>>>
37457>>>>>        Function_Return (bRet)
37458>>>>>        
37458>>>>>    End_Function
37459>>>>>    
37459>>>>>     Function validarError_DNI Integer iField Returns Boolean
37461>>>>>        Boolean bRet
37461>>>>>        String sMsg sDNI
37461>>>>>        
37461>>>>>        Get Field_Current_Value Field student.DNI to sDNI
37462>>>>>        Get ValidadorDNI sDNI (&sMsg) to bRet
37463>>>>>  
37463>>>>>        If (bRet) Begin
37465>>>>>            Send Data_set_error iField DFERR_OPERATOR sMsg
37466>>>>>        End
37466>>>>>>
37466>>>>>        Function_Return (bRet)
37467>>>>>        
37467>>>>>    End_Function
37468>>>>>End_Class
37469>>>
37469>>>Object oZoomStudent is a cWebView
37471>>>    Set piColumnCount to 12
37472>>>    Set psCaption to "ZoomStudent"
37473>>>    Set peWebViewStyle to wvsDrilldown
37474>>>    Set peViewType to vtZoom
37475>>>    Set pbShowCaption to False
37476>>>    Set Verify_Save_Msg to 0
37477>>>    Set piMaxWidth to 1024
37478>>>
37478>>>    Object oschoolhouse_DD is a cschoolhouseDataDictionary
37480>>>    End_Object 
37481>>>
37481>>>    Object ostudent_DD is a cstudentDataDictionary
37483>>>        Set DDO_Server To oschoolhouse_DD
37484>>>    End_Object 
37485>>>
37485>>>    Set Main_DD To ostudent_DD
37486>>>    Set Server  To ostudent_DD
37487>>>
37487>>>
37487>>>    Object oWebMainPanel is a cWebPanel
37489>>>        Set piColumnCount to 12
37490>>>        WebSetResponsive piColumnCount rmMobile to 4
37491>>>
37491>>>        Object ostudentID is a cWebForm
37493>>>            Entry_Item student.ID
37494>>>            Set piColumnSpan to 2
37495>>>            Set piColumnIndex to 0
37496>>>            Set peLabelPosition to lpTop
37497>>>            Set psLabel to "ID"
37498>>>        End_Object 
37499>>>
37499>>>        Object ostudentName is a cWebForm
37501>>>            Entry_Item student.Name
37502>>>            Set piColumnSpan to 10
37503>>>            Set piColumnIndex to 2
37504>>>            Set peLabelPosition to lpTop
37505>>>            Set psLabel to "Name"
37506>>>        End_Object 
37507>>>
37507>>>        Object ostudentLastName is a cWebForm
37509>>>            Entry_Item student.LastName
37510>>>            Set piColumnSpan to 12
37511>>>            Set piColumnIndex to 0
37512>>>            Set peLabelPosition to lpTop
37513>>>            Set psLabel to "LastName"
37514>>>        End_Object 
37515>>>
37515>>>        Object ostudentDNI is a cWebForm
37517>>>            Entry_Item student.DNI
37518>>>            Set piColumnSpan to 2
37519>>>            Set piColumnIndex to 0
37520>>>            Set peLabelPosition to lpTop
37521>>>            Set psLabel to "DNI"
37522>>>        End_Object 
37523>>>
37523>>>        Object ostudentBirthday is a cWebForm
37525>>>            Entry_Item student.Birthday
37526>>>            Set piColumnSpan to 2
37527>>>            Set piColumnIndex to 2
37528>>>            Set peLabelPosition to lpTop
37529>>>            Set psLabel to "Birthday"
37530>>>        End_Object 
37531>>>
37531>>>        Object ostudentEmail is a cWebEdit
37533>>>            Entry_Item student.Email
37534>>>            Set piColumnSpan to 0
37535>>>            Set piColumnIndex to 4
37536>>>            Set peLabelPosition to lpTop
37537>>>            Set psLabel to "Email"
37538>>>            Set piMinHeight to 150
37539>>>        End_Object 
37540>>>
37540>>>        Object ostudentCounty is a cWebForm
37542>>>            Entry_Item student.County
37543>>>            Set piColumnSpan to 12
37544>>>            Set piColumnIndex to 0
37545>>>            Set peLabelPosition to lpTop
37546>>>            Set psLabel to "County"
37547>>>        End_Object 
37548>>>
37548>>>        Object ostudentCity is a cWebForm
37550>>>            Entry_Item student.City
37551>>>            Set piColumnSpan to 12
37552>>>            Set piColumnIndex to 0
37553>>>            Set peLabelPosition to lpTop
37554>>>            Set psLabel to "City"
37555>>>        End_Object 
37556>>>
37556>>>        Object ostudentAddress is a cWebForm
37558>>>            Entry_Item student.Address
37559>>>            Set piColumnSpan to 12
37560>>>            Set piColumnIndex to 0
37561>>>            Set peLabelPosition to lpTop
37562>>>            Set psLabel to "Address"
37563>>>        End_Object 
37564>>>
37564>>>        Object oschoolhouseID is a cWebForm
37566>>>            Entry_Item schoolhouse.ID
37567>>>            Set piColumnSpan to 2
37568>>>            Set piColumnIndex to 0
37569>>>            Set peLabelPosition to lpTop
37570>>>            Set psLabel to "SchoolHouseID"
37571>>>            Set pbPromptButton to True
37572>>>
37572>>>
37572>>>            WebRegisterPath ntNavigateForward oSelectSchoolHouse
37578>>>
37578>>>            Procedure OnPrompt
37581>>>                Send NavigatePath
37582>>>            End_Procedure
37583>>>        End_Object 
37584>>>
37584>>>        Object oschoolhouseName is a cWebForm
37586>>>            Entry_Item schoolhouse.Name
37587>>>            Set piColumnSpan to 10
37588>>>            Set piColumnIndex to 2
37589>>>            Set peLabelPosition to lpTop
37590>>>            Set psLabel to "SchoolHouseName"
37591>>>            Set pbPromptButton to True
37592>>>
37592>>>
37592>>>            WebRegisterPath ntNavigateForward oSelectSchoolHouse
37598>>>
37598>>>            Procedure OnPrompt
37601>>>                Send NavigatePath
37602>>>            End_Procedure
37603>>>        End_Object 
37604>>>
37604>>>        Object ostudentNotes is a cWebForm
37606>>>            Entry_Item student.Notes
37607>>>            Set piColumnSpan to 12
37608>>>            Set piColumnIndex to 0
37609>>>            Set peLabelPosition to lpTop
37610>>>            Set psLabel to "Notes"
37611>>>        End_Object 
37612>>>
37612>>>        Object ostudentModifiedTime is a cWebForm
37614>>>            Entry_Item student.ModifiedTime
37615>>>            Set piColumnSpan to 5
37616>>>            Set piColumnIndex to 0
37617>>>            Set peLabelPosition to lpTop
37618>>>            Set psLabel to "ModifiedTime"
37619>>>        End_Object 
37620>>>
37620>>>        Object ostudentCreatedTime is a cWebForm
37622>>>            Entry_Item student.CreatedTime
37623>>>            Set piColumnSpan to 5
37624>>>            Set piColumnIndex to 0
37625>>>            Set peLabelPosition to lpTop
37626>>>            Set psLabel to "CreatedTime"
37627>>>        End_Object 
37628>>>    End_Object 
37629>>>
37629>>>    Object oActionGroup is a cWebMenuGroup
37631>>>
37631>>>        Object oSaveBtn is a cWebMenuItem
37633>>>            Set psCSSClass to "WebSaveMenuItem"
37634>>>            Set psCaption to "Save"
37635>>>
37635>>>            Procedure OnClick
37638>>>                Send Request_Save
37639>>>            End_Procedure
37640>>>
37640>>>        End_Object 
37641>>>
37641>>>        Object oEditBtn is a cWebMenuItem
37643>>>            Set psCSSClass to "WebEditMenuItem"
37644>>>            Set psCaption to "Edit"
37645>>>            Procedure OnClick
37648>>>                Send ChangeEditMode True
37649>>>                Send SetActionButtons
37650>>>            End_Procedure
37651>>>
37651>>>        End_Object 
37652>>>
37652>>>        Object oDeleteBtn is a cWebMenuItem
37654>>>            Set psCSSClass to "WebDeleteMenuItem"
37655>>>            Set psCaption to "Delete"
37656>>>            Set peActionDisplay to adMenu
37657>>>
37657>>>            Procedure OnClick
37660>>>                Send Request_Delete
37661>>>            End_Procedure
37662>>>
37662>>>        End_Object 
37663>>>
37663>>>        Object oCancelChangesBtn is a cWebMenuItem
37665>>>            Set psCSSClass to "WebIcon_Refresh"
37666>>>            Set psCaption to "Clear Changes"
37667>>>            Set peActionDisplay to adMenu
37668>>>            Procedure OnClick
37671>>>                Send RefreshRecord
37672>>>            End_Procedure
37673>>>
37673>>>        End_Object 
37674>>>    End_Object 
37675>>>
37675>>>    Procedure SetActionButtons
37678>>>        tWebNavigateData NavigateData
37678>>>        tWebNavigateData NavigateData
37678>>>        Boolean bHasRecord
37678>>>        Handle hoDD
37678>>>
37678>>>        Get Server to hoDD
37679>>>        Get GetNavigateData to NavigateData
37680>>>        Get HasRecord of hoDD to bHasRecord
37681>>>
37681>>>        // let's hide all buttons and then Show the ones we want
37681>>>        WebSet pbRender of oEditBtn to False
37682>>>        WebSet pbRender of oSaveBtn to False
37683>>>        WebSet pbRender of oCancelChangesBtn to False
37684>>>        WebSet pbRender of oDeleteBtn to False
37685>>>
37685>>>        If (NavigateData.bReadOnly) Begin
37687>>>            WebSet pbRender of oEditBtn to True
37688>>>        End
37688>>>>
37688>>>        Else Begin
37689>>>            WebSet pbRender of oSaveBtn to True
37690>>>            WebSet pbRender of oCancelChangesBtn to True
37691>>>            WebSet pbRender of oDeleteBtn to bHasRecord
37692>>>        End
37692>>>>
37692>>>    End_Procedure
37693>>>
37693>>>    Procedure OnViewSaved Handle hoServer Boolean bChanged
37696>>>        // Close after save
37696>>>        Send NavigateClose Self
37697>>>    End_Procedure
37698>>>
37698>>>    // this will close the view after a delete
37698>>>    Procedure OnViewDeleted Handle hoDDO
37701>>>        Send NavigateClose Self
37702>>>    End_Procedure
37703>>>
37703>>>    Procedure OnNavigateForward tWebNavigateData NavigateData Integer hoInvokingView Integer hoInvokingObject
37706>>>        Case Begin
37706>>>            Case (NavigateData.eNavigateType = nfFromMain)
37708>>>                // If from main, this is a propbably a main file Select to Zoom.
37708>>>                Case Break
37709>>>
37709>>>            Case (NavigateData.eNavigateType = nfFromParent)
37712>>>                // If from parent, this is a constrained drill down.
37712>>>                Case Break
37713>>>
37713>>>            Case (NavigateData.eNavigateType = nfFromChild)
37716>>>                // If from child, this is a probably a parent Zoom from a Zoom.
37716>>>                Case Break
37717>>>
37717>>>            Case Else // must be nfUndefined
37717>>>
37717>>>        Case End
37717>>>
37717>>>        Send SetActionButtons
37718>>>
37718>>>    End_Procedure
37719>>>
37719>>>End_Object 
37720>    Use SelectSchoolHouse.wo
Including file: SelectSchoolHouse.wo    (C:\Users\Usuario\Documents\GitHub\Trabajo_SchoolHouse_Repository\WorkspaceSchoolStudent\AppSrc\SelectSchoolHouse.wo)
37720>>>// C:\Users\Usuario\Desktop\Trabajo Jaime\Trabajos\WorkspaceSchoolStudent\AppSrc\SelectSchoolHouse.wo
37720>>>// SelectSchoolHouse
37720>>>//
37720>>>
37720>>>Use cWebView.pkg
37720>>>Use cWebList.pkg
37720>>>Use cWebMenuGroup.pkg
37720>>>Use cWebMenuItem.pkg
37720>>>Use cWebColumnButton.pkg
37720>>>Use cWebColumn.pkg
37720>>>Use ZoomSchoolHouse.wo
37720>>>
37720>>>Use cschoolhouseDataDictionary.dd
37720>>>
37720>>>Object oSelectSchoolHouse is a cWebView
37722>>>    Set psCaption to "SelectSchoolHouse"
37723>>>    Set peWebViewStyle to wvsDrilldown
37724>>>    Set peViewType to vtSelect
37725>>>    Set piColumnCount to 12
37726>>>    Set pbShowCaption to False
37727>>>    Set piMaxWidth to 1024
37728>>>
37728>>>    Object oschoolhouse_DD is a cschoolhouseDataDictionary
37730>>>    End_Object 
37731>>>
37731>>>    Set Main_DD To oschoolhouse_DD
37732>>>    Set Server  To oschoolhouse_DD
37733>>>
37733>>>
37733>>>    Object oList is a cWebList
37735>>>        Set piColumnSpan to 0
37736>>>        Set psCSSClass to "MobileList"
37737>>>        Set pbServerOnRowClick to True
37738>>>        Set pbFillHeight to True
37739>>>        Set pbShowHeader to False
37740>>>        Set piSortColumn to 0
37741>>>
37741>>>        Object oschoolhouseID is a cWebColumn
37743>>>            Entry_Item schoolhouse.ID
37744>>>            Set psCaption to "schoolhouse.ID"
37745>>>            Set piWidth to 100
37746>>>        End_Object 
37747>>>
37747>>>        Object oschoolhouseName is a cWebColumn
37749>>>            Entry_Item schoolhouse.Name
37750>>>            Set psCaption to "schoolhouse.Name"
37751>>>            Set piWidth to 1000
37752>>>        End_Object 
37753>>>
37753>>>        Object oschoolhouseCity is a cWebColumn
37755>>>            Entry_Item schoolhouse.City
37756>>>            Set psCaption to "schoolhouse.City"
37757>>>            Set piWidth to 1201
37758>>>        End_Object 
37759>>>
37759>>>        Object oschoolhouseAddress is a cWebColumn
37761>>>            Entry_Item schoolhouse.Address
37762>>>            Set psCaption to "schoolhouse.Address"
37763>>>            Set piWidth to 2001
37764>>>        End_Object 
37765>>>
37765>>>        Object oDetailButton is a cWebColumnButton
37767>>>            Set psCaption to "btn"
37768>>>            Set piWidth to 45
37769>>>            Set pbFixedWidth to True
37770>>>            Set pbResizable to False
37771>>>            Set piListRowSpan to 1
37772>>>            Set psBtnCssClass to "WebButtonIcon WebIcon_Info"
37773>>>            Set peAlign to alignRight
37774>>>
37774>>>            WebRegisterPath ntNavigateForward oZoomSchoolHouse
37780>>>
37780>>>            Procedure OnClick
37783>>>                Send NavigatePath
37784>>>            End_Procedure
37785>>>
37785>>>            Procedure OnGetNavigateForwardData tWebNavigateData ByRef NavigateData Handle hoToView
37788>>>                Move True to NavigateData.bReadOnly
37789>>>            End_Procedure
37790>>>
37790>>>        End_Object 
37791>>>
37791>>>        WebRegisterPath ntNavigateForward oZoomSchoolHouse
37797>>>
37797>>>        Procedure OnRowClick String sRowId
37800>>>            tWebNavigateData NavigateData
37800>>>            tWebNavigateData NavigateData
37800>>>            Get GetNavigateData to NavigateData
37801>>>
37801>>>            Case Begin
37801>>>                Case (NavigateData.eNavigateType = nfFromParent)
37803>>>                    Send NavigateForward of oZoomSchoolHouse Self
37804>>>                    Case Break
37805>>>
37805>>>                Case (NavigateData.eNavigateType = nfFromChild)
37808>>>                    Send NavigateClose Self
37809>>>                    Case Break
37810>>>
37810>>>                Case (NavigateData.eNavigateType = nfFromMain)
37813>>>                    Send NavigateClose Self
37814>>>                    Case Break
37815>>>
37815>>>                Case Else // must be nfUndefined
37815>>>                    Send NavigateForward of oZoomSchoolHouse Self
37816>>>
37816>>>            Case End
37816>>>        End_Procedure
37817>>>
37817>>>        Procedure OnGetNavigateForwardData tWebNavigateData ByRef NavigateData Handle hoToView
37820>>>            Move True to NavigateData.bReadOnly
37821>>>        End_Procedure
37822>>>
37822>>>    End_Object 
37823>>>
37823>>>    Object oActionGroup is a cWebMenuGroup
37825>>>
37825>>>        Object oSearch is a cWebMenuItem
37827>>>            Set psCSSClass to "WebPromptMenuItem"
37828>>>            Set psCaption to "Search"
37829>>>
37829>>>            Procedure OnClick
37832>>>                Send Search of oList
37833>>>            End_Procedure
37834>>>
37834>>>        End_Object 
37835>>>
37835>>>        Object oNewButton is a cWebMenuItem
37837>>>            Set psCSSClass to "WebClearMenuItem"
37838>>>            Set psCaption to "New"
37839>>>
37839>>>            WebRegisterPath ntNavigateForward oZoomSchoolHouse
37845>>>
37845>>>            Procedure OnClick
37848>>>                Send NavigatePath
37849>>>            End_Procedure
37850>>>
37850>>>            Procedure OnGetNavigateForwardData tWebNavigateData ByRef NavigateData Handle hoToView
37853>>>                Move True to NavigateData.bNewRecord
37854>>>            End_Procedure
37855>>>
37855>>>        End_Object 
37856>>>    End_Object 
37857>>>
37857>>>    Procedure OnNavigateForward tWebNavigateData NavigateData Integer hoInvokingView Integer hoInvokingObject
37860>>>        WebSet pbRender of oNewButton to True
37861>>>        WebSet pbRender of oDetailButton to True
37862>>>
37862>>>        Case Begin
37862>>>            Case (NavigateData.eNavigateType = nfFromParent)
37864>>>                // If from parent, this is a constrained drill down
37864>>>                // If Row select does main-zoom we don't need this
37864>>>                WebSet pbRender of oDetailButton to False
37865>>>                Case Break
37866>>>
37866>>>            Case (NavigateData.eNavigateType = nfFromChild)
37869>>>                // If from child, this is a probably a parent lookup from a Zoom
37869>>>                Case Break
37870>>>
37870>>>            Case (NavigateData.eNavigateType = nfFromMain)
37873>>>                // If from main, this is a probably a main-file lookup from a Zoom
37873>>>                WebSet pbRender of oDetailButton to False
37874>>>                Case Break
37875>>>
37875>>>            Case Else // must be nfUndefined
37875>>>                // This may be the start of a drilldown query or this may be used for some kind of custom query.
37875>>>                // If Row select does main-zoom we don't need this
37875>>>                WebSet pbRender of oDetailButton to False
37876>>>
37876>>>        Case End
37876>>>
37876>>>    End_Procedure
37877>>>
37877>>>
37877>>>End_Object 
37878>    Use SelectStudent.wo
Including file: SelectStudent.wo    (C:\Users\Usuario\Documents\GitHub\Trabajo_SchoolHouse_Repository\WorkspaceSchoolStudent\AppSrc\SelectStudent.wo)
37878>>>// C:\Users\Usuario\Desktop\Trabajo Jaime\Trabajos\WorkspaceSchoolStudent\AppSrc\SelectStudent.wo
37878>>>// SelectStudent
37878>>>//
37878>>>
37878>>>Use cWebView.pkg
37878>>>Use cWebList.pkg
37878>>>Use cWebMenuGroup.pkg
37878>>>Use cWebMenuItem.pkg
37878>>>Use cWebColumnButton.pkg
37878>>>Use cWebColumn.pkg
37878>>>Use ZoomStudent.wo
37878>>>
37878>>>Use cschoolhouseDataDictionary.dd
37878>>>Use cstudentDataDictionary.dd
37878>>>
37878>>>Object oSelectStudent is a cWebView
37880>>>    Set psCaption to "SelectStudent"
37881>>>    Set peWebViewStyle to wvsDrilldown
37882>>>    Set peViewType to vtSelect
37883>>>    Set piColumnCount to 12
37884>>>    Set pbShowCaption to False
37885>>>    Set piMaxWidth to 1024
37886>>>
37886>>>    Object oschoolhouse_DD is a cschoolhouseDataDictionary
37888>>>    End_Object 
37889>>>
37889>>>    Object ostudent_DD is a cstudentDataDictionary
37891>>>        Set DDO_Server To oschoolhouse_DD
37892>>>    End_Object 
37893>>>
37893>>>    Set Main_DD To ostudent_DD
37894>>>    Set Server  To ostudent_DD
37895>>>
37895>>>
37895>>>    Object oList is a cWebList
37897>>>        Set piColumnSpan to 0
37898>>>        Set psCSSClass to "MobileList"
37899>>>        Set pbServerOnRowClick to True
37900>>>        Set pbFillHeight to True
37901>>>        Set pbShowHeader to False
37902>>>        Set piSortColumn to 0
37903>>>
37903>>>        Object ostudentID is a cWebColumn
37905>>>            Entry_Item student.ID
37906>>>            Set psCaption to "student.ID"
37907>>>            Set piWidth to 100
37908>>>        End_Object 
37909>>>
37909>>>        Object ostudentName is a cWebColumn
37911>>>            Entry_Item student.Name
37912>>>            Set psCaption to "student.Name"
37913>>>            Set piWidth to 1201
37914>>>        End_Object 
37915>>>
37915>>>        Object ostudentLastName is a cWebColumn
37917>>>            Entry_Item student.LastName
37918>>>            Set psCaption to "student.LastName"
37919>>>            Set piWidth to 1201
37920>>>        End_Object 
37921>>>
37921>>>        Object ostudentCity is a cWebColumn
37923>>>            Entry_Item student.City
37924>>>            Set psCaption to "student.City"
37925>>>            Set piWidth to 1000
37926>>>        End_Object 
37927>>>
37927>>>        Object oschoolhouseName is a cWebColumn
37929>>>            Entry_Item schoolhouse.Name
37930>>>            Set psCaption to "schoolhouse.Name"
37931>>>            Set piWidth to 1000
37932>>>        End_Object 
37933>>>
37933>>>        Object oDetailButton is a cWebColumnButton
37935>>>            Set psCaption to "btn"
37936>>>            Set piWidth to 45
37937>>>            Set pbFixedWidth to True
37938>>>            Set pbResizable to False
37939>>>            Set piListRowSpan to 1
37940>>>            Set psBtnCssClass to "WebButtonIcon WebIcon_Info"
37941>>>            Set peAlign to alignRight
37942>>>
37942>>>            WebRegisterPath ntNavigateForward oZoomStudent
37948>>>
37948>>>            Procedure OnClick
37951>>>                Send NavigatePath
37952>>>            End_Procedure
37953>>>
37953>>>            Procedure OnGetNavigateForwardData tWebNavigateData ByRef NavigateData Handle hoToView
37956>>>                Move True to NavigateData.bReadOnly
37957>>>            End_Procedure
37958>>>
37958>>>        End_Object 
37959>>>
37959>>>        WebRegisterPath ntNavigateForward oZoomStudent
37965>>>
37965>>>        Procedure OnRowClick String sRowId
37968>>>            tWebNavigateData NavigateData
37968>>>            tWebNavigateData NavigateData
37968>>>            Get GetNavigateData to NavigateData
37969>>>
37969>>>            Case Begin
37969>>>                Case (NavigateData.eNavigateType = nfFromParent)
37971>>>                    Send NavigateForward of oZoomStudent Self
37972>>>                    Case Break
37973>>>
37973>>>                Case (NavigateData.eNavigateType = nfFromChild)
37976>>>                    Send NavigateClose Self
37977>>>                    Case Break
37978>>>
37978>>>                Case (NavigateData.eNavigateType = nfFromMain)
37981>>>                    Send NavigateClose Self
37982>>>                    Case Break
37983>>>
37983>>>                Case Else // must be nfUndefined
37983>>>                    Send NavigateForward of oZoomStudent Self
37984>>>
37984>>>            Case End
37984>>>        End_Procedure
37985>>>
37985>>>        Procedure OnGetNavigateForwardData tWebNavigateData ByRef NavigateData Handle hoToView
37988>>>            Move True to NavigateData.bReadOnly
37989>>>        End_Procedure
37990>>>
37990>>>    End_Object 
37991>>>
37991>>>    Object oActionGroup is a cWebMenuGroup
37993>>>
37993>>>        Object oSearch is a cWebMenuItem
37995>>>            Set psCSSClass to "WebPromptMenuItem"
37996>>>            Set psCaption to "Search"
37997>>>
37997>>>            Procedure OnClick
38000>>>                Send Search of oList
38001>>>            End_Procedure
38002>>>
38002>>>        End_Object 
38003>>>
38003>>>        Object oNewButton is a cWebMenuItem
38005>>>            Set psCSSClass to "WebClearMenuItem"
38006>>>            Set psCaption to "New"
38007>>>
38007>>>            WebRegisterPath ntNavigateForward oZoomStudent
38013>>>
38013>>>            Procedure OnClick
38016>>>                Send NavigatePath
38017>>>            End_Procedure
38018>>>
38018>>>            Procedure OnGetNavigateForwardData tWebNavigateData ByRef NavigateData Handle hoToView
38021>>>                Move True to NavigateData.bNewRecord
38022>>>            End_Procedure
38023>>>
38023>>>        End_Object 
38024>>>    End_Object 
38025>>>
38025>>>    Procedure OnNavigateForward tWebNavigateData NavigateData Integer hoInvokingView Integer hoInvokingObject
38028>>>        WebSet pbRender of oNewButton to True
38029>>>        WebSet pbRender of oDetailButton to True
38030>>>
38030>>>        Case Begin
38030>>>            Case (NavigateData.eNavigateType = nfFromParent)
38032>>>                // If from parent, this is a constrained drill down
38032>>>                // If Row select does main-zoom we don't need this
38032>>>                WebSet pbRender of oDetailButton to False
38033>>>                Case Break
38034>>>
38034>>>            Case (NavigateData.eNavigateType = nfFromChild)
38037>>>                // If from child, this is a probably a parent lookup from a Zoom
38037>>>                Case Break
38038>>>
38038>>>            Case (NavigateData.eNavigateType = nfFromMain)
38041>>>                // If from main, this is a probably a main-file lookup from a Zoom
38041>>>                WebSet pbRender of oDetailButton to False
38042>>>                Case Break
38043>>>
38043>>>            Case Else // must be nfUndefined
38043>>>                // This may be the start of a drilldown query or this may be used for some kind of custom query.
38043>>>                // If Row select does main-zoom we don't need this
38043>>>                WebSet pbRender of oDetailButton to False
38044>>>
38044>>>        Case End
38044>>>
38044>>>    End_Procedure
38045>>>
38045>>>
38045>>>End_Object 
38046>    Use SchoolHouse.wo
Including file: SchoolHouse.wo    (C:\Users\Usuario\Documents\GitHub\Trabajo_SchoolHouse_Repository\WorkspaceSchoolStudent\AppSrc\SchoolHouse.wo)
38046>>>Use cWebHttpHandler.pkg
38046>>>Use cJsonObject.pkg
38046>>>Use cschoolhouseDataDictionary.dd
38046>>>
38046>>>
38046>>>//url para consulta GET: http://localhost/WorkspaceSchoolStudent/SchoolHouseList
38046>>>//url para consulta POST: http://localhost/WorkspaceSchoolStudent/SchoolHouseList/new
38046>>>
38046>>>//  With the cWebHttpHandler you handle complete HTTP requests.
38046>>>Object oListSchool is a cWebHttpHandler
38048>>>    Object oSchoolHouse_DD is a cschoolhouseDataDictionary    
38050>>>    End_Object
38051>>>    
38051>>>    Set Main_DD to oSchoolHouse_DD
38052>>>    
38052>>>    //  The psPath property determines the path in the URL for which requests will be handled.
38052>>>    Set psPath to "SchoolHouseList"
38053>>>    //  Use psVerbs to filter based on the HTTP Verbs. 
38053>>>    Set psVerbs to "GET, POST"
38054>>>
38054>>>    Procedure OnHttpGet String sPath String sAcceptType
38057>>>        String[] aPath
38058>>>        
38058>>>        Get StrSplitToArray sPath "/" to aPath
38059>>>        
38059>>>        If (SizeOfArray(aPath) < 1) Begin
38061>>>            Send SchoolHouseList 
38062>>>            Procedure_Return
38063>>>        End
38063>>>>
38063>>>        
38063>>>        //------------------------Redirige a una operación específica según la ruta
38063>>>        //  Redirect to a specific operation based on the path
38063>>>        If ((aPath[0]) = "") Begin
38065>>>            If (SizeOfArray(aPath) = 2 and aPath[1] > 0) Begin
38067>>>                Send ScoolHouse aPath[1]
38068>>>            End
38068>>>>
38068>>>            Else Begin
38069>>>                Send SchoolHouseList
38070>>>            End
38070>>>>
38070>>>        End
38070>>>>
38070>>>        Else Begin
38071>>>            Send SetResponseStatus 404 "Unknown resource" 
38072>>>        End
38072>>>>
38072>>>    End_Procedure
38073>>>    
38073>>>//------------------------------------------Procedimiento para listar todos los colegios
38073>>>    Procedure SchoolHouseList
38076>>>        Handle hoJson hoSchoolHouse
38076>>>        
38076>>>        Get Create (RefClass(cJsonObject)) to hoJson
38077>>>        Send InitializeJsonType of hoJson jsonTypeArray
38078>>>        
38078>>>        Get Create (RefClass(cJsonObject)) to hoSchoolHouse
38079>>>        
38079>>>        Send Find of oSchoolHouse_DD FIRST_RECORD 1
38080>>>        While (Found)
38084>>>            Send InitializeJsonType of hoSchoolHouse jsonTypeObject
38085>>>            
38085>>>            Send SetMemberValue of hoSchoolHouse "Number" jsonTypeInteger schoolhouse.ID
38086>>>            Send SetMemberValue of hoSchoolHouse "Name" jsonTypeString (Trim(schoolhouse.Name))
38087>>>            Send SetMemberValue of hoSchoolHouse "City" jsonTypeString (Trim(schoolhouse.City))
38088>>>            
38088>>>            Send AddMember of hoJson hoSchoolHouse
38089>>>            
38089>>>            Send Find of oSchoolHouse_DD NEXT_RECORD 1
38090>>>        Loop
38091>>>>
38091>>>        
38091>>>        Send OutputJson hoJson
38092>>>        
38092>>>        Send Destroy of hoSchoolHouse
38093>>>        Send Destroy of hoJson
38094>>>    End_Procedure
38095>>>    
38095>>>//-----------------------------------------Procedimiento para enviar los detalles de un solo colegio    
38095>>>    Procedure ScoolHouse String sKey
38098>>>        Handle hoJson
38098>>>        
38098>>>        Send Clear of oSchoolHouse_DD
38099>>>        Move sKey to schoolhouse.ID
38100>>>        Send Find of oSchoolHouse_DD EQ 1
38101>>>        
38101>>>        If (Found) Begin
38103>>>            Get Create (RefClass(cJsonObject)) to hoJson
38104>>>            Send InitializeJsonType of hoJson jsonTypeObject
38105>>>            
38105>>>            Send SetMemberValue of hoJson "Number" jsonTypeInteger schoolhouse.ID
38106>>>            Send SetMemberValue of hoJson "Name" jsonTypeString (Trim(schoolhouse.Name))
38107>>>            Send SetMemberValue of hoJson "Address" jsonTypeString (Trim(schoolhouse.Address))
38108>>>            Send SetMemberValue of hoJson "County" jsonTypeString (Trim(schoolhouse.County))
38109>>>            Send SetMemberValue of hoJson "City" jsonTypeString (Trim(schoolhouse.City))
38110>>>            Send SetMemberValue of hoJson "ZipCode" jsonTypeString (Trim(schoolhouse.ZipCode))
38111>>>            Send SetMemberValue of hoJson "Email" jsonTypeString (Trim(schoolhouse.Email))
38112>>>            Send SetMemberValue of hoJson "Notes" jsonTypeString (Trim(schoolhouse.Notes))
38113>>>            Send SetMemberValue of hoJson "CreatedTime" jsonTypeString schoolhouse.CreatedTime
38114>>>            Send SetMemberValue of hoJson "ModifiedTime" jsonTypeString schoolhouse.ModifiedTime
38115>>>            
38115>>>            Send OutputJson hoJson
38116>>>            Send Destroy of hoJson
38117>>>        End
38117>>>>
38117>>>        Else Begin
38118>>>            Send SetResponseStatus 404 "Resource not found"
38119>>>        End
38119>>>>
38119>>>    End_Procedure
38120>>>    
38120>>>    
38120>>>
38120>>>    Procedure OnHttpPost String sPath String sContentType String sAcceptType DWord iSize
38123>>>        Forward Send OnHttpPost sPath sContentType sAcceptType iSize
38125>>>        
38125>>>        String[] aPath
38126>>>        
38126>>>        //-----------------Divide el camino en partes
38126>>>        //  Split the path into parts
38126>>>        Get StrSplitToArray sPath "/" to aPath
38127>>>        If (SizeOfArray(aPath) < 2) Begin
38129>>>            Send SetResponseStatus 404 "Invalid resource" 
38130>>>            Procedure_Return
38131>>>        End
38131>>>>
38131>>>        
38131>>>        //-----------------------Redirige a una operación específica según la ruta
38131>>>        //  Redirect to a specific operation based on the path
38131>>>        If (Lowercase(aPath[1]) = "new") Begin
38133>>>            If (SizeOfArray(aPath) > 2 and aPath[2] <> "") Begin
38135>>>                Send SetResponseStatus 400 "Only use POST for creating new resources"
38136>>>            End
38136>>>>
38136>>>            Else Begin
38137>>>                Send SaveSchoolHouse True ""
38138>>>            End
38138>>>>
38138>>>        End
38138>>>>
38138>>>        Else Begin
38139>>>            Send SetResponseStatus 404 "Unknown resource"
38140>>>        End        
38140>>>>
38140>>>    End_Procedure
38141>>>    
38141>>>    
38141>>>    Procedure SaveSchoolHouse Boolean bCreate String sKey
38144>>>        Handle hoJson
38144>>>        Boolean bSuccess bVal bErr
38144>>>        String sVal
38144>>>        
38144>>>        //-----------------------Encuentra el registro correcto
38144>>>        //  Find the right record
38144>>>        If (bCreate) Begin
38146>>>            Send Clear of oSchoolHouse_DD
38147>>>        End
38147>>>>
38147>>>        Else Begin
38148>>>            Send Clear of oSchoolHouse_DD
38149>>>            Move sKey to schoolhouse.ID
38150>>>            Send Find of oSchoolHouse_DD EQ 1
38151>>>            
38151>>>            If (not(Found)) Begin
38153>>>                Send SetResponseStatus 404 "Resource not found"
38154>>>                Procedure_Return
38155>>>            End
38155>>>>
38155>>>        End
38155>>>>
38155>>>        
38155>>>        //-----------------------Lee los datos de la solicitud
38155>>>        //  Read the request data
38155>>>        Get RequestDataJson (&hoJson) to bSuccess
38156>>>        
38156>>>        If (bSuccess) Begin
38158>>>            Send ErrorQueueStart
38159>>>            
38159>>>            //  Almacena los valores en la variable sVal que se guardarán en la BBDD
38159>>>            If (HasMember(hoJson, "Name")) Begin
38161>>>                Get MemberValue of hoJson "Name" to sVal
38162>>>                Set Field_Changed_Value of oSchoolHouse_DD (RefTable(schoolhouse.Name)) to sVal
38163>>>            End
38163>>>>
38163>>>            
38163>>>            If (HasMember(hoJson, "Address")) Begin
38165>>>                Get MemberValue of hoJson "Address" to sVal
38166>>>                Set Field_Changed_Value of oSchoolHouse_DD (RefTable(schoolhouse.Address)) to sVal
38167>>>            End
38167>>>>
38167>>>            
38167>>>            If (HasMember(hoJson, "City")) Begin
38169>>>                Get MemberValue of hoJson "City" to sVal
38170>>>                Set Field_Changed_Value of oSchoolHouse_DD (RefTable(schoolhouse.City)) to sVal
38171>>>            End
38171>>>>
38171>>>            
38171>>>            If (HasMember(hoJson, "County")) Begin
38173>>>                Get MemberValue of hoJson "County" to sVal
38174>>>                Set Field_Changed_Value of oSchoolHouse_DD (RefTable(schoolhouse.County)) to sVal
38175>>>            End
38175>>>>
38175>>>            
38175>>>            If (HasMember(hoJson, "ZipCode")) Begin
38177>>>                Get MemberValue of hoJson "ZipCode" to sVal
38178>>>                Set Field_Changed_Value of oSchoolHouse_DD (RefTable(schoolhouse.ZipCode)) to sVal
38179>>>            End
38179>>>>
38179>>>            
38179>>>            If (HasMember(hoJson, "Email")) Begin
38181>>>                Get MemberValue of hoJson "Email" to sVal
38182>>>                Set Field_Changed_Value of oSchoolHouse_DD (RefTable(schoolhouse.Email)) to sVal
38183>>>            End
38183>>>>
38183>>>            
38183>>>            If (HasMember(hoJson, "Notes")) Begin
38185>>>                Get MemberValue of hoJson "Notes" to sVal
38186>>>                Set Field_Changed_Value of oSchoolHouse_DD (RefTable(schoolhouse.Notes)) to sVal
38187>>>            End
38187>>>>
38187>>>            
38187>>>            //------------------Realiza el guardado de los datos
38187>>>            //  Perform the save
38187>>>            If (ErrorCount(Self) = 0) Begin
38189>>>                Get Request_Validate of oSchoolHouse_DD to bErr
38190>>>                If (not(bErr)) Begin
38192>>>                   Send Request_Save of oSchoolHouse_DD     
38193>>>                   
38193>>>                   If (not(Err)) Begin
38195>>>                        Send ScoolHouse schoolhouse.ID
38196>>>                   End
38196>>>>
38196>>>                End
38196>>>>
38196>>>            End            
38196>>>>
38196>>>            
38196>>>            Send ErrorQueueEnd
38197>>>            Send ErrorReportJson
38198>>>        End
38198>>>>
38198>>>        
38198>>>        If (hoJson > 0) Begin
38200>>>            Send Destroy of hoJson
38201>>>        End
38201>>>>
38201>>>    End_Procedure
38202>>>
38202>>>//-------------Función auxiliar que genera una respuesta basada en un objeto JSON
38202>>>    //  Helper function that generates a response based on a JSON object.
38202>>>    Procedure OutputJson Handle hoJson
38205>>>        UChar[] ucData
38206>>>        
38206>>>        Send AddHttpResponseHeader "Content-Type" "application/json"
38207>>>        Get StringifyUtf8 of hoJson to ucData
38208>>>        Send OutputUChar ucData
38209>>>    End_Procedure
38210>>>
38210>>>
38210>>>//---------------------Función auxiliar que lee una solicitud completa en un objeto JSON.
38210>>>//  Helper function that reads an entire request into a JSON object.
38210>>>    Function RequestDataJson Handle ByRef hoJson Returns Boolean
38213>>>        UChar[] ucData
38214>>>        Boolean bSuccess
38214>>>        String sErr
38214>>>        
38214>>>        Get Create (RefClass(cJsonObject)) to hoJson
38215>>>        
38215>>>        Get RequestDataUChar -1 to ucData
38216>>>        Get ParseUtf8 of hoJson ucData to bSuccess
38217>>>        
38217>>>        If (not(bSuccess)) Begin
38219>>>            Get psParseError of hoJson to sErr
38220>>>            Send SetResponseStatus 400 sErr
38221>>>        End
38221>>>>
38221>>>        
38221>>>        Function_Return bSuccess
38222>>>    End_Function
38223>>>    
38223>>>    
38223>>>//-----------------------Función auxiliar que informa todos los errores en la cola de errores en formato JSON
38223>>>//  Helper function that reports all errors on the error queue in JSON format.
38223>>>    Procedure ErrorReportJson
38226>>>        Integer iErr iErrC
38226>>>        Handle hoJson hoErrors   
38226>>>        String sMessage
38226>>>        
38226>>>        Get ErrorCount to iErrC
38227>>>        If (iErrC > 0) Begin
38229>>>            Send SetResponseStatus 400 "Errors occurred"
38230>>>            
38230>>>            Get Create (RefClass(cJsonObject)) to hoJson
38231>>>            Send InitializeJsonType of hoJson jsonTypeObject
38232>>>            
38232>>>            Get Create (RefClass(cJsonObject)) to hoErrors
38233>>>            Send InitializeJsonType of hoErrors jsonTypeArray
38234>>>            
38234>>>            For iErr from 0 to (iErrC - 1)
38240>>>>
38240>>>                Get ErrorMessage iErr to sMessage
38241>>>                Send AddMemberValue of hoErrors jsonTypeString  sMessage
38242>>>            Loop
38243>>>>
38243>>>            
38243>>>            Send SetMember of hoJson "aErrors" hoErrors
38244>>>            
38244>>>            Send OutputJson hoJson
38245>>>            
38245>>>            Send Destroy of hoErrors
38246>>>            Send Destroy of hoJson
38247>>>        End
38247>>>>
38247>>>    End_Procedure
38248>>>End_Object
38249>    Use CheckProject.wo
Including file: CheckProject.wo    (C:\Users\Usuario\Documents\GitHub\Trabajo_SchoolHouse_Repository\WorkspaceSchoolStudent\AppSrc\CheckProject.wo)
38249>>>Use cWebHttpHandler.pkg
38249>>>
38249>>>//  With the cWebHttpHandler you handle complete HTTP requests.
38249>>>Object oCheckProject is a cWebHttpHandler
38251>>>    
38251>>>    //  The psPath property determines the path in the URL for which requests will be handled.
38251>>>    Set psPath to "CheckAlive"
38252>>>    //  Use psVerbs to filter based on the HTTP Verbs. 
38252>>>    Set psVerbs to "Get"
38253>>>    
38253>>>    Procedure OnHttpGet String sPath String sAcceptType
38256>>>        Forward Send OnHttpGet sPath sAcceptType
38258>>>        Handle hoJsonResponse
38258>>>        UChar[] ucData
38259>>>        
38259>>>        Get Create (RefClass(cJsonObject)) to hoJsonResponse
38260>>>        Send InitializeJsonType of hoJsonResponse jsonTypeObject
38261>>>        
38261>>>        Send SetMemberValue of hoJsonResponse "Status" jsonTypeString "Activo"
38262>>>        
38262>>>        Send AddHttpResponseHeader of hoJsonResponse "Content-type" "application/json"
38263>>>        
38263>>>        Get StringifyUtf8 of hoJsonResponse to ucData
38264>>>        
38264>>>        Send Destroy of hoJsonResponse
38265>>>        
38265>>>        Send OutputUChar ucData
38266>>>    End_Procedure
38267>>>    
38267>>>End_Object
38268>    Use Student.wo
Including file: Student.wo    (C:\Users\Usuario\Documents\GitHub\Trabajo_SchoolHouse_Repository\WorkspaceSchoolStudent\AppSrc\Student.wo)
38268>>>Use cWebHttpHandler.pkg
38268>>>Use cstudentDataDictionary.dd
38268>>>Use cschoolhouseDataDictionary.dd
38268>>>
38268>>>//  With the cWebHttpHandler you handle complete HTTP requests.
38268>>>Object oStudent is a cWebHttpHandler
38270>>>    Object oschoolhouse_DD is a cschoolhouseDataDictionary
38272>>>    End_Object 
38273>>>
38273>>>    Object ostudent_DD is a cstudentDataDictionary
38275>>>        Set DDO_Server to oschoolhouse_DD
38276>>>    End_Object 
38277>>>
38277>>>    Set Main_DD to ostudent_DD
38278>>>    //  The psPath property determines the path in the URL for which requests will be handled.
38278>>>    Set psPath to "Studentlist"
38279>>>    //  Use psVerbs to filter based on the HTTP Verbs. 
38279>>>    Set psVerbs to "GET,POST"
38280>>>    
38280>>>    Procedure OnHttpGet String sPath String sAcceptType
38283>>>        String[] aPath
38284>>>        Integer iStucent
38284>>>        
38284>>>        //  Split the path into parts
38284>>>        Get StrSplitToArray sPath "/" to aPath
38285>>>        If (SizeOfArray(aPath) < 1) Begin
38287>>>            Send StudentList
38288>>>            Procedure_Return
38289>>>        End
38289>>>>
38289>>>        
38289>>>        //  Redirect to a specific operation based on the path
38289>>>        If ((aPath[0]) = "") Begin
38291>>>            If (SizeOfArray(aPath) = 2 and (Integer(aPath[1]) > 0)) Begin
38293>>>                Send StudentInfo aPath[1]
38294>>>            End
38294>>>>
38294>>>            Else Begin
38295>>>                Send StudentList
38296>>>            End
38296>>>>
38296>>>        End
38296>>>>
38296>>>        Else Begin
38297>>>            Send SetResponseStatus 404 "Unknown resource" 
38298>>>        End
38298>>>>
38298>>>    End_Procedure
38299>>>    //------------------------
38299>>>    //  Generate and output JSON for a single customer.
38299>>>    Procedure StudentInfo String sKey
38302>>>        Handle hoJson
38302>>>        
38302>>>        Send Clear of ostudent_DD
38303>>>        Move sKey to student.ID
38304>>>        Send Find of ostudent_DD EQ 1
38305>>>        
38305>>>        If (Found) Begin
38307>>>            Get Create (RefClass(cJsonObject)) to hoJson
38308>>>            Send InitializeJsonType of hoJson jsonTypeObject
38309>>>            
38309>>>            Send SetMemberValue of hoJson "ID"                  jsonTypeInteger student.ID
38310>>>            Send SetMemberValue of hoJson "Name"                jsonTypeString (Trim(student.Name))
38311>>>            Send SetMemberValue of hoJson "LastName"            jsonTypeString (Trim(student.LastName))
38312>>>            Send SetMemberValue of hoJson "DNI"                 jsonTypeString (Trim(student.DNI))
38313>>>            Send SetMemberValue of hoJson "Email"               jsonTypeString (Trim(student.Email))
38314>>>            Send SetMemberValue of hoJson "County"              jsonTypeString (Trim(student.County))
38315>>>            Send SetMemberValue of hoJson "City"                jsonTypeString (Trim(student.City))
38316>>>            Send SetMemberValue of hoJson "Address"             jsonTypeString student.Address
38317>>>            Send SetMemberValue of hoJson "Birthday"            jsonTypeString student.Birthday
38318>>>            Send SetMemberValue of hoJson "SchoolHouseID"       jsonTypeString schoolhouse.ID
38319>>>            Send SetMemberValue of hoJson "Notes"               jsonTypeString student.Notes
38320>>>            
38320>>>            Send OutputJson hoJson
38321>>>            Send Destroy of hoJson
38322>>>        End
38322>>>>
38322>>>        Else Begin
38323>>>            Send SetResponseStatus 404 "Resource not found"
38324>>>        End
38324>>>>
38324>>>    End_Procedure
38325>>>    //------------------------
38325>>>    //  Helper function that generates a response based on a JSON object.
38325>>>    Procedure OutputJson Handle hoJson
38328>>>        UChar[] ucData
38329>>>        
38329>>>        Send AddHttpResponseHeader "Content-Type" "application/json"
38330>>>        Get StringifyUtf8 of hoJson to ucData
38331>>>        Send OutputUChar ucData
38332>>>    End_Procedure
38333>>>    //------------------------
38333>>>    //  Generate and output JSON with a list of all customers
38333>>>    Procedure StudentList
38336>>>        Handle hoJson
38336>>>        Handle hoStudent
38336>>>        
38336>>>        Get Create (RefClass(cJsonObject)) to hoJson
38337>>>        Send InitializeJsonType of hoJson jsonTypeArray
38338>>>        
38338>>>        Get Create (RefClass(cJsonObject)) to hoStudent
38339>>>        
38339>>>        Send Find of ostudent_DD FIRST_RECORD 1
38340>>>        While (Found)
38344>>>            Send InitializeJsonType of hoStudent jsonTypeObject
38345>>>            
38345>>>            Send SetMemberValue of hoStudent "ID"                   jsonTypeInteger student.ID
38346>>>            Send SetMemberValue of hoStudent "Name"                 jsonTypeString (Trim(student.Name))
38347>>>            Send SetMemberValue of hoStudent "LastName"             jsonTypeString (Trim(student.LastName))
38348>>>            Send SetMemberValue of hoStudent "DNI"                  jsonTypeString (Trim(student.DNI))
38349>>>            Send SetMemberValue of hoStudent "SchoolHouse Name"     jsonTypeString (Trim(schoolhouse.Name))
38350>>>            
38350>>>            Send AddMember of hoJson hoStudent
38351>>>            
38351>>>            Send Find of ostudent_DD NEXT_RECORD 1
38352>>>        Loop
38353>>>>
38353>>>        
38353>>>        Send OutputJson hoJson
38354>>>        
38354>>>        Send Destroy of hoStudent
38355>>>        Send Destroy of hoJson
38356>>>    End_Procedure
38357>>>    //------------------------
38357>>>        Procedure OnHttpPost String sPath String sContentType String sAcceptType Integer iSize
38360>>>        String[] aPath
38361>>>        
38361>>>        //  Split the path into parts
38361>>>        Get StrSplitToArray sPath "/" to aPath
38362>>>        If (SizeOfArray(aPath) < 1) Begin
38364>>>            Send SetResponseStatus 404 "Invalid resource" 
38365>>>            Procedure_Return
38366>>>        End
38366>>>>
38366>>>        
38366>>>        //  Redirect to a specific operation based on the path
38366>>>        If (Lowercase(aPath[0]) = "") Begin
38368>>>            If (SizeOfArray(aPath) = 2 and ((aPath[1]) = "new")) Begin
38370>>>                Send SaveStudent True ""
38371>>>            End
38371>>>>
38371>>>            Else Begin
38372>>>                Send SetResponseStatus 400 "Only use POST for creating new resources"
38373>>>            End
38373>>>>
38373>>>        End
38373>>>>
38373>>>        Else Begin
38374>>>            Send SetResponseStatus 404 "Unknown resource"
38375>>>        End
38375>>>>
38375>>>    End_Procedure
38376>>>    //------------------------
38376>>>    //  Saves an existing customer based on the data posted
38376>>>    Procedure SaveStudent Boolean bCreate String sKey
38379>>>        Handle hoJson
38379>>>        Boolean bSuccess
38379>>>        String sVal
38379>>>        Boolean bVal bErr
38379>>>        
38379>>>        //  Find the right record
38379>>>        If (bCreate) Begin
38381>>>            Send Clear of ostudent_DD
38382>>>        End
38382>>>>
38382>>>        Else Begin
38383>>>            Send Clear of ostudent_DD
38384>>>            Move sKey to student.ID
38385>>>            Send Find of ostudent_DD EQ 1
38386>>>            
38386>>>            If (not(Found)) Begin
38388>>>                Send SetResponseStatus 404 "Resource not found"
38389>>>                Procedure_Return
38390>>>            End
38390>>>>
38390>>>        End
38390>>>>
38390>>>        
38390>>>        //  Read the request data
38390>>>        Get RequestDataJson (&hoJson) to bSuccess
38391>>>        
38391>>>        If (bSuccess) Begin
38393>>>            Send ErrorQueueStart
38394>>>            
38394>>>            //  Set the values
38394>>>            If (HasMember(hoJson, "Name")) Begin
38396>>>                Get MemberValue of hoJson "Name" to sVal
38397>>>                Set Field_Changed_Value of ostudent_DD (RefTable(student.Name)) to sVal
38398>>>            End
38398>>>>
38398>>>            If (HasMember(hoJson, "LastName")) Begin
38400>>>                Get MemberValue of hoJson "LastName" to sVal
38401>>>                Set Field_Changed_Value of ostudent_DD (RefTable(student.LastName)) to sVal
38402>>>            End
38402>>>>
38402>>>            If (HasMember(hoJson, "DNI")) Begin
38404>>>                Get MemberValue of hoJson "DNI" to sVal
38405>>>                Set Field_Changed_Value of ostudent_DD (RefTable(student.DNI)) to sVal
38406>>>            End
38406>>>>
38406>>>            If (HasMember(hoJson, "County")) Begin
38408>>>                Get MemberValue of hoJson "County" to sVal
38409>>>                Set Field_Changed_Value of ostudent_DD (RefTable(student.County)) to sVal
38410>>>            End
38410>>>>
38410>>>            
38410>>>            If (HasMember(hoJson, "Email")) Begin
38412>>>                Get MemberValue of hoJson "Email" to sVal
38413>>>                Set Field_Changed_Value of ostudent_DD (RefTable(student.Email)) to sVal
38414>>>            End
38414>>>>
38414>>>            
38414>>>            If (HasMember(hoJson, "City")) Begin
38416>>>                Get MemberValue of hoJson "City" to sVal
38417>>>                Set Field_Changed_Value of ostudent_DD (RefTable(student.City)) to sVal
38418>>>            End
38418>>>>
38418>>>            
38418>>>            If (HasMember(hoJson, "Address")) Begin
38420>>>                Get MemberValue of hoJson "Address" to sVal
38421>>>                Set Field_Changed_Value of ostudent_DD (RefTable(student.Address)) to sVal
38422>>>            End
38422>>>>
38422>>>            
38422>>>            If (HasMember(hoJson, "SchoolHouseID")) Begin
38424>>>                Get MemberValue of hoJson "SchoolHouseID" to sVal
38425>>>                Send Clear of oschoolhouse_DD
38426>>>                Move sVal to schoolhouse.ID
38427>>>                Send Find of oschoolhouse_DD EQ 1
38428>>>            End
38428>>>>
38428>>>            
38428>>>            If (HasMember(hoJson, "Notes")) Begin
38430>>>                Get MemberValue of hoJson "Notes" to sVal
38431>>>                Set Field_Changed_Value of ostudent_DD (RefTable(student.Notes)) to sVal
38432>>>            End
38432>>>>
38432>>>            
38432>>>            //  Perform the save
38432>>>            If (ErrorCount(Self) = 0) Begin
38434>>>                Get Request_Validate of ostudent_DD to bErr
38435>>>                If (not(bErr)) Begin
38437>>>                   Send Request_Save of ostudent_DD
38438>>>                   
38438>>>                   If (not(Err)) Begin
38440>>>                        Send StudentInfo student.ID
38441>>>                   End
38441>>>>
38441>>>                End
38441>>>>
38441>>>                Else Begin
38442>>>                    Send SetResponseStatus 404 "Invalid resource" 
38443>>>                End
38443>>>>
38443>>>            End            
38443>>>>
38443>>>            
38443>>>            Send ErrorQueueEnd
38444>>>            Send ErrorReportJson
38445>>>        End
38445>>>>
38445>>>        
38445>>>        If (hoJson > 0) Begin
38447>>>            Send Destroy of hoJson
38448>>>        End
38448>>>>
38448>>>    End_Procedure
38449>>>    //  Helper function that reads an entire request into a JSON object.
38449>>>    Function RequestDataJson Handle ByRef hoJson Returns Boolean
38452>>>        UChar[] ucData
38453>>>        Boolean bSuccess
38453>>>        String sErr
38453>>>        
38453>>>        Get Create (RefClass(cJsonObject)) to hoJson
38454>>>        
38454>>>        Get RequestDataUChar -1 to ucData
38455>>>        Get ParseUtf8 of hoJson ucData to bSuccess
38456>>>        
38456>>>        If (not(bSuccess)) Begin
38458>>>            Get psParseError of hoJson to sErr
38459>>>            Send SetResponseStatus 400 sErr
38460>>>        End
38460>>>>
38460>>>        
38460>>>        Function_Return bSuccess
38461>>>    End_Function
38462>>>    //  Helper function that reports all errors on the error queue in JSON format.
38462>>>    Procedure ErrorReportJson
38465>>>        Integer iErr iErrC
38465>>>        Handle hoJson hoErrors   
38465>>>        String sMessage
38465>>>        
38465>>>        Get ErrorCount to iErrC
38466>>>        If (iErrC > 0) Begin
38468>>>            Send SetResponseStatus 400 "Errors occurred"
38469>>>            
38469>>>            Get Create (RefClass(cJsonObject)) to hoJson
38470>>>            Send InitializeJsonType of hoJson jsonTypeObject
38471>>>            
38471>>>            Get Create (RefClass(cJsonObject)) to hoErrors
38472>>>            Send InitializeJsonType of hoErrors jsonTypeArray
38473>>>            
38473>>>            For iErr from 0 to (iErrC - 1)
38479>>>>
38479>>>                Get ErrorMessage iErr to sMessage
38480>>>                Send AddMemberValue of hoErrors jsonTypeString  sMessage
38481>>>            Loop
38482>>>>
38482>>>            
38482>>>            Send SetMember of hoJson "aErrors" hoErrors
38483>>>            
38483>>>            Send OutputJson hoJson
38484>>>            
38484>>>            Send Destroy of hoErrors
38485>>>            Send Destroy of hoJson
38486>>>        End
38486>>>>
38486>>>    End_Procedure
38487>>>    
38487>>>End_Object
38488>    Set phoDefaultView to oDashboard
38489>
38489>End_Object
38490>
38490>Send StartWebApp of oWebApp
38491>
Summary
Memory Available: 51756953600
Total Warnings : 0
Total Errors   : 0
Total Symbols  : 25548
Total Resources: 0
Total Commands : 38490
Total Windows  : 0
Total Pages    : 0
Static Data    : 475301
Message area   : 258600
Total Blocks   : 17146
