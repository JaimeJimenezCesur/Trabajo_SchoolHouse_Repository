Compiling Program: C:\Users\Usuario\Desktop\Trabajo Jaime\Trabajos\WorkspaceSchoolStudent\AppSrc\WebApp.src
Memory Available: 55072735232
1>Use AllWebAppClasses.pkg
Using pre-compiled package ALLWEBAPPCLASSES.PKG
Including file: AllWebAppClasses.x64.pkd    (C:\Program Files\DataFlex 24.0\Pkg\AllWebAppClasses.x64.pkd)
36015>Use cConnection.pkg
36015>Use cWebMenuItem.pkg
36015>
36015>Object oApplication is a cApplication
36017>    Object oConnection is a cConnection
36019>        Use LoginEncryption.pkg
Including file: LoginEncryption.pkg    (C:\Program Files\DataFlex 24.0\Pkg\LoginEncryption.pkg)
36019>>>Use cLoginEncryption.pkg
Including file: cLoginEncryption.pkg    (C:\Program Files\DataFlex 24.0\Pkg\cLoginEncryption.pkg)
36019>>>>>Use cCryptographerEx.pkg
36019>>>>>
36019>>>>>Class cLoginEncryption is a cObject
36020>>>>>    
36020>>>>>    Procedure Construct_Object
36022>>>>>        Forward Send Construct_Object
36024>>>>>        // this must be set to a multi (40ish) character random key
36024>>>>>        Property String psEncryptPassword ""
36025>>>>>        
36025>>>>>        Object oDataCrypter is a cCryptographerEx
36027>>>>>            Set piHash to CALG_SHA_256
36028>>>>>            Set piCipher to CALG_AES_256
36029>>>>>            Set psProvider to "" //  Not providing a specific provider gives the default provider for the provider type
36030>>>>>            Set piProvider to PROV_RSA_AES
36031>>>>>        End_Object
36032>>>>>    End_Procedure
36033>>>>>    
36033>>>>>    // This can be augmented to return a password encryption key using any
36033>>>>>    // hidden mechanism desired.
36033>>>>>    Function GetEncryptionPassword Returns String
36035>>>>>        String sPassword
36035>>>>>        Get psEncryptPassword to sPassword
36036>>>>>        Function_Return sPassword
36037>>>>>    End_Function
36038>>>>>    
36038>>>>>    // Encrypts a string into an unreadable hash that can later be decrypted using DecryptKey.
36038>>>>>    //
36038>>>>>    // Params:
36038>>>>>    //   sPlainText     String to encrypt.
36038>>>>>    // Returns:
36038>>>>>    //   Base64 encoded hash.
36038>>>>>    Function EncryptPassword String sPlainText Returns String
36040>>>>>        String sEncryptPassword sBase64
36040>>>>>        UChar[] ucBinary
36041>>>>>        Pointer pBase64
36041>>>>>        Integer iVoid
36041>>>>>        
36041>>>>>        //  Encrypt Key
36041>>>>>        Get GetEncryptionPassword to sEncryptPassword
36042>>>>>        If (sEncryptPassword = "") Begin
36044>>>>>            Error DFERR_PROGRAM "No encryption password set"
36045>>>>>>
36045>>>>>        End
36045>>>>>>
36045>>>>>        
36045>>>>>        Get Encrypt of oDataCrypter (StringToUCharArray(sEncryptPassword)) (StringToUCharArray(sPlainText)) to ucBinary
36046>>>>>        
36046>>>>>        If (SizeOfArray(ucBinary) = 0) Begin
36048>>>>>            Error DFERR_PROGRAM "Unable to encrypt database login password"
36049>>>>>>
36049>>>>>            Function_Return ""
36050>>>>>        End
36050>>>>>>
36050>>>>>        
36050>>>>>        //  Encode binary hash to Base64
36050>>>>>        Move (Base64Encode(AddressOf(ucBinary), SizeOfArray(ucBinary))) to pBase64
36051>>>>>        Move (PointerToString(pBase64)) to sBase64
36052>>>>>        Move (Free(pBase64)) to iVoid
36053>>>>>        
36053>>>>>        Function_Return sBase64
36054>>>>>    End_Function
36055>>>>>    
36055>>>>>    
36055>>>>>    // Decrypts the unreadable hash generated by EncryptKey into a readable string.
36055>>>>>    //
36055>>>>>    // Params:
36055>>>>>    //   sBase64EncryptedPassword       Base64 Encrypted password
36055>>>>>    // Returns:
36055>>>>>    //   Readable plain text password
36055>>>>>    Function DecryptPassword String sBase64EncryptedPassword Returns String
36057>>>>>        String sEncryptPassword
36057>>>>>        UChar[] ucBinary ucPlain
36059>>>>>        Boolean bIsHex
36059>>>>>        Integer iLen iVoid
36059>>>>>        Pointer pBinary
36059>>>>>        
36059>>>>>        If (sBase64EncryptedPassword <> "") Begin
36061>>>>>            //  Decode from Base64
36061>>>>>            Move (Base64Decode(AddressOf(sBase64EncryptedPassword), &iLen)) to pBinary
36062>>>>>            
36062>>>>>            Move (ResizeArray(ucBinary, iLen, 0)) to ucBinary
36063>>>>>            Move (MemCopy(AddressOf(ucBinary), pBinary, iLen)) to iVoid
36064>>>>>                        
36064>>>>>            Move (Free(pBinary)) to iVoid
36065>>>>>            
36065>>>>>            //  Encrypted binary hash to string
36065>>>>>            Get GetEncryptionPassword to sEncryptPassword
36066>>>>>            Get Decrypt of oDataCrypter (StringToUCharArray(sEncryptPassword)) ucBinary to ucPlain
36067>>>>>        End
36067>>>>>>
36067>>>>>        
36067>>>>>        Function_Return (UCharArrayToString(ucPlain))
36068>>>>>    End_Function
36069>>>>>End_Class
36070>>>
36070>>>Object oLoginEncryption is a cLoginEncryption
36072>>>
36072>>>    // this must be created in your appsrc directory and must contain an encryption
36072>>>    // key that is set to psEncryptPassword. It will look something like this
36072>>>    //
36072>>>    // Set psEncryptPassword to "JchUAo7W@r.b{<Yk~OONi0nq=sMi[*Rn[A-`Vo)q"
36072>>>    //  
Including file: LoginEncryptionKey.inc    (C:\Users\Usuario\Desktop\Trabajo Jaime\Trabajos\WorkspaceSchoolStudent\AppSrc\LoginEncryptionKey.inc)
36072>>>>// Studio generated login encryption key
36072>>>>Set psEncryptPassword to "H\-<*+kCq)H>TRhbD]]-Q}m7i>%f(nX)Hgh>Hl5u"
36073>>>>
36073>>>    
36073>>>    // use this to register this object to your cConnection Object. This object
36073>>>    // must be created after the cConnection object
36073>>>    Move Self to ghoLoginEncryption
36074>>>End_Object
36075>    End_Object
36076>End_Object
36077>
36077>Object oWebApp is a cWebApp
36079>    Set psTheme to "Df_Flat_Touch"
36080>    Set peAlignView to alignCenter
36081>    
36081>    // It is important to set this so that all views will default
36081>    // to drill down style views.
36081>    Set peApplicationStyle to wvsDrillDown   
36082>    Set peApplicationStateMode to asmHistoryAndUrls 
36083>    Set psEncryptPassword to "J>cZw#-xCKBoUj6{(F4r%DnFD|QOxMn3`$xS|G7R"
36084>
36084>    Object oViewStack is a cWebViewStack
36086>    End_Object
36087>    
36087>    Procedure HideHeader
36090>        WebSet pbRender of oHeaderPanel to False
36091>    End_Procedure
36092>
36092>    Procedure ShowHeader
36095>        WebSet pbRender of oHeaderPanel to True 
36096>    End_Procedure
36097>
36097>    Object oHeaderPanel is a cWebPanel
36099>        Set peRegion to prTop
36100>        Set psCSSClass to "HeaderPanel"
36101>        
36101>        Object oMenuPanel is a cWebPanel
36103>            Set peRegion to prLeft
36104>            Set piWidth to 50
36105>            
36105>            Object oMenuButton is a cWebMenuButton
36107>                Set piMenuHeight to 500
36108>
36108>                Object oDashboard_itm is a cWebMenuItem
36110>                    Set psCaption to C_$Dashboard
36111>                    
36111>                    WebRegisterPath ntNavigateBegin oDashboard
36117>
36117>                    Procedure OnClick
36120>                        Send NavigatePath
36121>                    End_Procedure
36122>                End_Object
36123>
36123>                Object oViewMenu is a cWebMenuItem
36125>                    Set psCaption to C_$View
36126>
36126>                    Object oSelectSchoolHouseItem1 is a cWebMenuItem
36128>                        Set psCaption to "SelectSchoolHouse"
36129>
36129>                        WebRegisterPath ntNavigateBegin oSelectSchoolHouse
36135>
36135>                        Procedure OnClick
36138>                            Forward Send OnClick
36140>                                Send NavigatePath
36141>                        End_Procedure
36142>                    End_Object
36143>
36143>                    Object oSelectStudentItem1 is a cWebMenuItem
36145>                        Set psCaption to "SelectStudent"
36146>
36146>                        WebRegisterPath ntNavigateBegin oSelectStudent
36152>
36152>                        Procedure OnClick
36155>                            Forward Send OnClick
36157>                                Send NavigatePath
36158>                        End_Procedure
36159>                    End_Object
36160>                End_Object
36161>
36161>                Object oSignOut_itm is a cWebMenuItem
36163>                    Set psCaption to C_$LogOut
36164>
36164>                    Procedure OnClick
36167>                        Send RequestLogOut of ghoWebSessionManager
36168>                    End_Procedure
36169>                End_Object
36170>            End_Object  
36171>
36171>            Object oBackButton is a cWebButton
36173>                Set psCSSClass to "WebBack_Icon"
36174>                Set pbRender to False
36175>                
36175>                Procedure OnClick
36178>                    Handle hoTop
36178>                    
36178>                    Get TopViewHandle of oViewStack to hoTop
36179>                    If (hoTop > 0) Begin
36181>                        Send NavigateCancel of hoTop 
36182>                    End
36182>                End_Procedure
36183>            End_Object
36184>            
36184>            Send AddClient of oViewStack Self
36185>                
36185>            Procedure OnUpdateViewStack
36188>                Handle hoTop hoDflt
36188>                Integer eMode
36188>                Boolean bTop
36188>                
36188>                WebGet peMode of (Owner(Self)) to eMode
36189>                
36189>                Get TopViewHandle of oViewStack to hoTop
36190>                Get GetDefaultView to hoDflt
36191>                Move (hoTop=0 or hoTop=hoDflt) to bTop
36192>                
36192>                WebSet pbRender of oBackButton to (not(bTop) and eMode >= rmMobile)
36193>                WebSet pbRender of oMenuButton to (bTop or eMode < rmMobile)
36194>            End_Procedure
36195>
36195>        End_Object
36196>
36196>        Object oCaptionPanel is a cWebPanel
36198>            Set piColumnCount to 12
36199>
36199>            Object oCaptionBreadcrumb is a cWebBreadcrumb
36201>                Set peBreadcrumbStyle to crumbCaption
36202>                WebSetResponsive peBreadcrumbStyle rmMobile to crumbDropDown
36203>            End_Object         
36204>        End_Object
36205>        
36205>        Object oActionPanel is a cWebPanel
36207>            Set peRegion to prRight
36208>            Set piColumnCount to 1
36209>            Set piWidth to 120
36210>
36210>            Object oMainActions is a cWebActionBar
36212>                Set psGroupName to "MainActions"
36213>
36213>                Set piColumnSpan to 0
36214>                Set peAlign to alignRight
36215>            End_Object
36216>        End_Object
36217>
36217>        Object oBreadcrumbPanel is a cWebPanel
36219>            Set peRegion to prBottom
36220>            
36220>            Object oHorizontalBreadcrumb is a cWebBreadcrumb
36222>                WebSetResponsive pbRender rmMobile to False
36223>            End_Object         
36224>        End_Object
36225>
36225>    End_Object    
36226>
36226>    Use SessionManager.wo
Including file: SessionManager.wo    (C:\Users\Usuario\Desktop\Trabajo Jaime\Trabajos\WorkspaceSchoolStudent\AppSrc\SessionManager.wo)
36226>>>Use cWebSessionManagerStandard.pkg
Including file: cWebSessionManagerStandard.pkg    (C:\Program Files\DataFlex 24.0\Pkg\cWebSessionManagerStandard.pkg)
36226>>>>>Use cWebSessionManager.pkg
36226>>>>>Use cWebAppSessionDataDictionary.dd
Including file: cWebAppSessionDataDictionary.dd    (C:\Program Files\DataFlex 24.0\Pkg\cWebAppSessionDataDictionary.dd)
36226>>>>>>>Use DataDict.pkg
36226>>>>>>>
36226>>>>>>>Open WebAppSession
Including file: WebAppSession.fd    (C:\Users\Usuario\Desktop\Trabajo Jaime\Trabajos\WorkspaceSchoolStudent\DDSrc\WebAppSession.fd)
36228>>>>>>>Open WebAppUser
Including file: WebAppUser.fd    (C:\Users\Usuario\Desktop\Trabajo Jaime\Trabajos\WorkspaceSchoolStudent\DDSrc\WebAppUser.fd)
36230>>>>>>>
36230>>>>>>>Class cWebAppSessionDataDictionary is a DataDictionary
36231>>>>>>>    Procedure Construct_Object
36233>>>>>>>        Forward Send Construct_Object
36235>>>>>>>
36235>>>>>>>        Set Main_File to WebAppSession.File_Number
36236>>>>>>>
36236>>>>>>>        Set Add_Server_File to WebAppUser.File_Number
36237>>>>>>>
36237>>>>>>>        Set ParentNullAllowed WebAppUser.File_Number to True
36238>>>>>>>
36238>>>>>>>        Set Foreign_Field_Option DD_KEYFIELD DD_NOPUT to True
36239>>>>>>>        Set Foreign_Field_Option DD_KEYFIELD DD_FINDREQ to True
36240>>>>>>>        Set Foreign_Field_Option DD_INDEXFIELD DD_NOPUT to True
36241>>>>>>>        Set Foreign_Field_Option DD_DEFAULT DD_DISPLAYONLY to True
36242>>>>>>>
36242>>>>>>>        Set Field_Checkbox_Values Field WebAppSession.Active to "Y" "N"
36243>>>>>>>        Set Field_Error Field WebAppSession.Active to 500 "Invalid WebAppSession Active State"
36244>>>>>>>    End_Procedure
36245>>>>>>>
36245>>>>>>>    Procedure Creating
36247>>>>>>>        DateTime dtCurrentDateTime
36247>>>>>>>        
36247>>>>>>>        Forward Send Creating
36249>>>>>>>        
36249>>>>>>>        //  Init usecounter
36249>>>>>>>        Move 0 to WebAppSession.UseCount
36250>>>>>>>        
36250>>>>>>>        //  Set the creation and access time to the current time
36250>>>>>>>        Move (CurrentDateTime()) to dtCurrentDateTime
36251>>>>>>>    
36251>>>>>>>        Get TimeToString dtCurrentDateTime to WebAppSession.CreateTime
36252>>>>>>>        Get TimeToString dtCurrentDateTime to WebAppSession.LastAccessTime
36253>>>>>>>        
36253>>>>>>>        Move dtCurrentDateTime to WebAppSession.CreateDate
36254>>>>>>>        Move dtCurrentDateTime to WebAppSession.LastAccessDate
36255>>>>>>>    End_Procedure
36256>>>>>>>    
36256>>>>>>>    //
36256>>>>>>>    //  Converts the given time to an string that can be saved in the database.
36256>>>>>>>    //
36256>>>>>>>    //  Params:
36256>>>>>>>    //      dtTime  Time to convert
36256>>>>>>>    //  Returns:
36256>>>>>>>    //      String with "HH:MM:SS" format
36256>>>>>>>    //
36256>>>>>>>    Function TimeToString DateTime dtTime Returns String
36258>>>>>>>        String sHours sMinutes sSeconds
36258>>>>>>>        
36258>>>>>>>        //  Extract parts
36258>>>>>>>        Move (String(DateGetHour(dtTime))) to sHours
36259>>>>>>>        Move (String(DateGetMinute(dtTime))) to sMinutes
36260>>>>>>>        Move (String(DateGetSecond(dtTime))) to sSeconds
36261>>>>>>>        
36261>>>>>>>        //  Fill out with 0
36261>>>>>>>        If (Length(sHours) = 1) ;            Move ("0" + sHours) to sHours
36264>>>>>>>        If (Length(sMinutes) = 1) ;            Move ("0" + sMinutes) to sMinutes
36267>>>>>>>        If (Length(sSeconds) = 1) ;            Move ("0" + sSeconds) to sSeconds
36270>>>>>>>        
36270>>>>>>>        Function_Return (sHours + ":" + sMinutes + ":" + sSeconds)
36271>>>>>>>    End_Function
36272>>>>>>>    
36272>>>>>>>    //
36272>>>>>>>    //  Sets the time of the datetime variable to the time in the string.
36272>>>>>>>    //
36272>>>>>>>    //  Params:
36272>>>>>>>    //      dtTime  Datetime variable to add time to
36272>>>>>>>    //      sTimeString String with time in the format "HH:MM:SS"
36272>>>>>>>    //  Returns:
36272>>>>>>>    //      dtDateTime with the loaded time
36272>>>>>>>    //
36272>>>>>>>    Function StringToTime DateTime dtTime String sTimeString Returns DateTime
36274>>>>>>>        String sHours sMinutes sSeconds
36274>>>>>>>        
36274>>>>>>>        //  Extract parts
36274>>>>>>>        Move (Mid(sTimeString, 2, 1)) to sHours
36275>>>>>>>        Move (Mid(sTimeString, 2, 4)) to sMinutes
36276>>>>>>>        Move (Mid(sTimeString, 2, 7)) to sSeconds
36277>>>>>>>        
36277>>>>>>>        //  Set to DateTime
36277>>>>>>>        Move (DateSetHour(dtTime, (Integer(sHours)))) to dtTime
36278>>>>>>>        Move (DateSetMinute(dtTime, (Integer(sMinutes)))) to dtTime
36279>>>>>>>        Move (DateSetSecond(dtTime, (Integer(sSeconds)))) to dtTime
36280>>>>>>>        
36280>>>>>>>        Function_Return dtTime
36281>>>>>>>    End_Function
36282>>>>>>>End_Class
36283>>>>>Use cWebAppUserDataDictionary.dd
Including file: cWebAppUserDataDictionary.dd    (C:\Program Files\DataFlex 24.0\Pkg\cWebAppUserDataDictionary.dd)
36283>>>>>>>Use DataDict.pkg
36283>>>>>>>Open WebAppUser
36285>>>>>>>Open WebAppSession
36287>>>>>>>
36287>>>>>>>Class cWebAppUserDataDictionary is a DataDictionary
36288>>>>>>>    
36288>>>>>>>    Procedure Construct_Object
36290>>>>>>>        Forward Send Construct_Object
36292>>>>>>>        Set Main_File to WebAppUser.File_Number
36293>>>>>>>
36293>>>>>>>        Set Add_Client_File to WebAppSession.File_Number
36294>>>>>>>
36294>>>>>>>        Set Foreign_Field_Option DD_KEYFIELD DD_NOPUT to True
36295>>>>>>>        Set Foreign_Field_Option DD_KEYFIELD DD_FINDREQ to True
36296>>>>>>>        Set Foreign_Field_Option DD_INDEXFIELD DD_NOPUT to True
36297>>>>>>>        Set Foreign_Field_Option DD_DEFAULT DD_DISPLAYONLY to True
36298>>>>>>>    End_Procedure
36299>>>>>>>
36299>>>>>>>End_Class
36300>>>>>
36300>>>>>Class cWebSessionManagerStandard is a cWebSessionManager
36301>>>>>    
36301>>>>>    Procedure Construct_Object
36303>>>>>        Handle hoUserDD hoSessionDD
36303>>>>>        
36303>>>>>        Forward Send Construct_Object
36305>>>>>        
36305>>>>>        Property Handle phoUserDD 0      // Handle to the WebAppUser DDO
36306>>>>>        Property Handle phoSessionDD 0   // Handle to the WebAppSession DDO        
36307>>>>>        
36307>>>>>        Get Create (RefClass(cWebAppUserDataDictionary)) to hoUserDD
36308>>>>>        Get Create (RefClass(cWebAppSessionDataDictionary)) to hoSessionDD
36309>>>>>        Set DDO_Server of hoSessionDD to hoUserDD
36310>>>>>
36310>>>>>        Set phoUserDD to hoUserDD
36311>>>>>        Set phoSessionDD to hoSessionDD
36312>>>>>        Property Boolean pbCreatingNewSession False
36313>>>>>        Property String psLoginName
36314>>>>>        Property String psUserName ""
36315>>>>>        Property Integer piUserRights 0
36316>>>>>    End_Procedure
36317>>>>>    
36317>>>>>    Function CreateSession String sRemoteAddress Returns String
36319>>>>>        String sSessionKey
36319>>>>>        Integer iErr
36319>>>>>        Boolean bLogWebSession
36319>>>>>        Handle hoSessionDD       
36319>>>>>        Get phoSessionDD to hoSessionDD
36320>>>>>        
36320>>>>>        //  Get session key
36320>>>>>        Forward Get CreateSession sRemoteAddress to sSessionKey
36322>>>>>        
36322>>>>>        Get pbLogWebSession to bLogWebSession
36323>>>>>        If not bLogWebSession Begin
36325>>>>>            Function_Return sSessionKey        
36326>>>>>        End
36326>>>>>>
36326>>>>>
36326>>>>>        //  Store session
36326>>>>>        Send Clear of hoSessionDD
36327>>>>>        Set Field_Changed_Value of hoSessionDD Field WebAppSession.SessionKey to sSessionKey
36328>>>>>        Set Field_Changed_Value of hoSessionDD Field WebAppSession.RemoteAddress to sRemoteAddress
36329>>>>>        Set Field_Changed_Value of hoSessionDD Field WebAppSession.Active to "Y"
36330>>>>>        Get Request_Validate of hoSessionDD to iErr
36331>>>>>        If (iErr) Begin
36333>>>>>            // this should not happen. If it does its a programming error
36333>>>>>            Error DFERR_PROGRAM C_$WebAppSesionValidateFailed
36334>>>>>>
36334>>>>>            Function_Return ""
36335>>>>>        End
36335>>>>>>
36335>>>>>        Send Request_Save of hoSessionDD
36336>>>>>        If (Err) Begin
36338>>>>>            // this shouldn't happen, if it does likely a duplicate session key issue, even through request_save already gave an error we give another one to make tracking down easier
36338>>>>>            Error DFERR_PROGRAM C_$WebAppSesionSaveFailed
36339>>>>>>
36339>>>>>            Function_Return ""
36340>>>>>        End
36340>>>>>>
36340>>>>>       
36340>>>>>        Function_Return sSessionKey        
36341>>>>>    End_Function
36342>>>>>    
36342>>>>>    
36342>>>>>    Function ValidateSession String sSessionKey Boolean bOptLoadWebApp Returns Boolean
36344>>>>>        DateTime dtLastAccess dtCurrent
36344>>>>>        TimeSpan tsDiff
36344>>>>>        Integer iErr iSessionTimeout iSpanMinutes
36344>>>>>        Boolean bResult bCreatingNewSession
36344>>>>>        Boolean bLogWebSession bLoadWebApp
36344>>>>>        Integer eLoginMode
36344>>>>>        String sTime
36344>>>>>        Handle hoSessionDD hoUserDD       
36344>>>>>        
36344>>>>>        Move False to bLoadWebApp
36345>>>>>        If (num_arguments >= 2) Begin
36347>>>>>            Move bOptLoadWebApp to bLoadWebApp
36348>>>>>        End
36348>>>>>>
36348>>>>>        
36348>>>>>        Get phoSessionDD to hoSessionDD
36349>>>>>        Get phoUserDD to hoUserDD
36350>>>>>        
36350>>>>>        Get pbLogWebSession to bLogWebSession
36351>>>>>        Get peLoginMode to eLoginMode
36352>>>>>        
36352>>>>>        // for this object, you can only disable logging if login completely is disabled
36352>>>>>        If (not(bLogWebSession) and (eLoginMode<>lmLoginNone)) Begin
36354>>>>>            Error DFERR_PROGRAM C_$WebSessionLoggingMustBeEnabled
36355>>>>>>
36355>>>>>            Function_Return False
36356>>>>>        End
36356>>>>>>
36356>>>>>
36356>>>>>        //  Clear session properties
36356>>>>>        Set psSessionKey to ""
36357>>>>>        Send UpdateSessionProperties True
36358>>>>>        
36358>>>>>        If not bLogWebSession Begin
36360>>>>>            Forward Get ValidateSession sSessionKey to bResult
36362>>>>>            Function_Return bResult
36363>>>>>        End        
36363>>>>>>
36363>>>>>        
36363>>>>>        Move False to bResult
36364>>>>>        Get piSessionTimeout to iSessionTimeout 
36365>>>>>        
36365>>>>>        //  Check if session exists
36365>>>>>        Send Clear of hoSessionDD
36366>>>>>        Move sSessionKey to WebAppSession.SessionKey
36367>>>>>        Send Find of hoSessionDD EQ Index.1
36368>>>>>            
36368>>>>>        If (Found) Begin
36370>>>>>            //  Calculate timespan between now and last access time
36370>>>>>            Move (CurrentDateTime()) to dtCurrent
36371>>>>>            Move WebAppSession.LastAccessDate to dtLastAccess
36372>>>>>            Get StringToTime of hoSessionDD dtLastAccess WebAppSession.LastAccessTime to dtLastAccess
36373>>>>>            Move (dtCurrent - dtLastAccess) to tsDiff
36374>>>>>            Move (SpanTotalMinutes(tsDiff)) to iSpanMinutes
36375>>>>>            
36375>>>>>            //  Check if session didn't time out
36375>>>>>            If (IsDateValid(dtLastAccess) and (iSessionTimeout <= 0 or (iSpanMinutes < iSessionTimeout)) and WebAppSession.Active = "Y") Begin
36377>>>>>                Forward Get ValidateSession sSessionKey to bResult
36379>>>>>                   
36379>>>>>                If (bResult) Begin
36381>>>>>                    //  Update session record
36381>>>>>                    Get TimeToString of hoSessionDD dtCurrent to sTime 
36382>>>>>                    Set Field_Changed_Value of hoSessionDD Field WebAppSession.LastAccessDate to dtCurrent
36383>>>>>                    Set Field_Changed_Value of hoSessionDD Field WebAppSession.LastAccessTime to sTime
36384>>>>>                    Set Field_Changed_Value of hoSessionDD Field WebAppSession.UseCount to (WebAppSession.UseCount + 1)
36385>>>>>                    Get Request_Validate of hoSessionDD to iErr
36386>>>>>                    If (iErr) Begin
36388>>>>>                        // this should not happen. If it does its a programming error
36388>>>>>                        Error DFERR_PROGRAM C_$WebAppSesionValidateFailed
36389>>>>>>
36389>>>>>                        Function_Return False
36390>>>>>                    End
36390>>>>>>
36390>>>>>                    Send Request_Save of hoSessionDD
36391>>>>>                    
36391>>>>>                    //  Update user properties
36391>>>>>                    Send UpdateSessionProperties False
36392>>>>>                End
36392>>>>>>
36392>>>>>            End
36392>>>>>>
36392>>>>>            Else Begin
36393>>>>>                // Test the Creating New Session Flag to protect against infinite recursion....
36393>>>>>                Get pbCreatingNewSession to bCreatingNewSession
36394>>>>>                
36394>>>>>                If (not(bCreatingNewSession)) Begin
36396>>>>>                    If (not(bLoadWebApp)) Begin
36398>>>>>                        Move False to bResult   //  We can only continue immediately if we were loading the webapp, other operations are not allowed!
36399>>>>>                        Error DFERR_WEBAPP_SESSION_TIMEOUT "Your application session has timed out or is inactive, please login again."
36400>>>>>>
36400>>>>>                        Send NavigateRefresh of ghoWebApp          // refresh the WebApp at the client (triggers a login)
36401>>>>>                    End
36401>>>>>>
36401>>>>>                    Else Begin
36402>>>>>                        Set pbCreatingNewSession to True                    
36403>>>>>                        Get RecreateSession of ghoWebApp to bResult 
36404>>>>>                        Set pbCreatingNewSession to False                        
36405>>>>>                    End
36405>>>>>>
36405>>>>>                End
36405>>>>>>
36405>>>>>            End
36405>>>>>>
36405>>>>>        End
36405>>>>>>
36405>>>>>        Else Begin
36406>>>>>            Error DFERR_WEBAPP_BAD_SESSION_KEY "Session key not known (reload page to recreate session)"
36407>>>>>>
36407>>>>>        End
36407>>>>>>
36407>>>>>        
36407>>>>>        Function_Return bResult
36408>>>>>    End_Function
36409>>>>>    
36409>>>>>    Function UserLogin String sLoginName String sPassword Returns Boolean
36411>>>>>        String sSessionKey sUserPassword
36411>>>>>        Handle hoSessionDD hoUserDD
36411>>>>>        Boolean bMatch  
36411>>>>>        
36411>>>>>        Get phoSessionDD to hoSessionDD
36412>>>>>        Get phoUserDD to hoUserDD
36413>>>>>        Integer iErr eLoginMode
36413>>>>>        
36413>>>>>        // Refind session record
36413>>>>>        Get psSessionKey to sSessionKey
36414>>>>>        Send Clear of hoSessionDD
36415>>>>>        Move sSessionKey to WebAppSession.SessionKey
36416>>>>>        Send Find of hoSessionDD EQ Index.1
36417>>>>>        
36417>>>>>        If (Found and WebAppSession.SessionKey = sSessionKey) Begin
36419>>>>>            Get peLoginMode to eLoginMode
36420>>>>>            
36420>>>>>            //  Find the user
36420>>>>>            Move sLoginName to WebAppUser.LoginName
36421>>>>>            Send Find of hoUserDD EQ Index.1
36422>>>>>            
36422>>>>>            // Check username and password
36422>>>>>            If (Found and (Lowercase(sLoginName) = Lowercase(Trim(WebAppUser.LoginName)))) Begin
36424>>>>>                Get Field_Current_Value of hoUserDD Field WebAppUser.Password to sUserPassword
36425>>>>>                Get ComparePasswords (Trim(sUserPassword)) (Trim(sPassword)) to bMatch
36426>>>>>                
36426>>>>>                If (bMatch) Begin
36428>>>>>                    // Store the login
36428>>>>>                    Set Field_Changed_Value of hoUserDD Field WebAppUser.LastLogin to (CurrentDateTime())
36429>>>>>                    Get Request_Validate of hoSessionDD to iErr
36430>>>>>                    If (iErr) Begin
36432>>>>>                        // this should not happen. If it does its a programming error
36432>>>>>                        Error DFERR_PROGRAM C_$WebAppSesionValidateFailed
36433>>>>>>
36433>>>>>                        Function_Return False
36434>>>>>                    End
36434>>>>>>
36434>>>>>                    
36434>>>>>                    Send Request_Save of hoSessionDD
36435>>>>>                    
36435>>>>>                    // Update session properties
36435>>>>>                    Send UpdateSessionProperties False
36436>>>>>                    Send NotifyChangeRights
36437>>>>>                    Function_Return True
36438>>>>>                End
36438>>>>>>
36438>>>>>                Else Begin
36439>>>>>                    //  We should rely directly on this buffer elsewhere but just be sure
36439>>>>>                    Send Clear of hoUserDD
36440>>>>>                End
36440>>>>>>
36440>>>>>            End
36440>>>>>>
36440>>>>>        End
36440>>>>>>
36440>>>>>          
36440>>>>>        Function_Return False
36441>>>>>    End_Function
36442>>>>>    
36442>>>>>    Function IsLoggedIn Returns Boolean
36444>>>>>        String sLoginName
36444>>>>>        Boolean bLogWebSession bLoggedIn
36444>>>>>        
36444>>>>>        Get pbLogWebSession to bLogWebSession
36445>>>>>        If not bLogWebSession Begin
36447>>>>>            Forward Get IsLoggedIn to bLoggedIn
36449>>>>>            Function_Return bLoggedIn
36450>>>>>        End
36450>>>>>>
36450>>>>>        
36450>>>>>        Get psLoginName to sLoginName
36451>>>>>        
36451>>>>>        Function_Return (sLoginName <> "")
36452>>>>>    End_Function
36453>>>>>    
36453>>>>>    
36453>>>>>    //
36453>>>>>    // This procedure is called when validating a session and after logging in. Its purpose is to 
36453>>>>>    // update properties based on the session and user data. Augment this function to update 
36453>>>>>    // properties based on the session / user table. Note that WebAppUser and WebAppSession contain
36453>>>>>    // the right records when this procedure is called.
36453>>>>>    //
36453>>>>>    // Params:
36453>>>>>    //      bClear   True if the procedure is called before session validation to clear properties.
36453>>>>>    //
36453>>>>>    Procedure UpdateSessionProperties Boolean bClear
36455>>>>>        Handle hoUserDD
36455>>>>>        
36455>>>>>        Get phoUserDD to hoUserDD
36456>>>>>        
36456>>>>>        //  Update user properties
36456>>>>>        If (not(bClear) and HasRecord(hoUserDD)) Begin
36458>>>>>            Set psUsername to (Trim(WebAppUser.FullName))
36459>>>>>            Set psLoginName to (Trim(WebAppUser.LoginName))
36460>>>>>            Set piUserRights to WebAppUser.Rights
36461>>>>>            
36461>>>>>            Send OnSessionPropertiesSet 
36462>>>>>        End
36462>>>>>>
36462>>>>>        Else Begin
36463>>>>>            Set psUsername to ""
36464>>>>>            Set psLoginName to ""
36465>>>>>            Set piUserRights to 0
36466>>>>>            
36466>>>>>            Send OnSessionPropertiesClear
36467>>>>>        End
36467>>>>>>
36467>>>>>    End_Procedure
36468>>>>>    
36468>>>>>    //
36468>>>>>    // This function is called to perform the password comparison. It gets the entered password and
36468>>>>>    // the password value of the user table as parameters. The WebAppUser buffer will contain the
36468>>>>>    // right record. This function can be augmented to implement security features like storing the
36468>>>>>    // password as a hashed value.
36468>>>>>    //
36468>>>>>    // Params:
36468>>>>>    //      sUserPassword       Value of the WebAppUser.Password field.
36468>>>>>    //      sEnteredPassword    Value entered on the login screen during login.
36468>>>>>    //
36468>>>>>    Function ComparePasswords String sUserPassword String sEnteredPassword Returns Boolean
36470>>>>>        Function_Return (sUserPassword = sEnteredPassword)
36471>>>>>    End_Function
36472>>>>>    
36472>>>>>    Procedure OnSessionPropertiesSet
36474>>>>>        //  Empty event stub
36474>>>>>    End_Procedure
36475>>>>>    
36475>>>>>    Procedure OnSessionPropertiesClear
36477>>>>>        //  Empty event stub
36477>>>>>    End_Procedure
36478>>>>>    
36478>>>>>    Procedure EndSession
36480>>>>>        Integer iErr
36480>>>>>        Boolean bLogWebSession
36480>>>>>        Handle hoSessionDD       
36480>>>>>        
36480>>>>>        Get phoSessionDD to hoSessionDD
36481>>>>>        Get pbLogWebSession to bLogWebSession
36482>>>>>        If not bLogWebSession Begin
36484>>>>>            Forward Send EndSession
36486>>>>>            Procedure_Return
36487>>>>>        End
36487>>>>>>
36487>>>>>            
36487>>>>>        //  Check if session exists
36487>>>>>        Send Clear of hoSessionDD
36488>>>>>        Get psSessionKey to WebAppSession.SessionKey
36489>>>>>        
36489>>>>>        Send Find of hoSessionDD EQ Index.1
36490>>>>>        If (Found) Begin
36492>>>>>            Set Field_Changed_Value of hoSessionDD Field WebAppSession.Active to "N"
36493>>>>>            Get Request_Validate of hoSessionDD to iErr
36494>>>>>            If (iErr) Begin
36496>>>>>                // this should not happen. If it does its a programming error
36496>>>>>                Error DFERR_PROGRAM C_$WebAppSesionValidateFailed
36497>>>>>>
36497>>>>>                Procedure_Return
36498>>>>>            End
36498>>>>>>
36498>>>>>            Send Request_Save of hoSessionDD
36499>>>>>        End
36499>>>>>>
36499>>>>>    End_Procedure
36500>>>>>
36500>>>>>End_Class
36501>>>>>
36501>>>
36501>>>Object oSessionManager is a cWebSessionManagerStandard
36503>>>End_Object
36504>>>
36504>>>
36504>    Use Login.wo
Including file: Login.wo    (C:\Users\Usuario\Desktop\Trabajo Jaime\Trabajos\WorkspaceSchoolStudent\AppSrc\Login.wo)
36504>>>Use cWebView.pkg
36504>>>Use cWebForm.pkg
36504>>>Use cWebButton.pkg
36504>>>Use cWebPanel.pkg
36504>>>Use cWebLabel.pkg
36504>>>Use cWebSpacer.pkg
36504>>>Use cWebImage.pkg
36504>>>
36504>>>Object oLogin is a cWebView
36506>>>    Set piMinWidth to 250
36507>>>    Set piMaxWidth to 420
36508>>>    Set pbLoginModeEnforced to False
36509>>>    Set piColumnCount to 12
36510>>>    Set psCSSClass to "LoginView"
36511>>>    Set pbServerOnSubmit to True
36512>>>    
36512>>>    Set psStateViewName to "Login"
36513>>>    Set pbStateReplace to True  // Always replace the state so the login never becomes its own history item
36514>>>    
36514>>>    Property String psPrevStateHash ""  // Remember the state hash that the user navigated too so we can redirect after login
36517>>>    
36517>>>    Delegate Set phoLoginView to Self
36519>>>    
36519>>>    Object oTopSpacer is a cWebSpacer
36521>>>        Set pbFillHeight to True
36522>>>        Set piColumnSpan to 12
36523>>>    End_Object
36524>>>    
36524>>>    Object oWarning is a cWebLabel
36526>>>        Set pbVisible to False
36527>>>        Set psCaption to "Invalid User ID or password. \n\rHint: 'Guest' & 'guest'."
36528>>>        Set peAlign to alignCenter
36529>>>        Set piColumnSpan to 12
36530>>>        Set psCSSClass to "LoginWarning"
36531>>>    End_Object
36532>>>    
36532>>>    Object oLogo is a cWebImage
36534>>>        Set piColumnSpan to 10
36535>>>        Set psUrl to "images/DF_Logo_Retina.png"
36536>>>        Set pePosition to wiFit
36537>>>        Set piColumnIndex to 1
36538>>>        Set piHeight to 160
36539>>>        
36539>>>        WebSetResponsive piHeight rmMobile to 100  // Best for small smart phones
36540>>>    End_Object
36541>>>    
36541>>>    Object oLoginName is a cWebForm
36543>>>        Set psLabel to "User ID:"
36544>>>        Set peLabelPosition to lpTop
36545>>>        Set piMaxLength to 20
36546>>>        Set piColumnIndex to 1
36547>>>        Set pbShowLabel to False
36548>>>        Set psPlaceHolder to "loginname"
36549>>>        Set piColumnSpan to 10
36550>>>        Set psAutoComplete to "username"
36551>>>    End_Object
36552>>>    
36552>>>    Object oPassword is a cWebForm
36554>>>        Set psLabel to "Password:"
36555>>>        Set pbPassword to True
36556>>>        Set peLabelAlign to alignLeft
36557>>>        Set piMaxLength to 20
36558>>>        Set peLabelPosition to lpTop
36559>>>        Set pbShowLabel to False
36560>>>        Set psPlaceHolder to "password"
36561>>>        Set piColumnSpan to 10
36562>>>        Set piColumnIndex to 1
36563>>>        Set psAutoComplete to "current-password"
36564>>>    End_Object
36565>>>    
36565>>>    Object oWebSpacer1 is a cWebSpacer
36567>>>        Set piColumnSpan to 12
36568>>>        Set piHeight to 10
36569>>>    End_Object
36570>>>    
36570>>>    Object oLoginButton is a cWebButton
36572>>>        Set pbShowLabel to False
36573>>>        Set psCaption to "sign in"
36574>>>        Set pbServerOnClick to True
36575>>>        Set piColumnSpan to 10
36576>>>        Set piColumnIndex to 1
36577>>>        
36577>>>        Procedure OnClick
36580>>>            Send DoLogin
36581>>>        End_Procedure
36582>>>    End_Object
36583>>>    
36583>>>    Object oBottomSpacer is a cWebSpacer
36585>>>        Set pbFillHeight to True
36586>>>        Set piColumnSpan to 12
36587>>>    End_Object
36588>>>    
36588>>>    Procedure DoLogin
36591>>>        String sLoginName sPassword sPrevStateHash
36591>>>        Boolean bResult
36591>>>        
36591>>>        WebGet psValue of oLoginName to sLoginName
36592>>>        WebGet psValue of oPassword to sPassword
36593>>>        
36593>>>        Get UserLogin of ghoWebSessionManager sLoginName sPassword to bResult
36594>>>        
36594>>>        If (bResult) Begin
36596>>>            Send Hide of oLogin
36597>>>            Send ShowHeader of ghoWebApp
36598>>>            WebSet psCSSClass of ghoWebApp to ""
36599>>>            
36599>>>            WebGet psPrevStateHash to sPrevStateHash
36600>>>            Send NavigateToStateHash of ghoWebApp sPrevStateHash True
36601>>>            
36601>>>            // clear the login values. we don't want to return the login id & password as synchronized properties....
36601>>>            WebSet psValue of oLoginName to ""
36602>>>            WebSet psValue of oPassword  to ""
36603>>>            WebSet pbVisible of oWarning to False
36604>>>        End
36604>>>>
36604>>>        Else Begin
36605>>>            WebSet pbVisible of oWarning to True
36606>>>        End
36606>>>>
36606>>>    End_Procedure
36607>>>    
36607>>>    Procedure OnSubmit
36610>>>        Send DoLogin
36611>>>    End_Procedure
36612>>>    
36612>>>    Procedure OnLoad
36615>>>        String sPrevStateHash sView
36615>>>        
36615>>>        Forward Send OnLoad
36617>>>        
36617>>>        //  Store the current state so we can go back to that later (only if it points to a different view)
36617>>>        Get StateHash of ghoWebApp to sPrevStateHash
36618>>>        Send ParseViewStateHash sPrevStateHash (&sView)
36619>>>        If (Lowercase(sView) <> Lowercase(psStateViewName(Self))) Begin
36621>>>            WebSet psPrevStateHash to sPrevStateHash
36622>>>        End
36622>>>>
36622>>>        
36622>>>    End_Procedure
36623>>>    
36623>>>    Procedure OnBeforeShow
36626>>>        //  Hide header & apply nice background style
36626>>>        Send HideHeader to ghoWebApp
36627>>>        WebSet psCSSClass of ghoWebApp to "LoginBackground"
36628>>>    End_Procedure
36629>>>    
36629>>>End_Object
36630>>>
36630>>>
36630>>>
36630>>>
36630>    Use WebResourceManager.wo
Including file: WebResourceManager.wo    (C:\Users\Usuario\Desktop\Trabajo Jaime\Trabajos\WorkspaceSchoolStudent\AppSrc\WebResourceManager.wo)
36630>>>Use cWebResourceManager.pkg
36630>>>
36630>>>Object oWebResourceManager is a cWebResourceManager
36632>>>End_Object
36633>    
36633>    Use Dashboard.wo
Including file: Dashboard.wo    (C:\Users\Usuario\Desktop\Trabajo Jaime\Trabajos\WorkspaceSchoolStudent\AppSrc\Dashboard.wo)
36633>>>Use cWebView.pkg
36633>>>Use cWebPanel.pkg
36633>>>Use cWebForm.pkg
36633>>>Use cWebButton.pkg
36633>>>Use cWebGroup.pkg
36633>>>Use cWebSpacer.pkg
36633>>>Use cWebHtmlBox.pkg
36633>>>Use cWebMenuGroup.pkg
36633>>>Use cWebMenuItem.pkg
36633>>>Use cWebLabel.pkg
36633>>>Use cWebList.pkg
36633>>>Use cWebColumn.pkg
36633>>>
36633>>>Object oDashboard is a cWebView
36635>>>
36635>>>    // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -  
36635>>>    // Add a DDO Structure 
36635>>>    //
36635>>>    // There is no need to synchronize a DD structure on the client so we do
36635>>>    // not set the Server property or send ADDOStructure. We will simply use
36635>>>    // DDO's to mine data and generate HTML for our cWebHTMLBox objects.
36635>>>    // It is the HTML in these objects that is sent to the client each time 
36635>>>    // this page is shown.
36635>>>    //
36635>>>    // Also, it is important for the drill-down Navigation interface that we
36635>>>    // do not set the Server property to some DDO because this will affect 
36635>>>    // constraints in the next view that we navigate to.
36635>>>    // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
36635>>>
36635>>>    Set piMaxWidth to 1024
36636>>>    
36636>>>    Set psCaption to "Dashboard"
36637>>>    Set peViewType to vtUndefined
36638>>>    Set pbShowCaption to False
36639>>>    Set psCSSClass to "Dashboard"
36640>>>    
36640>>>    Object oWebMainPanel is a cWebPanel
36642>>>        Set piColumnCount to 24
36643>>>        
36643>>>        // - - - - - - - - - - - - - - -
36643>>>        // Main Panel's Responsive Rules
36643>>>        // - - - - - - - - - - - - - - -
36643>>>        WebSetResponsive piColumnCount rmMobile to 1
36644>>>        WebSetResponsive piColumnCount rmTabletPortrait to 16
36645>>>    
36645>>>        Object oTiles_grp is a cWebGroup
36647>>>            Set piColumnSpan to 30
36648>>>            Set pbShowBorder to False
36649>>>            Set pbShowCaption to False
36650>>>            Set piColumnCount to 12
36651>>>            
36651>>>            Set psCSSClass to "TilesGroup"
36652>>>    
36652>>>            Object oTile1 is a cWebHtmlBox
36654>>>                Set pbServerOnClick to True
36655>>>                Set piColumnSpan to 10
36656>>>                Set psCSSClass to "Tile Dark"
36657>>>                Set psHtml to '<div class="WebCon_Sizer" data-ServerOnClick="openview"><div Class="Tile_Title">Students</div><div class="Tile_Subtitle">Muestra de los estudiantes registrados</div></div>'
36658>>>    
36658>>>                WebRegisterPath ntNavigateForwardCustom oSelectStudent
36664>>>                
36664>>>                Procedure OnClick String sId String sParam
36667>>>                    Send NavigatePath
36668>>>                End_Procedure
36669>>>                
36669>>>            End_Object
36670>>>    
36670>>>            Object oTile2 is a cWebHtmlBox
36672>>>                Set pbServerOnClick to True
36673>>>                Set piColumnSpan to 10
36674>>>                Set piColumnIndex to 6
36675>>>                Set psCSSClass to "Tile Dark"
36676>>>                Set psHtml to '<div class="WebCon_Sizer" data-ServerOnClick="openview"><div Class="Tile_Title">School Houses</div><div class="Tile_Subtitle">Muestra de los centros registrados</div></div>'
36677>>>            
36677>>>                WebRegisterPath ntNavigateForwardCustom oSelectSchoolHouse
36683>>>                
36683>>>                Procedure OnClick String sId String sParam
36686>>>                    Send NavigatePath
36687>>>                End_Procedure
36688>>>                
36688>>>            End_Object
36689>>>        End_Object
36690>>>    
36690>>>    End_Object
36691>>>    
36691>>>    Procedure OnBeforeShow
36694>>>        // Each time this view is shown we will update the appropriate information.
36694>>>    End_Procedure
36695>>>
36695>>>End_Object
36696>    Use ZoomSchoolHouse.wo
Including file: ZoomSchoolHouse.wo    (C:\Users\Usuario\Desktop\Trabajo Jaime\Trabajos\WorkspaceSchoolStudent\AppSrc\ZoomSchoolHouse.wo)
36696>>>// C:\Users\Usuario\Desktop\Trabajo Jaime\Trabajos\WorkspaceSchoolStudent\AppSrc\ZoomSchoolHouse.wo
36696>>>// ZoomSchoolHouse
36696>>>//
36696>>>
36696>>>Use cWebView.pkg
36696>>>Use cWebPanel.pkg
36696>>>Use cWebMenuGroup.pkg
36696>>>Use cWebMenuItem.pkg
36696>>>Use cWebForm.pkg
36696>>>Use cWebEdit.pkg
36696>>>
36696>>>Use cschoolhouseDataDictionary.dd
Including file: cschoolhouseDataDictionary.dd    (C:\Users\Usuario\Desktop\Trabajo Jaime\Trabajos\WorkspaceSchoolStudent\DDSrc\cschoolhouseDataDictionary.dd)
36696>>>>>Use DataDict.pkg
36696>>>>>Use ValidadorEmail.pkg
Including file: ValidadorEmail.pkg    (C:\Users\Usuario\Desktop\Trabajo Jaime\Trabajos\WorkspaceSchoolStudent\AppSrc\ValidadorEmail.pkg)
36696>>>>>>>Define cSimbolos for "!#$%&'*/\=?^+, `{|}~[]"
36696>>>>>>>
36696>>>>>>>Use cJsonHttpTransfer.pkg
Including file: cJsonHttpTransfer.pkg    (C:\Program Files\DataFlex 24.0\Pkg\cJsonHttpTransfer.pkg)
36696>>>>>>>>>// DF JSON internet transfer class definitions.
36696>>>>>>>>>Use cHttpTransfer.pkg
Including file: cHttpTransfer.pkg    (C:\Program Files\DataFlex 24.0\Pkg\cHttpTransfer.pkg)
36696>>>>>>>>>>>Use VDFBase.pkg
36696>>>>>>>>>>>Use GlobalFunctionsProcedures.pkg
36696>>>>>>>>>>>
36696>>>>>>>>>>>External_Function WinAPI_HttpQueryInfo "HttpQueryInfoW" WinInet.dll ;    Handle hRequest ;    DWord dwInfoLevel ;    Pointer lpBuffer ;    Pointer lpdwBufferLength ;    Pointer lpdwIndex ;    Returns Integer
36697>>>>>>>>>>>
36697>>>>>>>>>>>/*BOOL InternetSetOptionW(  [in] HINTERNET hInternet,  [in] DWORD     dwOption,  [in] LPVOID    lpBuffer,  [in] DWORD     dwBufferLength);*/
36697>>>>>>>>>>>External_Function WinAPI_InternetSetOption "InternetSetOptionW" WinInet.dll ;    Handle hInternet ;    DWord dwOption ;    Pointer lpBuffer ;    DWord dwBufferLength ;    Returns Integer
36698>>>>>>>>>>>
36698>>>>>>>>>>>/*BOOL InternetQueryOptionW(  [in]      HINTERNET hInternet,  [in]      DWORD     dwOption,  [out]     LPVOID    lpBuffer,  [in, out] LPDWORD   lpdwBufferLength);*/
36698>>>>>>>>>>>External_Function WinAPI_InternetQueryOption "InternetQueryOptionW" WinInet.dll ;    Handle hInternet ;    DWord dwOption ;    Pointer lpBuffer ;    Pointer lpdwBufferLength ;    Returns Integer
36699>>>>>>>>>>>
36699>>>>>>>>>>>
36699>>>>>>>>>>>//  Available options for dwInfoLevel of WinAPI_HttpQueryInfo
36699>>>>>>>>>>>Define HTTP_QUERY_MIME_VERSION                for 0
36699>>>>>>>>>>>Define HTTP_QUERY_CONTENT_TYPE                for 1
36699>>>>>>>>>>>Define HTTP_QUERY_CONTENT_TRANSFER_ENCODING   for 2
36699>>>>>>>>>>>Define HTTP_QUERY_CONTENT_ID                  for 3
36699>>>>>>>>>>>Define HTTP_QUERY_CONTENT_DESCRIPTION         for 4
36699>>>>>>>>>>>Define HTTP_QUERY_CONTENT_LENGTH              for 5
36699>>>>>>>>>>>Define HTTP_QUERY_CONTENT_LANGUAGE            for 6
36699>>>>>>>>>>>Define HTTP_QUERY_ALLOW                       for 7
36699>>>>>>>>>>>Define HTTP_QUERY_PUBLIC                      for 8
36699>>>>>>>>>>>Define HTTP_QUERY_DATE                        for 9
36699>>>>>>>>>>>Define HTTP_QUERY_EXPIRES                     for 10
36699>>>>>>>>>>>Define HTTP_QUERY_LAST_MODIFIED               for 11
36699>>>>>>>>>>>Define HTTP_QUERY_MESSAGE_ID                  for 12
36699>>>>>>>>>>>Define HTTP_QUERY_URI                         for 13
36699>>>>>>>>>>>Define HTTP_QUERY_DERIVED_FROM                for 14
36699>>>>>>>>>>>Define HTTP_QUERY_COST                        for 15
36699>>>>>>>>>>>Define HTTP_QUERY_LINK                        for 16
36699>>>>>>>>>>>Define HTTP_QUERY_PRAGMA                      for 17
36699>>>>>>>>>>>Define HTTP_QUERY_VERSION                     for 18  // special: part of status line
36699>>>>>>>>>>>Define HTTP_QUERY_STATUS_CODE                 for 19  // special: part of status line
36699>>>>>>>>>>>Define HTTP_QUERY_STATUS_TEXT                 for 20  // special: part of status line
36699>>>>>>>>>>>Define HTTP_QUERY_RAW_HEADERS                 for 21  // special: all headers as ASCIIZ
36699>>>>>>>>>>>Define HTTP_QUERY_RAW_HEADERS_CRLF            for 22  // special: all headers
36699>>>>>>>>>>>Define HTTP_QUERY_CONNECTION                  for 23
36699>>>>>>>>>>>Define HTTP_QUERY_ACCEPT                      for 24
36699>>>>>>>>>>>Define HTTP_QUERY_ACCEPT_CHARSET              for 25
36699>>>>>>>>>>>Define HTTP_QUERY_ACCEPT_ENCODING             for 26
36699>>>>>>>>>>>Define HTTP_QUERY_ACCEPT_LANGUAGE             for 27
36699>>>>>>>>>>>Define HTTP_QUERY_AUTHORIZATION               for 28
36699>>>>>>>>>>>Define HTTP_QUERY_CONTENT_ENCODING            for 29
36699>>>>>>>>>>>Define HTTP_QUERY_FORWARDED                   for 30
36699>>>>>>>>>>>Define HTTP_QUERY_FROM                        for 31
36699>>>>>>>>>>>Define HTTP_QUERY_IF_MODIFIED_SINCE           for 32
36699>>>>>>>>>>>Define HTTP_QUERY_LOCATION                    for 33
36699>>>>>>>>>>>Define HTTP_QUERY_ORIG_URI                    for 34
36699>>>>>>>>>>>Define HTTP_QUERY_REFERER                     for 35
36699>>>>>>>>>>>Define HTTP_QUERY_RETRY_AFTER                 for 36
36699>>>>>>>>>>>Define HTTP_QUERY_SERVER                      for 37
36699>>>>>>>>>>>Define HTTP_QUERY_TITLE                       for 38
36699>>>>>>>>>>>Define HTTP_QUERY_USER_AGENT                  for 39
36699>>>>>>>>>>>Define HTTP_QUERY_WWW_AUTHENTICATE            for 40
36699>>>>>>>>>>>Define HTTP_QUERY_PROXY_AUTHENTICATE          for 41
36699>>>>>>>>>>>Define HTTP_QUERY_ACCEPT_RANGES               for 42
36699>>>>>>>>>>>Define HTTP_QUERY_SET_COOKIE                  for 43
36699>>>>>>>>>>>Define HTTP_QUERY_COOKIE                      for 44
36699>>>>>>>>>>>Define HTTP_QUERY_REQUEST_METHOD              for 45  // special: GET/POST etc.
36699>>>>>>>>>>>Define HTTP_QUERY_REFRESH                     for 46
36699>>>>>>>>>>>Define HTTP_QUERY_CONTENT_DISPOSITION         for 47
36699>>>>>>>>>>>
36699>>>>>>>>>>>
36699>>>>>>>>>>>Class cHttpTransfer is a cBaseHttpTransfer
36700>>>>>>>>>>>    
36700>>>>>>>>>>>    Function HttpPostRequest String sFilePath String sData Integer bDataIsFile Returns Integer
36702>>>>>>>>>>>        Integer bStat
36702>>>>>>>>>>>        Get HttpPostAddrRequest sFilePath (AddressOf(sData)) (SizeOfString(sData)) bDataIsfile to bStat
36703>>>>>>>>>>>        Function_Return bStat
36704>>>>>>>>>>>    End_Function
36705>>>>>>>>>>>    
36705>>>>>>>>>>>    // This event is triggered from the runtime. It now uses UChar arrays as the data might 
36705>>>>>>>>>>>    // not be a valid string (it can be any binary data). It still calls the original event for 
36705>>>>>>>>>>>    // backwards compatibility.
36705>>>>>>>>>>>    Procedure OnDataReceivedUC String sContentType UChar[] ucData
36707>>>>>>>>>>>        Send OnDataReceived sContentType (UCharArrayToString(ucData))
36708>>>>>>>>>>>    End_Procedure
36709>>>>>>>>>>>    
36709>>>>>>>>>>>    // Only use this event if you know for sure the data is a string and make sure piBufferSize is
36709>>>>>>>>>>>    // smaller than the argument size.
36709>>>>>>>>>>>    Procedure OnDataReceived String sContentType String sData
36711>>>>>>>>>>>        
36711>>>>>>>>>>>    End_Procedure
36712>>>>>>>>>>>    
36712>>>>>>>>>>>    // Called just before the request is sent. Use this message to set options to the RequestHandle if nessecary.
36712>>>>>>>>>>>    Procedure OnPreSendRequest 
36714>>>>>>>>>>>        
36714>>>>>>>>>>>    End_Procedure
36715>>>>>>>>>>>    
36715>>>>>>>>>>>    Function HttpPutRequest String sFilePath String sData Integer bDataIsFile Returns Integer
36717>>>>>>>>>>>        Integer bStat
36717>>>>>>>>>>>        Get HttpPutAddrRequest sFilePath (AddressOf(sData)) (SizeOfString(sData)) bDataIsfile to bStat
36718>>>>>>>>>>>        Function_Return bStat
36719>>>>>>>>>>>    End_Function
36720>>>>>>>>>>>    
36720>>>>>>>>>>>    // Retrieve header information associated with the previous request.
36720>>>>>>>>>>>    Function QueryInfo DWord dwInfoLevel Returns String
36722>>>>>>>>>>>        Handle hRequestHandle
36722>>>>>>>>>>>        WString wResult
36722>>>>>>>>>>>        Integer iBufferSize iRes iVoid
36722>>>>>>>>>>>
36722>>>>>>>>>>>        Get RequestHandle to hRequestHandle
36723>>>>>>>>>>>        
36723>>>>>>>>>>>        If (hRequestHandle) Begin
36725>>>>>>>>>>>            Move 200 to iBufferSize
36726>>>>>>>>>>>            Move (Repeat(" ", iBufferSize)) to wResult
36727>>>>>>>>>>>            Move (WinAPI_HttpQueryInfo(hRequestHandle, dwInfoLevel, AddressOf(wResult), AddressOf(iBufferSize), 0)) to iRes
36728>>>>>>>>>>>            
36728>>>>>>>>>>>            If (not(iRes) and GetLastError() = 122) Begin //  Insufficient buffersize, retry with received iBufferSize value
36730>>>>>>>>>>>                Increment iBufferSize      
36731>>>>>>>>>>>                
36731>>>>>>>>>>>                Move (Repeat(" ", iBufferSize)) to wResult
36732>>>>>>>>>>>                Move (WinAPI_HttpQueryInfo(hRequestHandle, dwInfoLevel, AddressOf(wResult), AddressOf(iBufferSize), 0)) to iRes  
36733>>>>>>>>>>>            End
36733>>>>>>>>>>>>
36733>>>>>>>>>>>            
36733>>>>>>>>>>>            If (not(iRes)) Begin
36735>>>>>>>>>>>                Move (ShowLastError()) to iVoid
36736>>>>>>>>>>>            End
36736>>>>>>>>>>>>
36736>>>>>>>>>>>        End
36736>>>>>>>>>>>>
36736>>>>>>>>>>>        
36736>>>>>>>>>>>        Function_Return (CString(wResult))
36737>>>>>>>>>>>    End_Function
36738>>>>>>>>>>>    
36738>>>>>>>>>>>    // Returns the statustext returned by the previous request.
36738>>>>>>>>>>>    Function ResponseStatusText Returns String
36740>>>>>>>>>>>        String sStatus
36740>>>>>>>>>>>        
36740>>>>>>>>>>>        Get QueryInfo HTTP_QUERY_STATUS_TEXT to sStatus
36741>>>>>>>>>>>        
36741>>>>>>>>>>>        Function_Return sStatus
36742>>>>>>>>>>>    End_Function
36743>>>>>>>>>>>    
36743>>>>>>>>>>>End_Class
36744>>>>>>>>>Use cJsonObject.pkg
36744>>>>>>>>>Use GlobalFunctionsProcedures.pkg
36744>>>>>>>>>
36744>>>>>>>>>// these define the three characters that define BOM for utf8.
36744>>>>>>>>>// These serve no purpos and are rarely used. If used they must be removed
36744>>>>>>>>>Define C_BOM1 for |CI$EF
36744>>>>>>>>>Define C_BOM2 for |CI$BB
36744>>>>>>>>>Define C_BOM3 for |CI$BF
36744>>>>>>>>>
36744>>>>>>>>>
36744>>>>>>>>>
36744>>>>>>>>>// define JSON transfer status codes used by peJsonTransferStatus
36744>>>>>>>>>Enum_List
36744>>>>>>>>>    Define jtsOk                 // ok
36744>>>>>>>>>    Define jtsHttpRequestFailed  // the post/get http request returned an error
36744>>>>>>>>>    Define jtsInvalidContentType // response content type not JSON
36744>>>>>>>>>    Define jtsNotJson            // return value not JSON (could not load in object)
36744>>>>>>>>>    Define jtsError              // unspecified return error
36744>>>>>>>>>End_Enum_List
36744>>>>>>>>>
36744>>>>>>>>>
36744>>>>>>>>>Class cJsonHttpTransfer is a cHttpTransfer
36745>>>>>>>>>    
36745>>>>>>>>>    Procedure Construct_Object
36747>>>>>>>>>        Forward Send Construct_object
36749>>>>>>>>>        
36749>>>>>>>>>        Property String  psContentTypeSent "application/json; charset=utf-8"     // default content type for posted data
36750>>>>>>>>>        
36750>>>>>>>>>        Property Boolean pbClearHeaders      True         // should headers always be cleared after a post
36751>>>>>>>>>        
36751>>>>>>>>>        Property UChar[] pucDataReceived                 // maintained by object
36752>>>>>>>>>        
36752>>>>>>>>>        Property String  psContentTypeReceived ''         // content type received
36753>>>>>>>>>        
36753>>>>>>>>>        Property String  psJsonParseError ''              // Set if response JSON can't be parsed
36754>>>>>>>>>        
36754>>>>>>>>>        Property String  psContentTypeExpected 'application/json' // content type received - expected value should be contained in here.
36755>>>>>>>>>        
36755>>>>>>>>>        Property Integer peJsonTransferStatus jtsOk
36756>>>>>>>>>        
36756>>>>>>>>>        // if true, the http post does not happend and whatever was posted is just returned as a copy.
36756>>>>>>>>>        // Good for internal Testing
36756>>>>>>>>>        Property Boolean pbPostLoopTest False
36757>>>>>>>>>        
36757>>>>>>>>>        Set piBufferSize to -1  //  No chunking needed
36758>>>>>>>>>    End_Procedure
36759>>>>>>>>>    
36759>>>>>>>>>    // private helper function. Convert data passed by pointer to an JSON document.
36759>>>>>>>>>    // return 0, if error
36759>>>>>>>>>    //
36759>>>>>>>>>    Function UCharDatatoJson UChar[] ucJson Returns Handle
36761>>>>>>>>>        Integer iVoid bOk
36761>>>>>>>>>        Handle hoJson
36761>>>>>>>>>        String sError
36761>>>>>>>>>        Get Create of Desktop (RefClass(cJsonObject)) to hoJson
36762>>>>>>>>>        Get ParseUTF8 of hoJson ucJson to bOk
36763>>>>>>>>>        If not bOk Begin
36765>>>>>>>>>            // store the JSON parse error info
36765>>>>>>>>>            Get psParseError of hoJson to sError
36766>>>>>>>>>            Set psJsonParseError to sError
36767>>>>>>>>>            Send Destroy of hoJson
36768>>>>>>>>>            Move 0 to hoJson
36769>>>>>>>>>        End
36769>>>>>>>>>>
36769>>>>>>>>>        Function_Return hoJson
36770>>>>>>>>>    End_Function
36771>>>>>>>>>    
36771>>>>>>>>>    // Clear pucDataReceived
36771>>>>>>>>>    Procedure ClearDataReceived
36773>>>>>>>>>        UChar[] ucEmpty
36774>>>>>>>>>        
36774>>>>>>>>>        Set pucDataReceived to ucEmpty
36775>>>>>>>>>        Set psJsonParseError to ''
36776>>>>>>>>>    End_Procedure
36777>>>>>>>>>    
36777>>>>>>>>>    // augment to release any memor
36777>>>>>>>>>    Procedure Destroy_Object
36779>>>>>>>>>        Send ClearDataReceived
36780>>>>>>>>>        Forward Send Destroy_object
36782>>>>>>>>>    End_Procedure
36783>>>>>>>>>    
36783>>>>>>>>>    // called during http transfer. Take passed data and append to pucDataReceived.
36783>>>>>>>>>    // If new transfer save contenttype.
36783>>>>>>>>>    Procedure OnDataReceivedUC String sContentType UChar[] ucData
36785>>>>>>>>>        UChar[] ucBuffer
36786>>>>>>>>>        Integer iDataLen
36786>>>>>>>>>        
36786>>>>>>>>>        Move (SizeOfArray(ucData)) to iDataLen
36787>>>>>>>>>        
36787>>>>>>>>>        If (iDataLen > 0) Begin
36789>>>>>>>>>            Get pucDataReceived to ucBuffer
36790>>>>>>>>>            If (SizeOfArray(ucBuffer) > 0) Begin
36792>>>>>>>>>                Set pucDataReceived to (AppendArray(ucBuffer, ucData))
36793>>>>>>>>>            End
36793>>>>>>>>>>
36793>>>>>>>>>            Else Begin
36794>>>>>>>>>                Set psContentTypeReceived to sContentType
36795>>>>>>>>>                
36795>>>>>>>>>                If (iDataLen > 3 and ucData[0]=C_BOM1 and ucData[1]=C_BOM2 and ucData[2]=C_BOM3) Begin
36797>>>>>>>>>                    Set pucDataReceived to (CopyArray(ucData, 3, iDataLen - 1))
36798>>>>>>>>>                End
36798>>>>>>>>>>
36798>>>>>>>>>                Else Begin
36799>>>>>>>>>                    Set pucDataReceived to ucData
36800>>>>>>>>>                End
36800>>>>>>>>>>
36800>>>>>>>>>            End
36800>>>>>>>>>>
36800>>>>>>>>>        End
36800>>>>>>>>>>
36800>>>>>>>>>    End_Procedure
36801>>>>>>>>>    
36801>>>>>>>>>    Function LoopDataBack UChar[] ucData Returns Boolean
36803>>>>>>>>>        Pointer pInData
36803>>>>>>>>>        Boolean bOk
36803>>>>>>>>>        
36803>>>>>>>>>        Set pucDataReceived to ucData
36804>>>>>>>>>        Set psContentTypeReceived to (psContentTypeExpected(Self))
36805>>>>>>>>>        
36805>>>>>>>>>        Function_Return True
36806>>>>>>>>>    End_Function
36807>>>>>>>>>    
36807>>>>>>>>>    
36807>>>>>>>>>    Function HttpVerbJsonAddrExec String sHost String sFilePath Pointer pJson Integer iLen String sVerb  Returns Boolean
36809>>>>>>>>>        Boolean bOk
36809>>>>>>>>>        Integer iError
36809>>>>>>>>>        String sContentType
36809>>>>>>>>>        
36809>>>>>>>>>        Send ClearDataReceived  // this should be zero, just in case it is not
36810>>>>>>>>>        Set psRemoteHost to sHost
36811>>>>>>>>>        
36811>>>>>>>>>        Get psContentTypeSent to sContentType
36812>>>>>>>>>        If (iLen > 0 and sContentType <> "") Begin
36814>>>>>>>>>            Get AddHeader "Content-Type" sContentType to bok
36815>>>>>>>>>        End
36815>>>>>>>>>>
36815>>>>>>>>>        Get HttpVerbAddrRequest sFilePath pJson iLen False sVerb to bOK
36816>>>>>>>>>        
36816>>>>>>>>>        // You need to clear headers between posts. If you need to set custom headers you should
36816>>>>>>>>>        // set pbClearHeaders to false and then manually send ClearHeaders and AddHeaders in your code
36816>>>>>>>>>        If (pbClearHeaders(Self)) ;            Send ClearHeaders
36819>>>>>>>>>        
36819>>>>>>>>>        
36819>>>>>>>>>        Function_Return bOk
36820>>>>>>>>>    End_Function
36821>>>>>>>>>    
36821>>>>>>>>>    // We assume but do not verify that the data in ucJson is actually UTF8 JSON
36821>>>>>>>>>    Function HttpVerbJsonUChar String sHost String sFilePath UChar[] ucJson String sVerb Returns UChar[]
36823>>>>>>>>>        Integer iLen
36823>>>>>>>>>        Boolean bOk
36823>>>>>>>>>        UChar[] ucJsonReceived
36824>>>>>>>>>        String sContentTypeReceived sContentTypeExpected
36824>>>>>>>>>        
36824>>>>>>>>>        Move (SizeOfArray(ucJson)) to iLen
36825>>>>>>>>>        
36825>>>>>>>>>        If (pbPostLoopTest(Self)) Begin
36827>>>>>>>>>            Get LoopDataBack ucJson to bOk
36828>>>>>>>>>        End
36828>>>>>>>>>>
36828>>>>>>>>>        Else Begin
36829>>>>>>>>>            Get HttpVerbJsonAddrExec sHost sFilePath (AddressOf(ucJson)) iLen sVerb to bOk
36830>>>>>>>>>        End
36830>>>>>>>>>>
36830>>>>>>>>>                
36830>>>>>>>>>        If bOk Begin
36832>>>>>>>>>            Set peJsonTransferStatus to jtsOk
36833>>>>>>>>>            Get pucDataReceived to ucJsonReceived
36834>>>>>>>>>            
36834>>>>>>>>>            If (SizeOfArray(ucJsonReceived) > 0) Begin
36836>>>>>>>>>                // we have data, check that the content type is ok. This is as far
36836>>>>>>>>>                // as we can go here.
36836>>>>>>>>>                Get psContentTypeReceived to sContentTypeReceived
36837>>>>>>>>>                Get psContentTypeExpected to sContentTypeExpected
36838>>>>>>>>>                // If contentType expected is empty, we allow anything
36838>>>>>>>>>                If (sContentTypeExpected<>"" and pos(lowercase(sContentTypeExpected),lowercase(sContentTypeReceived))=0) Begin
36840>>>>>>>>>                    Set peJsonTransferStatus to jtsInvalidContentType
36841>>>>>>>>>                End
36841>>>>>>>>>>
36841>>>>>>>>>            End
36841>>>>>>>>>>
36841>>>>>>>>>        End
36841>>>>>>>>>>
36841>>>>>>>>>        Else Begin
36842>>>>>>>>>            Set peJsonTransferStatus to jtsHttpRequestFailed
36843>>>>>>>>>        End
36843>>>>>>>>>>
36843>>>>>>>>>                
36843>>>>>>>>>        Function_Return ucJsonReceived
36844>>>>>>>>>    End_Function
36845>>>>>>>>>    
36845>>>>>>>>>    // Generic HTTP Request - it is passed the Verb. Used by all other http requests
36845>>>>>>>>>    Function HttpVerbJson  String sHost String sFilePath Handle  hoJsonRequest String sVerb Boolean ByRef bOk Returns Handle
36847>>>>>>>>>        UChar[] ucJsonRequest ucJsonResponse
36849>>>>>>>>>        Handle hoJsonResponse
36849>>>>>>>>>        Integer eStat
36849>>>>>>>>>        
36849>>>>>>>>>        If (hoJsonRequest<>0) Begin
36851>>>>>>>>>            Get StringifyUTF8 of hoJsonRequest to ucJsonRequest
36852>>>>>>>>>        End
36852>>>>>>>>>>
36852>>>>>>>>>        
36852>>>>>>>>>        Get HttpVerbJsonUChar sHost sFilePath ucJsonRequest sVerb to ucJsonResponse
36853>>>>>>>>>        
36853>>>>>>>>>        If (SizeOfArray(ucJsonResponse)) Begin
36855>>>>>>>>>            Get UCharDatatoJson ucJsonResponse to hoJsonResponse
36856>>>>>>>>>            If (hoJsonResponse=0) Begin
36858>>>>>>>>>                // this indicates that data was returned but it could not be loaded as Json
36858>>>>>>>>>                Set peJsonTransferStatus to jtsNotJson
36859>>>>>>>>>                // note bad data is still is ppDataReceived (might be useful for debugging)
36859>>>>>>>>>            End
36859>>>>>>>>>>
36859>>>>>>>>>        End
36859>>>>>>>>>>
36859>>>>>>>>>        
36859>>>>>>>>>        // return Ok status by reference
36859>>>>>>>>>        Get peJsonTransferStatus to eStat
36860>>>>>>>>>        Move (eStat=jtsOk) to bOk
36861>>>>>>>>>        
36861>>>>>>>>>        Function_Return hoJsonResponse
36862>>>>>>>>>    End_Function
36863>>>>>>>>>    
36863>>>>>>>>>    Function HttpPostJson String sHost String sFilePath Handle hoJsonRequest Boolean ByRef bOk Returns Handle
36865>>>>>>>>>        Handle hoJson
36865>>>>>>>>>        Get HttpVerbJson sHost sFilePath hoJsonRequest "POST" (&bOk) to hoJson
36866>>>>>>>>>        Function_Return hoJson
36867>>>>>>>>>    End_Function
36868>>>>>>>>>    
36868>>>>>>>>>    Function HttpGetJson String sHost String sFilePath Boolean ByRef bOk Returns Handle
36870>>>>>>>>>        Pointer pJson
36870>>>>>>>>>        Integer iVoid iLen
36870>>>>>>>>>        Handle hoJson
36870>>>>>>>>>        Get HttpVerbJson sHost sFilePath 0 "GET" (&bOk) to hoJson
36871>>>>>>>>>        Function_Return hoJson
36872>>>>>>>>>    End_Function
36873>>>>>>>>>    
36873>>>>>>>>>    Function HttpPutJson String sHost String sFilePath Handle hoJsonRequest Boolean ByRef bOk Returns Handle
36875>>>>>>>>>        Handle hoJson
36875>>>>>>>>>        Get HttpVerbJson sHost sFilePath hoJsonRequest "PUT" (&bOk) to hoJson
36876>>>>>>>>>        Function_Return hoJson
36877>>>>>>>>>    End_Function
36878>>>>>>>>>    
36878>>>>>>>>>    Function HttpDeleteJson String sHost String sFilePath Handle hoJsonRequest Boolean ByRef bOk Returns Handle
36880>>>>>>>>>        Handle hoJson
36880>>>>>>>>>        Get HttpVerbJson sHost sFilePath hoJsonRequest "DELETE" (&bOk) to hoJson
36881>>>>>>>>>        Function_Return hoJson
36882>>>>>>>>>    End_Function
36883>>>>>>>>>    
36883>>>>>>>>>    Function HttpPatchJson  String sHost String sFilePath Handle hoJsonRequest Boolean ByRef bOk Returns Handle
36885>>>>>>>>>        Handle hoJson
36885>>>>>>>>>        Get HttpVerbJson sHost sFilePath hoJsonRequest "PATCH" (&bOk) to hoJson
36886>>>>>>>>>        Function_Return hoJson
36887>>>>>>>>>    End_Function
36888>>>>>>>>>    
36888>>>>>>>>>    // After an Json xfer request this message can be sent to display an error message if one occurred.
36888>>>>>>>>>    // Normally you would first check peJsonTransferStatus to see if it is not jtsOk. If not, send
36888>>>>>>>>>    // LastError to see the error
36888>>>>>>>>>    
36888>>>>>>>>>    // return last JSON transfer error text
36888>>>>>>>>>    Function TransferErrorDescription Returns String
36890>>>>>>>>>        String  sError sJsonError
36890>>>>>>>>>        Integer eJsonTransferStatus
36890>>>>>>>>>        Get peJsonTransferStatus to eJsonTransferStatus
36891>>>>>>>>>        Get psJsonParseError to sJsonError
36892>>>>>>>>>        Case Begin
36892>>>>>>>>>            Case (eJsonTransferStatus=jtsOk) ;                Move '' to sError
36895>>>>>>>>>            Case (eJsonTransferStatus=jtsHttpRequestFailed) ;                Move C_$HttpRequestFailed to sError
36899>>>>>>>>>            Case (eJsonTransferStatus=jtsInvalidContentType) ;                Move (SFormat(C_$InvalidContentTypeReceived,psContentTypeReceived(Self))) to sError
36903>>>>>>>>>            Case (eJsonTransferStatus=jtsNotJson) ;                Move (C_$ReceivedDataNotInJsonFormat * sJsonError) to sError
36907>>>>>>>>>            Case Else ;                Move C_$ReceivedDataIsBad to sError
36909>>>>>>>>>        Case End
36909>>>>>>>>>        Function_Return sError
36910>>>>>>>>>    End_Function
36911>>>>>>>>>    
36911>>>>>>>>>    // can be send to raise an error.
36911>>>>>>>>>    Procedure LastError
36913>>>>>>>>>        Integer eJsonTransferStatus
36913>>>>>>>>>        String sError
36913>>>>>>>>>        
36913>>>>>>>>>        Get peJsonTransferStatus to eJsonTransferStatus
36914>>>>>>>>>        If (eJsonTransferStatus<>jtsOk) Begin
36916>>>>>>>>>            Get TransferErrorDescription to sError
36917>>>>>>>>>            Error DFERR_JSON_HTTP sError
36918>>>>>>>>>>
36918>>>>>>>>>        End
36918>>>>>>>>>>
36918>>>>>>>>>    End_Procedure
36919>>>>>>>>>    
36919>>>>>>>>>    
36919>>>>>>>>>End_Class
36920>>>>>>>
36920>>>>>>>Function ValidadorEmail String sCorreo String ByRef sMsg Returns Boolean
36923>>>>>>>    
36923>>>>>>>    Boolean bRet
36923>>>>>>>
36923>>>>>>>    // Comprobamos que se haya introducido algun valor
36923>>>>>>>    If (Length(sCorreo) = 0) Begin
36925>>>>>>>        Move "No se ha ingresado correo electronico" to sMsg
36926>>>>>>>        Function_Return False
36927>>>>>>>    End
36927>>>>>>>>
36927>>>>>>>    
36927>>>>>>>    If (Length(sCorreo) > 256 and (not(Length(sCorreo) = 0))) Begin
36929>>>>>>>        Move "El correo electronico introducido tiene mas de 256 caracteres" to sMsg
36930>>>>>>>        Function_Return False
36931>>>>>>>    End 
36931>>>>>>>>
36931>>>>>>>    
36931>>>>>>>    //Validacion propia
36931>>>>>>>    Get IsEmail sCorreo to bRet
36932>>>>>>>    If (not(bRet)) Begin
36934>>>>>>>        Move "El correo no tiene un formato correcto segun la funcion propia" to sMsg
36935>>>>>>>    End
36935>>>>>>>>
36935>>>>>>>    Else Begin
36936>>>>>>>        Move "El correo tiene un formato correcto segun la funcion propia" to sMsg
36937>>>>>>>    End
36937>>>>>>>>
36937>>>>>>>    
36937>>>>>>>//    Get validacionAPI sCorreo to bRet
36937>>>>>>>//    If (not(bRet)) Begin
36937>>>>>>>//        Move "Introduzca un correo valido" to sMsg
36937>>>>>>>//    End
36937>>>>>>>//    Else Begin
36937>>>>>>>//        Move "El correo es valido segun la API de neutrino" to sMsg
36937>>>>>>>//    End
36937>>>>>>>    
36937>>>>>>>    Function_Return (not(bRet))
36938>>>>>>>End_Function
36939>>>>>>>
36939>>>>>>>
36939>>>>>>>
36939>>>>>>>
36939>>>>>>>// Funcion que comprueba los distintos requisitos del formato de un correo electronico
36939>>>>>>>Function IsEmail String sCorreo Returns Boolean
36942>>>>>>>    
36942>>>>>>>    Integer iCount iCountAux iLengthString
36942>>>>>>>    String sCaracter
36942>>>>>>>    Boolean bRet
36942>>>>>>>    
36942>>>>>>>    Move (Length(sCorreo)) to iLengthString
36943>>>>>>>    //Comprobamos que el primer caracter no sea un simbolo valido en vez de numero o letra
36943>>>>>>>    If ((Left(sCorreo, 1) = ".") or (Left(sCorreo, 1) = "-") or (Left(sCorreo, 1) = "_") or (Left(sCorreo, 1) = "@")) Begin
36945>>>>>>>        //Move "El correo no puede comenzar por un simbolo" to sMsg
36945>>>>>>>        Function_Return False
36946>>>>>>>    End
36946>>>>>>>>
36946>>>>>>>    
36946>>>>>>>    For iCount from 1 to (iLengthString)
36952>>>>>>>>
36952>>>>>>>        Move (Mid(sCorreo,1,iCount)) to sCaracter
36953>>>>>>>        
36953>>>>>>>        // Comprobamos que el caracter no sea un simbolo prohibido
36953>>>>>>>        Get ComprobarSimbolos sCaracter to bRet
36954>>>>>>>        If (bRet) Begin
36956>>>>>>>            //Move "Se ha ingresado un simbolo no permitido (simbolos permitidos . - _)" to sMsg
36956>>>>>>>            Function_Return False
36957>>>>>>>        End
36957>>>>>>>>
36957>>>>>>>        
36957>>>>>>>        // Comprobamos que no haya 2 puntos juntos
36957>>>>>>>        If ((sCaracter = ".") and (Mid(sCorreo,1,iCount+1) = ".")) Begin
36959>>>>>>>            //Move "El correo no puede contener dos puntos seguidos" to sMsg
36959>>>>>>>            Function_Return False
36960>>>>>>>        End
36960>>>>>>>>
36960>>>>>>>        
36960>>>>>>>        // Comprobamos que antes de la @ haya un minimo de caracteres y un maximo
36960>>>>>>>        If ((sCaracter = "@") and (iCount > 1) and (iCount < 66)) Begin
36962>>>>>>>            Move (iCountAux+1) to iCountAux
36963>>>>>>>        End
36963>>>>>>>>
36963>>>>>>>        
36963>>>>>>>        // Comprobamos si (desde la derecha) la 3, 4 o 5 posicion es un .
36963>>>>>>>        If (not((Mid(sCorreo,1,iLengthString-2) = ".") or (Mid(sCorreo,1,iLengthString-3) = ".") or (Mid(sCorreo,1,iLengthString-4) = "."))) Begin
36965>>>>>>>            //Move "Tras el '.' de dominio, solo se podran escribir entre 2 y 4 caracteres" to sMsg
36965>>>>>>>            Function_Return False
36966>>>>>>>        End
36966>>>>>>>>
36966>>>>>>>    Loop
36967>>>>>>>>
36967>>>>>>>    
36967>>>>>>>    // Comprobamos que solo haya una @ en el correo
36967>>>>>>>    If (iCountAux = 1) Begin
36969>>>>>>>        Function_Return True
36970>>>>>>>    End 
36970>>>>>>>>
36970>>>>>>>    Else If (iCountAux > 1) Begin 
36973>>>>>>>         //Move "No puede introducir 2 '@'" to sMsg
36973>>>>>>>    End
36973>>>>>>>>
36973>>>>>>>    
36973>>>>>>>End_Function
36974>>>>>>>
36974>>>>>>>// Comprobador de simbolos permitidos
36974>>>>>>>Function ComprobarSimbolos String sCaracter Returns Boolean
36977>>>>>>>    Integer iCount
36977>>>>>>>    String sSimbolosProhibidos
36977>>>>>>>    
36977>>>>>>>    For iCount from 1 to (Length(cSimbolos))
36983>>>>>>>>
36983>>>>>>>        Move (Mid(cSimbolos,1,iCount)) to sSimbolosProhibidos
36984>>>>>>>        If (sCaracter = sSimbolosProhibidos) Begin
36986>>>>>>>            Function_Return True
36987>>>>>>>        End
36987>>>>>>>>
36987>>>>>>>    Loop
36988>>>>>>>>
36988>>>>>>>End_Function
36989>>>>>>>
36989>>>>>>>// FUNCION PARA CONSUMIR API NEUTRINO
36989>>>>>>>
36989>>>>>>>Function validacionAPI String sEmail Returns Boolean
36992>>>>>>>    Handle hoHttp hoJsonRequest hoResponse
36992>>>>>>>    Boolean bRet bIsnull
36992>>>>>>>    String sResponse
36992>>>>>>>    
36992>>>>>>>    // https://www.neutrinoapi.com/api/email-validate/
36992>>>>>>>    
36992>>>>>>>    Get Create (RefClass(cJsonHttpTransfer)) to hoHttp
36993>>>>>>>    Get Create (RefClass(cJsonObject))       to hoJsonRequest
36994>>>>>>>    
36994>>>>>>>    Send InitializeJsonType of hoJsonRequest jsonTypeObject
36995>>>>>>>    
36995>>>>>>>    Send SetMemberValue of hoJsonRequest "email"        jsonTypeString  sEmail
36996>>>>>>>    Send SetMemberValue of hoJsonRequest "fix-typos"    jsonTypeBoolean False
36997>>>>>>>    
36997>>>>>>>    Get AddHeader of hoHttp "User-ID" "Jaime1346" to bRet
36998>>>>>>>    Get AddHeader of hoHttp "API-Key" "5jiDCPbsFp2LBaN3p9F2uXc4KvrrT3ZizN5ac1Rrfjc9cVj6" to bRet
36999>>>>>>>    
36999>>>>>>>    Get HttpPostJson of hoHttp "neutrinoapi.net" "/email-validate" hoJsonRequest (&bRet) to hoResponse
37000>>>>>>>    
37000>>>>>>>    
37000>>>>>>>    If (bRet and (ResponseStatusCode(hoHttp) = 200)) Begin
37002>>>>>>>        //Send Info_Box (Stringify(hoResponse)) "Respuesta de la API"
37002>>>>>>>        If (HasMember(hoResponse,"valid")) Begin
37004>>>>>>>            Get IsMemberOfJsonType of hoResponse "valid" jsonTypeNull to bIsnull
37005>>>>>>>            If (bIsnull) Begin
37007>>>>>>>                Function_Return False
37008>>>>>>>            End
37008>>>>>>>>
37008>>>>>>>            Else Begin
37009>>>>>>>                Get MemberValue of hoResponse "valid" to sResponse
37010>>>>>>>                If (sResponse = "1") Begin
37012>>>>>>>                End
37012>>>>>>>>
37012>>>>>>>                Else Begin
37013>>>>>>>                    Function_Return False
37014>>>>>>>                End
37014>>>>>>>>
37014>>>>>>>            End
37014>>>>>>>>
37014>>>>>>>        End
37014>>>>>>>>
37014>>>>>>>        If (HasMember(hoResponse,"is-disposable")) Begin
37016>>>>>>>            Get IsMemberOfJsonType of hoResponse "is-disposable" jsonTypeNull to bIsnull
37017>>>>>>>            If (bIsnull) Begin
37019>>>>>>>                Function_Return False
37020>>>>>>>            End
37020>>>>>>>>
37020>>>>>>>            Else Begin
37021>>>>>>>                Get MemberValue of hoResponse "is-disposable" to sResponse
37022>>>>>>>                If (sResponse = "0") Begin
37024>>>>>>>                    //Send Info_Box "El correo no es temporal" ""
37024>>>>>>>                    Function_Return True
37025>>>>>>>                End
37025>>>>>>>>
37025>>>>>>>                Else Begin
37026>>>>>>>                    //Move "El correo es temporal" to sMsg
37026>>>>>>>                    Function_Return False
37027>>>>>>>                End
37027>>>>>>>>
37027>>>>>>>            End
37027>>>>>>>>
37027>>>>>>>        End
37027>>>>>>>>
37027>>>>>>>        
37027>>>>>>>    End
37027>>>>>>>>
37027>>>>>>>    
37027>>>>>>>    
37027>>>>>>>    
37027>>>>>>>End_Function
37028>>>>>
37028>>>>>Open schoolhouse
Including file: schoolhouse.fd    (C:\Users\Usuario\Desktop\Trabajo Jaime\Trabajos\WorkspaceSchoolStudent\DDSrc\schoolhouse.fd)
37030>>>>>Open student
Including file: student.fd    (C:\Users\Usuario\Desktop\Trabajo Jaime\Trabajos\WorkspaceSchoolStudent\DDSrc\student.fd)
37032>>>>>
37032>>>>>Register_Function validarError_Email Integer iField Returns Boolean
37032>>>>>Class cschoolhouseDataDictionary is a DataDictionary
37033>>>>>    
37033>>>>>    Procedure Construct_Object
37035>>>>>        Forward Send Construct_Object
37037>>>>>        Set Main_File to schoolhouse.File_Number
37038>>>>>
37038>>>>>        Set Add_Client_File to student.File_Number
37039>>>>>
37039>>>>>        Set Foreign_Field_Option DD_KEYFIELD DD_NOPUT to True
37040>>>>>        Set Foreign_Field_Option DD_KEYFIELD DD_FINDREQ to True
37041>>>>>        Set Foreign_Field_Option DD_INDEXFIELD DD_NOPUT to True
37042>>>>>        Set Foreign_Field_Option DD_DEFAULT DD_DISPLAYONLY to True
37043>>>>>
37043>>>>>        Set Key_Field_State Field schoolhouse.ID to True
37044>>>>>
37044>>>>>        Set Field_Option Field schoolhouse.Name DD_REQUIRED to True
37045>>>>>        
37045>>>>>        Set Field_Option Field schoolhouse.Email DD_REQUIRED to True
37046>>>>>        Set Field_Option Field schoolhouse.City DD_REQUIRED to True
37047>>>>>        
37047>>>>>        Set Field_Validate_msg Field schoolhouse.Email to get_validarError_Email
37048>>>>>    End_Procedure
37049>>>>>
37049>>>>>
37049>>>>>    Function validarError_Email Integer iField Returns Boolean
37051>>>>>        Boolean bRet
37051>>>>>        String sMsg sEmail
37051>>>>>        
37051>>>>>        Get Field_Current_Value Field schoolhouse.Email to sEmail
37052>>>>>        Get ValidadorEmail sEmail (&sMsg) to bRet
37053>>>>>        
37053>>>>>        If (bRet) Begin
37055>>>>>            Send Data_set_error iField DFERR_OPERATOR sMsg
37056>>>>>        End
37056>>>>>>
37056>>>>>        Function_Return (bRet)
37057>>>>>        
37057>>>>>    End_Function
37058>>>>>    
37058>>>>>End_Class
37059>>>
37059>>>Object oZoomSchoolHouse is a cWebView
37061>>>    Set piColumnCount to 12
37062>>>    Set psCaption to "ZoomSchoolHouse"
37063>>>    Set peWebViewStyle to wvsDrilldown
37064>>>    Set peViewType to vtZoom
37065>>>    Set pbShowCaption to False
37066>>>    Set Verify_Save_Msg to 0
37067>>>    Set piMaxWidth to 1024
37068>>>
37068>>>    Object oschoolhouse_DD is a cschoolhouseDataDictionary
37070>>>    End_Object 
37071>>>
37071>>>    Set Main_DD To oschoolhouse_DD
37072>>>    Set Server  To oschoolhouse_DD
37073>>>
37073>>>
37073>>>    Object oWebMainPanel is a cWebPanel
37075>>>        Set piColumnCount to 12
37076>>>        WebSetResponsive piColumnCount rmMobile to 4
37077>>>
37077>>>        Object oschoolhouseID is a cWebForm
37079>>>            Entry_Item schoolhouse.ID
37080>>>            Set piColumnSpan to 2
37081>>>            Set piColumnIndex to 0
37082>>>            Set peLabelPosition to lpTop
37083>>>            Set psLabel to "ID"
37084>>>        End_Object 
37085>>>
37085>>>        Object oschoolhouseName is a cWebForm
37087>>>            Entry_Item schoolhouse.Name
37088>>>            Set piColumnSpan to 10
37089>>>            Set piColumnIndex to 2
37090>>>            Set peLabelPosition to lpTop
37091>>>            Set psLabel to "Name"
37092>>>        End_Object 
37093>>>
37093>>>        Object oschoolhouseCounty is a cWebForm
37095>>>            Entry_Item schoolhouse.County
37096>>>            Set piColumnSpan to 12
37097>>>            Set piColumnIndex to 0
37098>>>            Set peLabelPosition to lpTop
37099>>>            Set psLabel to "County"
37100>>>        End_Object 
37101>>>
37101>>>        Object oschoolhouseZipCode is a cWebForm
37103>>>            Entry_Item schoolhouse.ZipCode
37104>>>            Set piColumnSpan to 1
37105>>>            Set piColumnIndex to 0
37106>>>            Set peLabelPosition to lpTop
37107>>>            Set psLabel to "ZipCode"
37108>>>        End_Object 
37109>>>
37109>>>        Object oschoolhouseCity is a cWebForm
37111>>>            Entry_Item schoolhouse.City
37112>>>            Set piColumnSpan to 11
37113>>>            Set piColumnIndex to 1
37114>>>            Set peLabelPosition to lpTop
37115>>>            Set psLabel to "City"
37116>>>        End_Object 
37117>>>
37117>>>        Object oschoolhouseAddress is a cWebForm
37119>>>            Entry_Item schoolhouse.Address
37120>>>            Set piColumnSpan to 12
37121>>>            Set piColumnIndex to 0
37122>>>            Set peLabelPosition to lpTop
37123>>>            Set psLabel to "Address"
37124>>>        End_Object 
37125>>>
37125>>>        Object oschoolhouseEmail is a cWebEdit
37127>>>            Entry_Item schoolhouse.Email
37128>>>            Set piColumnSpan to 0
37129>>>            Set piColumnIndex to 0
37130>>>            Set peLabelPosition to lpTop
37131>>>            Set psLabel to "Email"
37132>>>            Set piMinHeight to 150
37133>>>        End_Object 
37134>>>
37134>>>        Object oschoolhouseNotes is a cWebForm
37136>>>            Entry_Item schoolhouse.Notes
37137>>>            Set piColumnSpan to 12
37138>>>            Set piColumnIndex to 0
37139>>>            Set peLabelPosition to lpTop
37140>>>            Set psLabel to "Notes"
37141>>>        End_Object 
37142>>>
37142>>>        Object oschoolhouseModifiedTime is a cWebForm
37144>>>            Entry_Item schoolhouse.ModifiedTime
37145>>>            Set piColumnSpan to 5
37146>>>            Set piColumnIndex to 0
37147>>>            Set peLabelPosition to lpTop
37148>>>            Set psLabel to "ModifiedTime"
37149>>>        End_Object 
37150>>>
37150>>>        Object oschoolhouseCreatedTime is a cWebForm
37152>>>            Entry_Item schoolhouse.CreatedTime
37153>>>            Set piColumnSpan to 5
37154>>>            Set piColumnIndex to 0
37155>>>            Set peLabelPosition to lpTop
37156>>>            Set psLabel to "CreatedTime"
37157>>>        End_Object 
37158>>>    End_Object 
37159>>>
37159>>>    Object oActionGroup is a cWebMenuGroup
37161>>>
37161>>>        Object oSaveBtn is a cWebMenuItem
37163>>>            Set psCSSClass to "WebSaveMenuItem"
37164>>>            Set psCaption to "Save"
37165>>>
37165>>>            Procedure OnClick
37168>>>                Send Request_Save
37169>>>            End_Procedure
37170>>>
37170>>>        End_Object 
37171>>>
37171>>>        Object oEditBtn is a cWebMenuItem
37173>>>            Set psCSSClass to "WebEditMenuItem"
37174>>>            Set psCaption to "Edit"
37175>>>            Procedure OnClick
37178>>>                Send ChangeEditMode True
37179>>>                Send SetActionButtons
37180>>>            End_Procedure
37181>>>
37181>>>        End_Object 
37182>>>
37182>>>        Object oDeleteBtn is a cWebMenuItem
37184>>>            Set psCSSClass to "WebDeleteMenuItem"
37185>>>            Set psCaption to "Delete"
37186>>>            Set peActionDisplay to adMenu
37187>>>
37187>>>            Procedure OnClick
37190>>>                Send Request_Delete
37191>>>            End_Procedure
37192>>>
37192>>>        End_Object 
37193>>>
37193>>>        Object oCancelChangesBtn is a cWebMenuItem
37195>>>            Set psCSSClass to "WebIcon_Refresh"
37196>>>            Set psCaption to "Clear Changes"
37197>>>            Set peActionDisplay to adMenu
37198>>>            Procedure OnClick
37201>>>                Send RefreshRecord
37202>>>            End_Procedure
37203>>>
37203>>>        End_Object 
37204>>>    End_Object 
37205>>>
37205>>>    Procedure SetActionButtons
37208>>>        tWebNavigateData NavigateData
37208>>>        tWebNavigateData NavigateData
37208>>>        Boolean bHasRecord
37208>>>        Handle hoDD
37208>>>
37208>>>        Get Server to hoDD
37209>>>        Get GetNavigateData to NavigateData
37210>>>        Get HasRecord of hoDD to bHasRecord
37211>>>
37211>>>        // let's hide all buttons and then Show the ones we want
37211>>>        WebSet pbRender of oEditBtn to False
37212>>>        WebSet pbRender of oSaveBtn to False
37213>>>        WebSet pbRender of oCancelChangesBtn to False
37214>>>        WebSet pbRender of oDeleteBtn to False
37215>>>
37215>>>        If (NavigateData.bReadOnly) Begin
37217>>>            WebSet pbRender of oEditBtn to True
37218>>>        End
37218>>>>
37218>>>        Else Begin
37219>>>            WebSet pbRender of oSaveBtn to True
37220>>>            WebSet pbRender of oCancelChangesBtn to True
37221>>>            WebSet pbRender of oDeleteBtn to bHasRecord
37222>>>        End
37222>>>>
37222>>>    End_Procedure
37223>>>
37223>>>    Procedure OnViewSaved Handle hoServer Boolean bChanged
37226>>>        // Close after save
37226>>>        Send NavigateClose Self
37227>>>    End_Procedure
37228>>>
37228>>>    // this will close the view after a delete
37228>>>    Procedure OnViewDeleted Handle hoDDO
37231>>>        Send NavigateClose Self
37232>>>    End_Procedure
37233>>>
37233>>>    Procedure OnNavigateForward tWebNavigateData NavigateData Integer hoInvokingView Integer hoInvokingObject
37236>>>        Case Begin
37236>>>            Case (NavigateData.eNavigateType = nfFromMain)
37238>>>                // If from main, this is a propbably a main file Select to Zoom.
37238>>>                Case Break
37239>>>
37239>>>            Case (NavigateData.eNavigateType = nfFromParent)
37242>>>                // If from parent, this is a constrained drill down.
37242>>>                Case Break
37243>>>
37243>>>            Case (NavigateData.eNavigateType = nfFromChild)
37246>>>                // If from child, this is a probably a parent Zoom from a Zoom.
37246>>>                Case Break
37247>>>
37247>>>            Case Else // must be nfUndefined
37247>>>
37247>>>        Case End
37247>>>
37247>>>        Send SetActionButtons
37248>>>
37248>>>    End_Procedure
37249>>>
37249>>>End_Object 
37250>    Use ZoomStudent.wo
Including file: ZoomStudent.wo    (C:\Users\Usuario\Desktop\Trabajo Jaime\Trabajos\WorkspaceSchoolStudent\AppSrc\ZoomStudent.wo)
37250>>>// C:\Users\Usuario\Desktop\Trabajo Jaime\Trabajos\WorkspaceSchoolStudent\AppSrc\ZoomStudent.wo
37250>>>// ZoomStudent
37250>>>//
37250>>>
37250>>>Use cWebView.pkg
37250>>>Use cWebPanel.pkg
37250>>>Use cWebMenuGroup.pkg
37250>>>Use cWebMenuItem.pkg
37250>>>Use cWebForm.pkg
37250>>>Use cWebEdit.pkg
37250>>>
37250>>>Use cschoolhouseDataDictionary.dd
37250>>>Use cstudentDataDictionary.dd
Including file: cstudentDataDictionary.dd    (C:\Users\Usuario\Desktop\Trabajo Jaime\Trabajos\WorkspaceSchoolStudent\DDSrc\cstudentDataDictionary.dd)
37250>>>>>Use DataDict.pkg
37250>>>>>Use ValidadorEmail.pkg
37250>>>>>Use ValidadorDNI.pkg
Including file: ValidadorDNI.pkg    (C:\Users\Usuario\Desktop\Trabajo Jaime\Trabajos\WorkspaceSchoolStudent\AppSrc\ValidadorDNI.pkg)
37250>>>>>>>Define cLetter for "TRWAGMYFPDXBNJZSQVHLCKE"
37250>>>>>>>Define cNumeric for "0123456789"
37250>>>>>>>
37250>>>>>>>
37250>>>>>>>Function ValidadorDNI String sDNI String ByRef sMsg Returns Boolean
37253>>>>>>>    
37253>>>>>>>    Boolean bRet
37253>>>>>>>    
37253>>>>>>>    // Hacemos que el DNI se use indistintamente como mayusculas
37253>>>>>>>    Move (Uppercase(sDNI)) to sDNI
37254>>>>>>>    
37254>>>>>>>    // Comprobamos que el DNI introducido tenga el tamanno indicado y que se haya introducido algun valor
37254>>>>>>>    If (Length(sDNI) = 0) Begin
37256>>>>>>>        Move "No se ha ingresado DNI" to sMsg
37257>>>>>>>        Function_Return True
37258>>>>>>>    End
37258>>>>>>>>
37258>>>>>>>    If (Length(sDNI) <> 9 and (not(Length(sDNI) = 0))) Begin
37260>>>>>>>        Move "El DNI introducido no tiene 9 caracteres" to sMsg
37261>>>>>>>        Function_Return True
37262>>>>>>>    End
37262>>>>>>>>
37262>>>>>>>    
37262>>>>>>>    // Comprobamos que el documento introducido termine en una letra
37262>>>>>>>    Get IsLastChar sDNI to bRet
37263>>>>>>>    If (not(bRet)) Begin
37265>>>>>>>        Move "El documento debe acabar con una letra valida" to sMsg
37266>>>>>>>        Function_Return True
37267>>>>>>>    End
37267>>>>>>>>
37267>>>>>>>    
37267>>>>>>>    
37267>>>>>>>    
37267>>>>>>>    // Condicional para asegurarse de que sea letra o numero
37267>>>>>>>    If ((Left(sDNI, 1) = "X") or (Left(sDNI, 1) = "X") or (Left(sDNI, 1) = "X")) Begin
37269>>>>>>>        If (Left(sDNI, 1) = "X") Begin
37271>>>>>>>            Move (("0") + Right(sDNI,8)) to sDNI
37272>>>>>>>        End 
37272>>>>>>>>
37272>>>>>>>        If (Left(sDNI, 1) = "Y") Begin
37274>>>>>>>            Move (("1") + Right(sDNI,8)) to sDNI
37275>>>>>>>        End
37275>>>>>>>>
37275>>>>>>>        If (Left(sDNI, 1) = "Z") Begin
37277>>>>>>>            Move (("2") + Right(sDNI,8)) to sDNI
37278>>>>>>>        End
37278>>>>>>>>
37278>>>>>>>        
37278>>>>>>>        // Comprobamos que el documento introducido termine en una letra
37278>>>>>>>        
37278>>>>>>>        If (not(bRet)) Begin
37280>>>>>>>            Move "El documento debe contener una letra, 7 digitos y una letra" to sMsg
37281>>>>>>>            Function_Return True
37282>>>>>>>        End
37282>>>>>>>>
37282>>>>>>>        
37282>>>>>>>        // Comprobamos que tengamos los digitos necesarios
37282>>>>>>>        Get AreNumbers sDNI to bRet
37283>>>>>>>    End
37283>>>>>>>>
37283>>>>>>>    Else Begin
37284>>>>>>>        // Comprobamos que tengamos los digitos necesarios
37284>>>>>>>        Get AreNumbers sDNI to bRet
37285>>>>>>>        // Comprobamos que el documento introducido termine en una letra
37285>>>>>>>        If (not(bRet)) Begin
37287>>>>>>>            Move "El documento debe contener 8 digitos y una letra" to sMsg
37288>>>>>>>            Function_Return True
37289>>>>>>>        End
37289>>>>>>>>
37289>>>>>>>    End
37289>>>>>>>>
37289>>>>>>>    
37289>>>>>>>
37289>>>>>>>    
37289>>>>>>>    Get IsDNI sDNI to bRet
37290>>>>>>>    
37290>>>>>>>    If (bRet) Begin
37292>>>>>>>        Move "El documento ingresado no es correcto" to sMsg
37293>>>>>>>    End
37293>>>>>>>>
37293>>>>>>>
37293>>>>>>>    Function_Return bRet
37294>>>>>>>End_Function
37295>>>>>>>
37295>>>>>>>
37295>>>>>>>// Funcion para comprobar DNI
37295>>>>>>>Function IsDNI String sDNI Returns Boolean
37298>>>>>>>    
37298>>>>>>>    //Send Info_Box sDNI "DNI introducido"
37298>>>>>>>    String  sLetter 
37298>>>>>>>    Integer iDigitos iResto
37298>>>>>>>    
37298>>>>>>>    Move (Left(sDNI,8)) to iDigitos
37299>>>>>>>    Move (Mod(iDigitos,23)) to iResto
37300>>>>>>>    Move (Mid(cLetter,1,(iResto+1))) to sLetter
37301>>>>>>>    
37301>>>>>>>    If (Right(sDNI, 1) = sLetter) Begin
37303>>>>>>>        Function_Return False
37304>>>>>>>    End
37304>>>>>>>>
37304>>>>>>>    Else Begin
37305>>>>>>>        Function_Return True
37306>>>>>>>    End
37306>>>>>>>>
37306>>>>>>>End_Function
37307>>>>>>>
37307>>>>>>>// Funcion que comprueba si el ultimo caracter es una letra valida
37307>>>>>>>Function IsLastChar String sDNI Returns Boolean
37310>>>>>>>    Integer iCount
37310>>>>>>>    String sLetra sPosiblesLetras
37310>>>>>>>    
37310>>>>>>>    Move (Uppercase(Right(sDNI,1))) to sLetra
37311>>>>>>>    For iCount from 1 to (Length(cLetter))
37317>>>>>>>>
37317>>>>>>>        Move (Mid(cLetter,1,iCount)) to sPosiblesLetras
37318>>>>>>>        If (sLetra = sPosiblesLetras) Begin
37320>>>>>>>            Function_Return True
37321>>>>>>>        End
37321>>>>>>>>
37321>>>>>>>    Loop
37322>>>>>>>>
37322>>>>>>>End_Function
37323>>>>>>>
37323>>>>>>>// Funcion que comprueba que menos el ultimo, todos los caracteres son digitos (o conversion en los NIE)
37323>>>>>>>Function AreNumbers String sDNI Returns Boolean
37326>>>>>>>    Integer iCount iAuxCount
37326>>>>>>>    String sDigito sDigitosPosibles
37326>>>>>>>    Boolean bComprobador
37326>>>>>>> 
37326>>>>>>>    For iCount from 1 to (Length(sDNI)-1)
37332>>>>>>>>
37332>>>>>>>        
37332>>>>>>>        Move False to bComprobador
37333>>>>>>>        Move (Mid(sDNI,1,iCount)) to sDigito
37334>>>>>>>        For iAuxCount from 1 to (Length(cNumeric))
37340>>>>>>>>
37340>>>>>>>            Move (Mid(cNumeric,1,iAuxCount)) to sDigitosPosibles
37341>>>>>>>            If (sDigito = sDigitosPosibles) Begin
37343>>>>>>>                Move True to bComprobador
37344>>>>>>>            End
37344>>>>>>>>
37344>>>>>>>        Loop
37345>>>>>>>>
37345>>>>>>>
37345>>>>>>>        If (not(bComprobador)) Begin
37347>>>>>>>            Function_Return False
37348>>>>>>>        End
37348>>>>>>>>
37348>>>>>>>    Loop
37349>>>>>>>>
37349>>>>>>>    Function_Return true
37350>>>>>>>End_Function
37351>>>>>
37351>>>>>Open student
37353>>>>>Open schoolhouse
37355>>>>>
37355>>>>>Register_Function validarError_Email_student Integer iField Returns Boolean
37355>>>>>Register_Function validarError_DNI Integer iField Returns Boolean
37355>>>>>
37355>>>>>Class cstudentDataDictionary is a DataDictionary
37356>>>>>    
37356>>>>>    Procedure Construct_Object
37358>>>>>        Forward Send Construct_Object
37360>>>>>        Set Main_File to student.File_Number
37361>>>>>
37361>>>>>        Set Add_Server_File to schoolhouse.File_Number
37362>>>>>
37362>>>>>        Set Foreign_Field_Option DD_KEYFIELD DD_NOPUT to True
37363>>>>>        Set Foreign_Field_Option DD_KEYFIELD DD_FINDREQ to True
37364>>>>>        Set Foreign_Field_Option DD_INDEXFIELD DD_NOPUT to True
37365>>>>>        Set Foreign_Field_Option DD_DEFAULT DD_DISPLAYONLY to True
37366>>>>>
37366>>>>>        Set Key_Field_State Field student.ID to True
37367>>>>>
37367>>>>>        Set Field_Option Field student.Name DD_REQUIRED to True
37368>>>>>
37368>>>>>        Set Field_Option Field student.LastName DD_REQUIRED to True
37369>>>>>
37369>>>>>        Set Field_Option Field student.DNI DD_REQUIRED to True
37370>>>>>
37370>>>>>        Set Field_Option Field student.Email DD_REQUIRED to True
37371>>>>>
37371>>>>>        Set Field_Option Field student.City DD_REQUIRED to True
37372>>>>>        
37372>>>>>        Set Field_Validate_msg Field student.Email to get_validarError_Email_student
37373>>>>>        Set Field_Validate_msg Field student.DNI to get_validarError_DNI
37374>>>>>    End_Procedure
37375>>>>>
37375>>>>>    Function validarError_Email_student Integer iField Returns Boolean
37377>>>>>        Boolean bRet
37377>>>>>        String sMsg sEmail
37377>>>>>        
37377>>>>>        Get Field_Current_Value Field student.Email to sEmail
37378>>>>>        Get ValidadorEmail sEmail (&sMsg) to bRet
37379>>>>>        
37379>>>>>        If (bRet) Begin
37381>>>>>            Send Data_set_error iField DFERR_OPERATOR sMsg
37382>>>>>        End
37382>>>>>>
37382>>>>>        Function_Return (bRet)
37383>>>>>        
37383>>>>>    End_Function
37384>>>>>    
37384>>>>>     Function validarError_DNI Integer iField Returns Boolean
37386>>>>>        Boolean bRet
37386>>>>>        String sMsg sDNI
37386>>>>>        
37386>>>>>        Get Field_Current_Value Field student.DNI to sDNI
37387>>>>>        Get ValidadorDNI sDNI (&sMsg) to bRet
37388>>>>>  
37388>>>>>        If (bRet) Begin
37390>>>>>            Send Data_set_error iField DFERR_OPERATOR sMsg
37391>>>>>        End
37391>>>>>>
37391>>>>>        Function_Return (bRet)
37392>>>>>        
37392>>>>>    End_Function
37393>>>>>End_Class
37394>>>
37394>>>Object oZoomStudent is a cWebView
37396>>>    Set piColumnCount to 12
37397>>>    Set psCaption to "ZoomStudent"
37398>>>    Set peWebViewStyle to wvsDrilldown
37399>>>    Set peViewType to vtZoom
37400>>>    Set pbShowCaption to False
37401>>>    Set Verify_Save_Msg to 0
37402>>>    Set piMaxWidth to 1024
37403>>>
37403>>>    Object oschoolhouse_DD is a cschoolhouseDataDictionary
37405>>>    End_Object 
37406>>>
37406>>>    Object ostudent_DD is a cstudentDataDictionary
37408>>>        Set DDO_Server To oschoolhouse_DD
37409>>>    End_Object 
37410>>>
37410>>>    Set Main_DD To ostudent_DD
37411>>>    Set Server  To ostudent_DD
37412>>>
37412>>>
37412>>>    Object oWebMainPanel is a cWebPanel
37414>>>        Set piColumnCount to 12
37415>>>        WebSetResponsive piColumnCount rmMobile to 4
37416>>>
37416>>>        Object ostudentID is a cWebForm
37418>>>            Entry_Item student.ID
37419>>>            Set piColumnSpan to 2
37420>>>            Set piColumnIndex to 0
37421>>>            Set peLabelPosition to lpTop
37422>>>            Set psLabel to "ID"
37423>>>        End_Object 
37424>>>
37424>>>        Object ostudentName is a cWebForm
37426>>>            Entry_Item student.Name
37427>>>            Set piColumnSpan to 10
37428>>>            Set piColumnIndex to 2
37429>>>            Set peLabelPosition to lpTop
37430>>>            Set psLabel to "Name"
37431>>>        End_Object 
37432>>>
37432>>>        Object ostudentLastName is a cWebForm
37434>>>            Entry_Item student.LastName
37435>>>            Set piColumnSpan to 12
37436>>>            Set piColumnIndex to 0
37437>>>            Set peLabelPosition to lpTop
37438>>>            Set psLabel to "LastName"
37439>>>        End_Object 
37440>>>
37440>>>        Object ostudentDNI is a cWebForm
37442>>>            Entry_Item student.DNI
37443>>>            Set piColumnSpan to 2
37444>>>            Set piColumnIndex to 0
37445>>>            Set peLabelPosition to lpTop
37446>>>            Set psLabel to "DNI"
37447>>>        End_Object 
37448>>>
37448>>>        Object ostudentBirthday is a cWebForm
37450>>>            Entry_Item student.Birthday
37451>>>            Set piColumnSpan to 2
37452>>>            Set piColumnIndex to 2
37453>>>            Set peLabelPosition to lpTop
37454>>>            Set psLabel to "Birthday"
37455>>>        End_Object 
37456>>>
37456>>>        Object ostudentEmail is a cWebEdit
37458>>>            Entry_Item student.Email
37459>>>            Set piColumnSpan to 0
37460>>>            Set piColumnIndex to 4
37461>>>            Set peLabelPosition to lpTop
37462>>>            Set psLabel to "Email"
37463>>>            Set piMinHeight to 150
37464>>>        End_Object 
37465>>>
37465>>>        Object ostudentCounty is a cWebForm
37467>>>            Entry_Item student.County
37468>>>            Set piColumnSpan to 12
37469>>>            Set piColumnIndex to 0
37470>>>            Set peLabelPosition to lpTop
37471>>>            Set psLabel to "County"
37472>>>        End_Object 
37473>>>
37473>>>        Object ostudentCity is a cWebForm
37475>>>            Entry_Item student.City
37476>>>            Set piColumnSpan to 12
37477>>>            Set piColumnIndex to 0
37478>>>            Set peLabelPosition to lpTop
37479>>>            Set psLabel to "City"
37480>>>        End_Object 
37481>>>
37481>>>        Object ostudentAddress is a cWebForm
37483>>>            Entry_Item student.Address
37484>>>            Set piColumnSpan to 12
37485>>>            Set piColumnIndex to 0
37486>>>            Set peLabelPosition to lpTop
37487>>>            Set psLabel to "Address"
37488>>>        End_Object 
37489>>>
37489>>>        Object oschoolhouseID is a cWebForm
37491>>>            Entry_Item schoolhouse.ID
37492>>>            Set piColumnSpan to 2
37493>>>            Set piColumnIndex to 0
37494>>>            Set peLabelPosition to lpTop
37495>>>            Set psLabel to "SchoolHouseID"
37496>>>            Set pbPromptButton to True
37497>>>
37497>>>
37497>>>            WebRegisterPath ntNavigateForward oSelectSchoolHouse
37503>>>
37503>>>            Procedure OnPrompt
37506>>>                Send NavigatePath
37507>>>            End_Procedure
37508>>>        End_Object 
37509>>>
37509>>>        Object oschoolhouseName is a cWebForm
37511>>>            Entry_Item schoolhouse.Name
37512>>>            Set piColumnSpan to 10
37513>>>            Set piColumnIndex to 2
37514>>>            Set peLabelPosition to lpTop
37515>>>            Set psLabel to "SchoolHouseName"
37516>>>            Set pbPromptButton to True
37517>>>
37517>>>
37517>>>            WebRegisterPath ntNavigateForward oSelectSchoolHouse
37523>>>
37523>>>            Procedure OnPrompt
37526>>>                Send NavigatePath
37527>>>            End_Procedure
37528>>>        End_Object 
37529>>>
37529>>>        Object ostudentNotes is a cWebForm
37531>>>            Entry_Item student.Notes
37532>>>            Set piColumnSpan to 12
37533>>>            Set piColumnIndex to 0
37534>>>            Set peLabelPosition to lpTop
37535>>>            Set psLabel to "Notes"
37536>>>        End_Object 
37537>>>
37537>>>        Object ostudentModifiedTime is a cWebForm
37539>>>            Entry_Item student.ModifiedTime
37540>>>            Set piColumnSpan to 5
37541>>>            Set piColumnIndex to 0
37542>>>            Set peLabelPosition to lpTop
37543>>>            Set psLabel to "ModifiedTime"
37544>>>        End_Object 
37545>>>
37545>>>        Object ostudentCreatedTime is a cWebForm
37547>>>            Entry_Item student.CreatedTime
37548>>>            Set piColumnSpan to 5
37549>>>            Set piColumnIndex to 0
37550>>>            Set peLabelPosition to lpTop
37551>>>            Set psLabel to "CreatedTime"
37552>>>        End_Object 
37553>>>    End_Object 
37554>>>
37554>>>    Object oActionGroup is a cWebMenuGroup
37556>>>
37556>>>        Object oSaveBtn is a cWebMenuItem
37558>>>            Set psCSSClass to "WebSaveMenuItem"
37559>>>            Set psCaption to "Save"
37560>>>
37560>>>            Procedure OnClick
37563>>>                Send Request_Save
37564>>>            End_Procedure
37565>>>
37565>>>        End_Object 
37566>>>
37566>>>        Object oEditBtn is a cWebMenuItem
37568>>>            Set psCSSClass to "WebEditMenuItem"
37569>>>            Set psCaption to "Edit"
37570>>>            Procedure OnClick
37573>>>                Send ChangeEditMode True
37574>>>                Send SetActionButtons
37575>>>            End_Procedure
37576>>>
37576>>>        End_Object 
37577>>>
37577>>>        Object oDeleteBtn is a cWebMenuItem
37579>>>            Set psCSSClass to "WebDeleteMenuItem"
37580>>>            Set psCaption to "Delete"
37581>>>            Set peActionDisplay to adMenu
37582>>>
37582>>>            Procedure OnClick
37585>>>                Send Request_Delete
37586>>>            End_Procedure
37587>>>
37587>>>        End_Object 
37588>>>
37588>>>        Object oCancelChangesBtn is a cWebMenuItem
37590>>>            Set psCSSClass to "WebIcon_Refresh"
37591>>>            Set psCaption to "Clear Changes"
37592>>>            Set peActionDisplay to adMenu
37593>>>            Procedure OnClick
37596>>>                Send RefreshRecord
37597>>>            End_Procedure
37598>>>
37598>>>        End_Object 
37599>>>    End_Object 
37600>>>
37600>>>    Procedure SetActionButtons
37603>>>        tWebNavigateData NavigateData
37603>>>        tWebNavigateData NavigateData
37603>>>        Boolean bHasRecord
37603>>>        Handle hoDD
37603>>>
37603>>>        Get Server to hoDD
37604>>>        Get GetNavigateData to NavigateData
37605>>>        Get HasRecord of hoDD to bHasRecord
37606>>>
37606>>>        // let's hide all buttons and then Show the ones we want
37606>>>        WebSet pbRender of oEditBtn to False
37607>>>        WebSet pbRender of oSaveBtn to False
37608>>>        WebSet pbRender of oCancelChangesBtn to False
37609>>>        WebSet pbRender of oDeleteBtn to False
37610>>>
37610>>>        If (NavigateData.bReadOnly) Begin
37612>>>            WebSet pbRender of oEditBtn to True
37613>>>        End
37613>>>>
37613>>>        Else Begin
37614>>>            WebSet pbRender of oSaveBtn to True
37615>>>            WebSet pbRender of oCancelChangesBtn to True
37616>>>            WebSet pbRender of oDeleteBtn to bHasRecord
37617>>>        End
37617>>>>
37617>>>    End_Procedure
37618>>>
37618>>>    Procedure OnViewSaved Handle hoServer Boolean bChanged
37621>>>        // Close after save
37621>>>        Send NavigateClose Self
37622>>>    End_Procedure
37623>>>
37623>>>    // this will close the view after a delete
37623>>>    Procedure OnViewDeleted Handle hoDDO
37626>>>        Send NavigateClose Self
37627>>>    End_Procedure
37628>>>
37628>>>    Procedure OnNavigateForward tWebNavigateData NavigateData Integer hoInvokingView Integer hoInvokingObject
37631>>>        Case Begin
37631>>>            Case (NavigateData.eNavigateType = nfFromMain)
37633>>>                // If from main, this is a propbably a main file Select to Zoom.
37633>>>                Case Break
37634>>>
37634>>>            Case (NavigateData.eNavigateType = nfFromParent)
37637>>>                // If from parent, this is a constrained drill down.
37637>>>                Case Break
37638>>>
37638>>>            Case (NavigateData.eNavigateType = nfFromChild)
37641>>>                // If from child, this is a probably a parent Zoom from a Zoom.
37641>>>                Case Break
37642>>>
37642>>>            Case Else // must be nfUndefined
37642>>>
37642>>>        Case End
37642>>>
37642>>>        Send SetActionButtons
37643>>>
37643>>>    End_Procedure
37644>>>
37644>>>End_Object 
37645>    Use SelectSchoolHouse.wo
Including file: SelectSchoolHouse.wo    (C:\Users\Usuario\Desktop\Trabajo Jaime\Trabajos\WorkspaceSchoolStudent\AppSrc\SelectSchoolHouse.wo)
37645>>>// C:\Users\Usuario\Desktop\Trabajo Jaime\Trabajos\WorkspaceSchoolStudent\AppSrc\SelectSchoolHouse.wo
37645>>>// SelectSchoolHouse
37645>>>//
37645>>>
37645>>>Use cWebView.pkg
37645>>>Use cWebList.pkg
37645>>>Use cWebMenuGroup.pkg
37645>>>Use cWebMenuItem.pkg
37645>>>Use cWebColumnButton.pkg
37645>>>Use cWebColumn.pkg
37645>>>Use ZoomSchoolHouse.wo
37645>>>
37645>>>Use cschoolhouseDataDictionary.dd
37645>>>
37645>>>Object oSelectSchoolHouse is a cWebView
37647>>>    Set psCaption to "SelectSchoolHouse"
37648>>>    Set peWebViewStyle to wvsDrilldown
37649>>>    Set peViewType to vtSelect
37650>>>    Set piColumnCount to 12
37651>>>    Set pbShowCaption to False
37652>>>    Set piMaxWidth to 1024
37653>>>
37653>>>    Object oschoolhouse_DD is a cschoolhouseDataDictionary
37655>>>    End_Object 
37656>>>
37656>>>    Set Main_DD To oschoolhouse_DD
37657>>>    Set Server  To oschoolhouse_DD
37658>>>
37658>>>
37658>>>    Object oList is a cWebList
37660>>>        Set piColumnSpan to 0
37661>>>        Set psCSSClass to "MobileList"
37662>>>        Set pbServerOnRowClick to True
37663>>>        Set pbFillHeight to True
37664>>>        Set pbShowHeader to False
37665>>>        Set piSortColumn to 0
37666>>>
37666>>>        Object oschoolhouseID is a cWebColumn
37668>>>            Entry_Item schoolhouse.ID
37669>>>            Set psCaption to "schoolhouse.ID"
37670>>>            Set piWidth to 100
37671>>>        End_Object 
37672>>>
37672>>>        Object oschoolhouseName is a cWebColumn
37674>>>            Entry_Item schoolhouse.Name
37675>>>            Set psCaption to "schoolhouse.Name"
37676>>>            Set piWidth to 1000
37677>>>        End_Object 
37678>>>
37678>>>        Object oschoolhouseCity is a cWebColumn
37680>>>            Entry_Item schoolhouse.City
37681>>>            Set psCaption to "schoolhouse.City"
37682>>>            Set piWidth to 1201
37683>>>        End_Object 
37684>>>
37684>>>        Object oschoolhouseAddress is a cWebColumn
37686>>>            Entry_Item schoolhouse.Address
37687>>>            Set psCaption to "schoolhouse.Address"
37688>>>            Set piWidth to 2001
37689>>>        End_Object 
37690>>>
37690>>>        Object oDetailButton is a cWebColumnButton
37692>>>            Set psCaption to "btn"
37693>>>            Set piWidth to 45
37694>>>            Set pbFixedWidth to True
37695>>>            Set pbResizable to False
37696>>>            Set piListRowSpan to 1
37697>>>            Set psBtnCssClass to "WebButtonIcon WebIcon_Info"
37698>>>            Set peAlign to alignRight
37699>>>
37699>>>            WebRegisterPath ntNavigateForward oZoomSchoolHouse
37705>>>
37705>>>            Procedure OnClick
37708>>>                Send NavigatePath
37709>>>            End_Procedure
37710>>>
37710>>>            Procedure OnGetNavigateForwardData tWebNavigateData ByRef NavigateData Handle hoToView
37713>>>                Move True to NavigateData.bReadOnly
37714>>>            End_Procedure
37715>>>
37715>>>        End_Object 
37716>>>
37716>>>        WebRegisterPath ntNavigateForward oZoomSchoolHouse
37722>>>
37722>>>        Procedure OnRowClick String sRowId
37725>>>            tWebNavigateData NavigateData
37725>>>            tWebNavigateData NavigateData
37725>>>            Get GetNavigateData to NavigateData
37726>>>
37726>>>            Case Begin
37726>>>                Case (NavigateData.eNavigateType = nfFromParent)
37728>>>                    Send NavigateForward of oZoomSchoolHouse Self
37729>>>                    Case Break
37730>>>
37730>>>                Case (NavigateData.eNavigateType = nfFromChild)
37733>>>                    Send NavigateClose Self
37734>>>                    Case Break
37735>>>
37735>>>                Case (NavigateData.eNavigateType = nfFromMain)
37738>>>                    Send NavigateClose Self
37739>>>                    Case Break
37740>>>
37740>>>                Case Else // must be nfUndefined
37740>>>                    Send NavigateForward of oZoomSchoolHouse Self
37741>>>
37741>>>            Case End
37741>>>        End_Procedure
37742>>>
37742>>>        Procedure OnGetNavigateForwardData tWebNavigateData ByRef NavigateData Handle hoToView
37745>>>            Move True to NavigateData.bReadOnly
37746>>>        End_Procedure
37747>>>
37747>>>    End_Object 
37748>>>
37748>>>    Object oActionGroup is a cWebMenuGroup
37750>>>
37750>>>        Object oSearch is a cWebMenuItem
37752>>>            Set psCSSClass to "WebPromptMenuItem"
37753>>>            Set psCaption to "Search"
37754>>>
37754>>>            Procedure OnClick
37757>>>                Send Search of oList
37758>>>            End_Procedure
37759>>>
37759>>>        End_Object 
37760>>>
37760>>>        Object oNewButton is a cWebMenuItem
37762>>>            Set psCSSClass to "WebClearMenuItem"
37763>>>            Set psCaption to "New"
37764>>>
37764>>>            WebRegisterPath ntNavigateForward oZoomSchoolHouse
37770>>>
37770>>>            Procedure OnClick
37773>>>                Send NavigatePath
37774>>>            End_Procedure
37775>>>
37775>>>            Procedure OnGetNavigateForwardData tWebNavigateData ByRef NavigateData Handle hoToView
37778>>>                Move True to NavigateData.bNewRecord
37779>>>            End_Procedure
37780>>>
37780>>>        End_Object 
37781>>>    End_Object 
37782>>>
37782>>>    Procedure OnNavigateForward tWebNavigateData NavigateData Integer hoInvokingView Integer hoInvokingObject
37785>>>        WebSet pbRender of oNewButton to True
37786>>>        WebSet pbRender of oDetailButton to True
37787>>>
37787>>>        Case Begin
37787>>>            Case (NavigateData.eNavigateType = nfFromParent)
37789>>>                // If from parent, this is a constrained drill down
37789>>>                // If Row select does main-zoom we don't need this
37789>>>                WebSet pbRender of oDetailButton to False
37790>>>                Case Break
37791>>>
37791>>>            Case (NavigateData.eNavigateType = nfFromChild)
37794>>>                // If from child, this is a probably a parent lookup from a Zoom
37794>>>                Case Break
37795>>>
37795>>>            Case (NavigateData.eNavigateType = nfFromMain)
37798>>>                // If from main, this is a probably a main-file lookup from a Zoom
37798>>>                WebSet pbRender of oDetailButton to False
37799>>>                Case Break
37800>>>
37800>>>            Case Else // must be nfUndefined
37800>>>                // This may be the start of a drilldown query or this may be used for some kind of custom query.
37800>>>                // If Row select does main-zoom we don't need this
37800>>>                WebSet pbRender of oDetailButton to False
37801>>>
37801>>>        Case End
37801>>>
37801>>>    End_Procedure
37802>>>
37802>>>
37802>>>End_Object 
37803>    Use SelectStudent.wo
Including file: SelectStudent.wo    (C:\Users\Usuario\Desktop\Trabajo Jaime\Trabajos\WorkspaceSchoolStudent\AppSrc\SelectStudent.wo)
37803>>>// C:\Users\Usuario\Desktop\Trabajo Jaime\Trabajos\WorkspaceSchoolStudent\AppSrc\SelectStudent.wo
37803>>>// SelectStudent
37803>>>//
37803>>>
37803>>>Use cWebView.pkg
37803>>>Use cWebList.pkg
37803>>>Use cWebMenuGroup.pkg
37803>>>Use cWebMenuItem.pkg
37803>>>Use cWebColumnButton.pkg
37803>>>Use cWebColumn.pkg
37803>>>Use ZoomStudent.wo
37803>>>
37803>>>Use cschoolhouseDataDictionary.dd
37803>>>Use cstudentDataDictionary.dd
37803>>>
37803>>>Object oSelectStudent is a cWebView
37805>>>    Set psCaption to "SelectStudent"
37806>>>    Set peWebViewStyle to wvsDrilldown
37807>>>    Set peViewType to vtSelect
37808>>>    Set piColumnCount to 12
37809>>>    Set pbShowCaption to False
37810>>>    Set piMaxWidth to 1024
37811>>>
37811>>>    Object oschoolhouse_DD is a cschoolhouseDataDictionary
37813>>>    End_Object 
37814>>>
37814>>>    Object ostudent_DD is a cstudentDataDictionary
37816>>>        Set DDO_Server To oschoolhouse_DD
37817>>>    End_Object 
37818>>>
37818>>>    Set Main_DD To ostudent_DD
37819>>>    Set Server  To ostudent_DD
37820>>>
37820>>>
37820>>>    Object oList is a cWebList
37822>>>        Set piColumnSpan to 0
37823>>>        Set psCSSClass to "MobileList"
37824>>>        Set pbServerOnRowClick to True
37825>>>        Set pbFillHeight to True
37826>>>        Set pbShowHeader to False
37827>>>        Set piSortColumn to 0
37828>>>
37828>>>        Object ostudentID is a cWebColumn
37830>>>            Entry_Item student.ID
37831>>>            Set psCaption to "student.ID"
37832>>>            Set piWidth to 100
37833>>>        End_Object 
37834>>>
37834>>>        Object ostudentName is a cWebColumn
37836>>>            Entry_Item student.Name
37837>>>            Set psCaption to "student.Name"
37838>>>            Set piWidth to 1201
37839>>>        End_Object 
37840>>>
37840>>>        Object ostudentLastName is a cWebColumn
37842>>>            Entry_Item student.LastName
37843>>>            Set psCaption to "student.LastName"
37844>>>            Set piWidth to 1201
37845>>>        End_Object 
37846>>>
37846>>>        Object ostudentCity is a cWebColumn
37848>>>            Entry_Item student.City
37849>>>            Set psCaption to "student.City"
37850>>>            Set piWidth to 1000
37851>>>        End_Object 
37852>>>
37852>>>        Object oschoolhouseName is a cWebColumn
37854>>>            Entry_Item schoolhouse.Name
37855>>>            Set psCaption to "schoolhouse.Name"
37856>>>            Set piWidth to 1000
37857>>>        End_Object 
37858>>>
37858>>>        Object oDetailButton is a cWebColumnButton
37860>>>            Set psCaption to "btn"
37861>>>            Set piWidth to 45
37862>>>            Set pbFixedWidth to True
37863>>>            Set pbResizable to False
37864>>>            Set piListRowSpan to 1
37865>>>            Set psBtnCssClass to "WebButtonIcon WebIcon_Info"
37866>>>            Set peAlign to alignRight
37867>>>
37867>>>            WebRegisterPath ntNavigateForward oZoomStudent
37873>>>
37873>>>            Procedure OnClick
37876>>>                Send NavigatePath
37877>>>            End_Procedure
37878>>>
37878>>>            Procedure OnGetNavigateForwardData tWebNavigateData ByRef NavigateData Handle hoToView
37881>>>                Move True to NavigateData.bReadOnly
37882>>>            End_Procedure
37883>>>
37883>>>        End_Object 
37884>>>
37884>>>        WebRegisterPath ntNavigateForward oZoomStudent
37890>>>
37890>>>        Procedure OnRowClick String sRowId
37893>>>            tWebNavigateData NavigateData
37893>>>            tWebNavigateData NavigateData
37893>>>            Get GetNavigateData to NavigateData
37894>>>
37894>>>            Case Begin
37894>>>                Case (NavigateData.eNavigateType = nfFromParent)
37896>>>                    Send NavigateForward of oZoomStudent Self
37897>>>                    Case Break
37898>>>
37898>>>                Case (NavigateData.eNavigateType = nfFromChild)
37901>>>                    Send NavigateClose Self
37902>>>                    Case Break
37903>>>
37903>>>                Case (NavigateData.eNavigateType = nfFromMain)
37906>>>                    Send NavigateClose Self
37907>>>                    Case Break
37908>>>
37908>>>                Case Else // must be nfUndefined
37908>>>                    Send NavigateForward of oZoomStudent Self
37909>>>
37909>>>            Case End
37909>>>        End_Procedure
37910>>>
37910>>>        Procedure OnGetNavigateForwardData tWebNavigateData ByRef NavigateData Handle hoToView
37913>>>            Move True to NavigateData.bReadOnly
37914>>>        End_Procedure
37915>>>
37915>>>    End_Object 
37916>>>
37916>>>    Object oActionGroup is a cWebMenuGroup
37918>>>
37918>>>        Object oSearch is a cWebMenuItem
37920>>>            Set psCSSClass to "WebPromptMenuItem"
37921>>>            Set psCaption to "Search"
37922>>>
37922>>>            Procedure OnClick
37925>>>                Send Search of oList
37926>>>            End_Procedure
37927>>>
37927>>>        End_Object 
37928>>>
37928>>>        Object oNewButton is a cWebMenuItem
37930>>>            Set psCSSClass to "WebClearMenuItem"
37931>>>            Set psCaption to "New"
37932>>>
37932>>>            WebRegisterPath ntNavigateForward oZoomStudent
37938>>>
37938>>>            Procedure OnClick
37941>>>                Send NavigatePath
37942>>>            End_Procedure
37943>>>
37943>>>            Procedure OnGetNavigateForwardData tWebNavigateData ByRef NavigateData Handle hoToView
37946>>>                Move True to NavigateData.bNewRecord
37947>>>            End_Procedure
37948>>>
37948>>>        End_Object 
37949>>>    End_Object 
37950>>>
37950>>>    Procedure OnNavigateForward tWebNavigateData NavigateData Integer hoInvokingView Integer hoInvokingObject
37953>>>        WebSet pbRender of oNewButton to True
37954>>>        WebSet pbRender of oDetailButton to True
37955>>>
37955>>>        Case Begin
37955>>>            Case (NavigateData.eNavigateType = nfFromParent)
37957>>>                // If from parent, this is a constrained drill down
37957>>>                // If Row select does main-zoom we don't need this
37957>>>                WebSet pbRender of oDetailButton to False
37958>>>                Case Break
37959>>>
37959>>>            Case (NavigateData.eNavigateType = nfFromChild)
37962>>>                // If from child, this is a probably a parent lookup from a Zoom
37962>>>                Case Break
37963>>>
37963>>>            Case (NavigateData.eNavigateType = nfFromMain)
37966>>>                // If from main, this is a probably a main-file lookup from a Zoom
37966>>>                WebSet pbRender of oDetailButton to False
37967>>>                Case Break
37968>>>
37968>>>            Case Else // must be nfUndefined
37968>>>                // This may be the start of a drilldown query or this may be used for some kind of custom query.
37968>>>                // If Row select does main-zoom we don't need this
37968>>>                WebSet pbRender of oDetailButton to False
37969>>>
37969>>>        Case End
37969>>>
37969>>>    End_Procedure
37970>>>
37970>>>
37970>>>End_Object 
37971>    Use SchoolHouse.wo
Including file: SchoolHouse.wo    (C:\Users\Usuario\Desktop\Trabajo Jaime\Trabajos\WorkspaceSchoolStudent\AppSrc\SchoolHouse.wo)
37971>>>Use cWebHttpHandler.pkg
37971>>>Use cJsonObject.pkg
37971>>>Use cschoolhouseDataDictionary.dd
37971>>>
37971>>>
37971>>>//url para consulta GET: http://localhost/WorkspaceSchoolStudent/SchoolHouseList
37971>>>//url para consulta POST: http://localhost/WorkspaceSchoolStudent/SchoolHouseList/new
37971>>>
37971>>>//  With the cWebHttpHandler you handle complete HTTP requests.
37971>>>Object oListSchool is a cWebHttpHandler
37973>>>    Object oSchoolHouse_DD is a cschoolhouseDataDictionary    
37975>>>    End_Object
37976>>>    
37976>>>    Set Main_DD to oSchoolHouse_DD
37977>>>    
37977>>>    //  The psPath property determines the path in the URL for which requests will be handled.
37977>>>    Set psPath to "SchoolHouseList"
37978>>>    //  Use psVerbs to filter based on the HTTP Verbs. 
37978>>>    Set psVerbs to "GET, POST"
37979>>>
37979>>>    Procedure OnHttpGet String sPath String sAcceptType
37982>>>        String[] aPath
37983>>>        
37983>>>        Get StrSplitToArray sPath "/" to aPath
37984>>>        
37984>>>        If (SizeOfArray(aPath) < 1) Begin
37986>>>            Send SchoolHouseList 
37987>>>            Procedure_Return
37988>>>        End
37988>>>>
37988>>>        
37988>>>        //------------------------Redirige a una operación específica según la ruta
37988>>>        //  Redirect to a specific operation based on the path
37988>>>        If ((aPath[0]) = "") Begin
37990>>>            If (SizeOfArray(aPath) = 2 and aPath[1] > 0) Begin
37992>>>                Send ScoolHouse aPath[1]
37993>>>            End
37993>>>>
37993>>>            Else Begin
37994>>>                Send SchoolHouseList
37995>>>            End
37995>>>>
37995>>>        End
37995>>>>
37995>>>        Else Begin
37996>>>            Send SetResponseStatus 404 "Unknown resource" 
37997>>>        End
37997>>>>
37997>>>    End_Procedure
37998>>>    
37998>>>//------------------------------------------Procedimiento para listar todos los colegios
37998>>>    Procedure SchoolHouseList
38001>>>        Handle hoJson hoSchoolHouse
38001>>>        
38001>>>        Get Create (RefClass(cJsonObject)) to hoJson
38002>>>        Send InitializeJsonType of hoJson jsonTypeArray
38003>>>        
38003>>>        Get Create (RefClass(cJsonObject)) to hoSchoolHouse
38004>>>        
38004>>>        Send Find of oSchoolHouse_DD FIRST_RECORD 1
38005>>>        While (Found)
38009>>>            Send InitializeJsonType of hoSchoolHouse jsonTypeObject
38010>>>            
38010>>>            Send SetMemberValue of hoSchoolHouse "Number" jsonTypeInteger schoolhouse.ID
38011>>>            Send SetMemberValue of hoSchoolHouse "Name" jsonTypeString (Trim(schoolhouse.Name))
38012>>>            Send SetMemberValue of hoSchoolHouse "City" jsonTypeString (Trim(schoolhouse.City))
38013>>>            
38013>>>            Send AddMember of hoJson hoSchoolHouse
38014>>>            
38014>>>            Send Find of oSchoolHouse_DD NEXT_RECORD 1
38015>>>        Loop
38016>>>>
38016>>>        
38016>>>        Send OutputJson hoJson
38017>>>        
38017>>>        Send Destroy of hoSchoolHouse
38018>>>        Send Destroy of hoJson
38019>>>    End_Procedure
38020>>>    
38020>>>//-----------------------------------------Procedimiento para enviar los detalles de un solo colegio    
38020>>>    Procedure ScoolHouse String sKey
38023>>>        Handle hoJson
38023>>>        
38023>>>        Send Clear of oSchoolHouse_DD
38024>>>        Move sKey to schoolhouse.ID
38025>>>        Send Find of oSchoolHouse_DD EQ 1
38026>>>        
38026>>>        If (Found) Begin
38028>>>            Get Create (RefClass(cJsonObject)) to hoJson
38029>>>            Send InitializeJsonType of hoJson jsonTypeObject
38030>>>            
38030>>>            Send SetMemberValue of hoJson "Number" jsonTypeInteger schoolhouse.ID
38031>>>            Send SetMemberValue of hoJson "Name" jsonTypeString (Trim(schoolhouse.Name))
38032>>>            Send SetMemberValue of hoJson "Address" jsonTypeString (Trim(schoolhouse.Address))
38033>>>            Send SetMemberValue of hoJson "County" jsonTypeString (Trim(schoolhouse.County))
38034>>>            Send SetMemberValue of hoJson "City" jsonTypeString (Trim(schoolhouse.City))
38035>>>            Send SetMemberValue of hoJson "ZipCode" jsonTypeString (Trim(schoolhouse.ZipCode))
38036>>>            Send SetMemberValue of hoJson "Email" jsonTypeString (Trim(schoolhouse.Email))
38037>>>            Send SetMemberValue of hoJson "Notes" jsonTypeString (Trim(schoolhouse.Notes))
38038>>>            Send SetMemberValue of hoJson "CreatedTime" jsonTypeString schoolhouse.CreatedTime
38039>>>            Send SetMemberValue of hoJson "ModifiedTime" jsonTypeString schoolhouse.ModifiedTime
38040>>>            
38040>>>            Send OutputJson hoJson
38041>>>            Send Destroy of hoJson
38042>>>        End
38042>>>>
38042>>>        Else Begin
38043>>>            Send SetResponseStatus 404 "Resource not found"
38044>>>        End
38044>>>>
38044>>>    End_Procedure
38045>>>    
38045>>>    
38045>>>
38045>>>    Procedure OnHttpPost String sPath String sContentType String sAcceptType DWord iSize
38048>>>        Forward Send OnHttpPost sPath sContentType sAcceptType iSize
38050>>>        
38050>>>        String[] aPath
38051>>>        
38051>>>        //-----------------Divide el camino en partes
38051>>>        //  Split the path into parts
38051>>>        Get StrSplitToArray sPath "/" to aPath
38052>>>        If (SizeOfArray(aPath) < 2) Begin
38054>>>            Send SetResponseStatus 404 "Invalid resource" 
38055>>>            Procedure_Return
38056>>>        End
38056>>>>
38056>>>        
38056>>>        //-----------------------Redirige a una operación específica según la ruta
38056>>>        //  Redirect to a specific operation based on the path
38056>>>        If (Lowercase(aPath[1]) = "new") Begin
38058>>>            If (SizeOfArray(aPath) > 2 and aPath[2] <> "") Begin
38060>>>                Send SetResponseStatus 400 "Only use POST for creating new resources"
38061>>>            End
38061>>>>
38061>>>            Else Begin
38062>>>                Send SaveSchoolHouse True ""
38063>>>            End
38063>>>>
38063>>>        End
38063>>>>
38063>>>        Else Begin
38064>>>            Send SetResponseStatus 404 "Unknown resource"
38065>>>        End        
38065>>>>
38065>>>    End_Procedure
38066>>>    
38066>>>    
38066>>>    Procedure SaveSchoolHouse Boolean bCreate String sKey
38069>>>        Handle hoJson
38069>>>        Boolean bSuccess bVal bErr
38069>>>        String sVal
38069>>>        
38069>>>        //-----------------------Encuentra el registro correcto
38069>>>        //  Find the right record
38069>>>        If (bCreate) Begin
38071>>>            Send Clear of oSchoolHouse_DD
38072>>>        End
38072>>>>
38072>>>        Else Begin
38073>>>            Send Clear of oSchoolHouse_DD
38074>>>            Move sKey to schoolhouse.ID
38075>>>            Send Find of oSchoolHouse_DD EQ 1
38076>>>            
38076>>>            If (not(Found)) Begin
38078>>>                Send SetResponseStatus 404 "Resource not found"
38079>>>                Procedure_Return
38080>>>            End
38080>>>>
38080>>>        End
38080>>>>
38080>>>        
38080>>>        //-----------------------Lee los datos de la solicitud
38080>>>        //  Read the request data
38080>>>        Get RequestDataJson (&hoJson) to bSuccess
38081>>>        
38081>>>        If (bSuccess) Begin
38083>>>            Send ErrorQueueStart
38084>>>            
38084>>>            //  Almacena los valores en la variable sVal que se guardarán en la BBDD
38084>>>            If (HasMember(hoJson, "Name")) Begin
38086>>>                Get MemberValue of hoJson "Name" to sVal
38087>>>                Set Field_Changed_Value of oSchoolHouse_DD (RefTable(schoolhouse.Name)) to sVal
38088>>>            End
38088>>>>
38088>>>            
38088>>>            If (HasMember(hoJson, "Address")) Begin
38090>>>                Get MemberValue of hoJson "Address" to sVal
38091>>>                Set Field_Changed_Value of oSchoolHouse_DD (RefTable(schoolhouse.Address)) to sVal
38092>>>            End
38092>>>>
38092>>>            
38092>>>            If (HasMember(hoJson, "City")) Begin
38094>>>                Get MemberValue of hoJson "City" to sVal
38095>>>                Set Field_Changed_Value of oSchoolHouse_DD (RefTable(schoolhouse.City)) to sVal
38096>>>            End
38096>>>>
38096>>>            
38096>>>            If (HasMember(hoJson, "County")) Begin
38098>>>                Get MemberValue of hoJson "County" to sVal
38099>>>                Set Field_Changed_Value of oSchoolHouse_DD (RefTable(schoolhouse.County)) to sVal
38100>>>            End
38100>>>>
38100>>>            
38100>>>            If (HasMember(hoJson, "ZipCode")) Begin
38102>>>                Get MemberValue of hoJson "ZipCode" to sVal
38103>>>                Set Field_Changed_Value of oSchoolHouse_DD (RefTable(schoolhouse.ZipCode)) to sVal
38104>>>            End
38104>>>>
38104>>>            
38104>>>            If (HasMember(hoJson, "Email")) Begin
38106>>>                Get MemberValue of hoJson "Email" to sVal
38107>>>                Set Field_Changed_Value of oSchoolHouse_DD (RefTable(schoolhouse.Email)) to sVal
38108>>>            End
38108>>>>
38108>>>            
38108>>>            If (HasMember(hoJson, "Notes")) Begin
38110>>>                Get MemberValue of hoJson "Notes" to sVal
38111>>>                Set Field_Changed_Value of oSchoolHouse_DD (RefTable(schoolhouse.Notes)) to sVal
38112>>>            End
38112>>>>
38112>>>            
38112>>>            //------------------Realiza el guardado de los datos
38112>>>            //  Perform the save
38112>>>            If (ErrorCount(Self) = 0) Begin
38114>>>                Get Request_Validate of oSchoolHouse_DD to bErr
38115>>>                If (not(bErr)) Begin
38117>>>                   Send Request_Save of oSchoolHouse_DD     
38118>>>                   
38118>>>                   If (not(Err)) Begin
38120>>>                        Send ScoolHouse schoolhouse.ID
38121>>>                   End
38121>>>>
38121>>>                End
38121>>>>
38121>>>            End            
38121>>>>
38121>>>            
38121>>>            Send ErrorQueueEnd
38122>>>            Send ErrorReportJson
38123>>>        End
38123>>>>
38123>>>        
38123>>>        If (hoJson > 0) Begin
38125>>>            Send Destroy of hoJson
38126>>>        End
38126>>>>
38126>>>    End_Procedure
38127>>>
38127>>>//-------------Función auxiliar que genera una respuesta basada en un objeto JSON
38127>>>    //  Helper function that generates a response based on a JSON object.
38127>>>    Procedure OutputJson Handle hoJson
38130>>>        UChar[] ucData
38131>>>        
38131>>>        Send AddHttpResponseHeader "Content-Type" "application/json"
38132>>>        Get StringifyUtf8 of hoJson to ucData
38133>>>        Send OutputUChar ucData
38134>>>    End_Procedure
38135>>>
38135>>>
38135>>>//---------------------Función auxiliar que lee una solicitud completa en un objeto JSON.
38135>>>//  Helper function that reads an entire request into a JSON object.
38135>>>    Function RequestDataJson Handle ByRef hoJson Returns Boolean
38138>>>        UChar[] ucData
38139>>>        Boolean bSuccess
38139>>>        String sErr
38139>>>        
38139>>>        Get Create (RefClass(cJsonObject)) to hoJson
38140>>>        
38140>>>        Get RequestDataUChar -1 to ucData
38141>>>        Get ParseUtf8 of hoJson ucData to bSuccess
38142>>>        
38142>>>        If (not(bSuccess)) Begin
38144>>>            Get psParseError of hoJson to sErr
38145>>>            Send SetResponseStatus 400 sErr
38146>>>        End
38146>>>>
38146>>>        
38146>>>        Function_Return bSuccess
38147>>>    End_Function
38148>>>    
38148>>>    
38148>>>//-----------------------Función auxiliar que informa todos los errores en la cola de errores en formato JSON
38148>>>//  Helper function that reports all errors on the error queue in JSON format.
38148>>>    Procedure ErrorReportJson
38151>>>        Integer iErr iErrC
38151>>>        Handle hoJson hoErrors   
38151>>>        String sMessage
38151>>>        
38151>>>        Get ErrorCount to iErrC
38152>>>        If (iErrC > 0) Begin
38154>>>            Send SetResponseStatus 400 "Errors occurred"
38155>>>            
38155>>>            Get Create (RefClass(cJsonObject)) to hoJson
38156>>>            Send InitializeJsonType of hoJson jsonTypeObject
38157>>>            
38157>>>            Get Create (RefClass(cJsonObject)) to hoErrors
38158>>>            Send InitializeJsonType of hoErrors jsonTypeArray
38159>>>            
38159>>>            For iErr from 0 to (iErrC - 1)
38165>>>>
38165>>>                Get ErrorMessage iErr to sMessage
38166>>>                Send AddMemberValue of hoErrors jsonTypeString  sMessage
38167>>>            Loop
38168>>>>
38168>>>            
38168>>>            Send SetMember of hoJson "aErrors" hoErrors
38169>>>            
38169>>>            Send OutputJson hoJson
38170>>>            
38170>>>            Send Destroy of hoErrors
38171>>>            Send Destroy of hoJson
38172>>>        End
38172>>>>
38172>>>    End_Procedure
38173>>>End_Object
38174>    Use CheckProject.wo
Including file: CheckProject.wo    (C:\Users\Usuario\Desktop\Trabajo Jaime\Trabajos\WorkspaceSchoolStudent\AppSrc\CheckProject.wo)
38174>>>Use cWebHttpHandler.pkg
38174>>>
38174>>>//  With the cWebHttpHandler you handle complete HTTP requests.
38174>>>Object oCheckProject is a cWebHttpHandler
38176>>>    
38176>>>    //  The psPath property determines the path in the URL for which requests will be handled.
38176>>>    Set psPath to "CheckAlive"
38177>>>    //  Use psVerbs to filter based on the HTTP Verbs. 
38177>>>    Set psVerbs to "Get"
38178>>>    
38178>>>    Procedure OnHttpGet String sPath String sAcceptType
38181>>>        Forward Send OnHttpGet sPath sAcceptType
38183>>>        Handle hoJsonResponse
38183>>>        UChar[] ucData
38184>>>        
38184>>>        Get Create (RefClass(cJsonObject)) to hoJsonResponse
38185>>>        Send InitializeJsonType of hoJsonResponse jsonTypeObject
38186>>>        
38186>>>        Send SetMemberValue of hoJsonResponse "Status" jsonTypeString "Activo"
38187>>>        
38187>>>        Send AddHttpResponseHeader of hoJsonResponse "Content-type" "application/json"
38188>>>        
38188>>>        Get StringifyUtf8 of hoJsonResponse to ucData
38189>>>        
38189>>>        Send Destroy of hoJsonResponse
38190>>>        
38190>>>        Send OutputUChar ucData
38191>>>    End_Procedure
38192>>>    
38192>>>End_Object
38193>    Use Student.wo
Including file: Student.wo    (C:\Users\Usuario\Desktop\Trabajo Jaime\Trabajos\WorkspaceSchoolStudent\AppSrc\Student.wo)
38193>>>Use cWebHttpHandler.pkg
38193>>>Use cstudentDataDictionary.dd
38193>>>Use cschoolhouseDataDictionary.dd
38193>>>
38193>>>//  With the cWebHttpHandler you handle complete HTTP requests.
38193>>>Object oStudent is a cWebHttpHandler
38195>>>    Object oschoolhouse_DD is a cschoolhouseDataDictionary
38197>>>    End_Object 
38198>>>
38198>>>    Object ostudent_DD is a cstudentDataDictionary
38200>>>        Set DDO_Server to oschoolhouse_DD
38201>>>    End_Object 
38202>>>
38202>>>    Set Main_DD to ostudent_DD
38203>>>    //  The psPath property determines the path in the URL for which requests will be handled.
38203>>>    Set psPath to "Studentlist"
38204>>>    //  Use psVerbs to filter based on the HTTP Verbs. 
38204>>>    Set psVerbs to "GET,POST"
38205>>>    
38205>>>    Procedure OnHttpGet String sPath String sAcceptType
38208>>>        String[] aPath
38209>>>        Integer iStucent
38209>>>        
38209>>>        //  Split the path into parts
38209>>>        Get StrSplitToArray sPath "/" to aPath
38210>>>        If (SizeOfArray(aPath) < 1) Begin
38212>>>            Send StudentList
38213>>>            Procedure_Return
38214>>>        End
38214>>>>
38214>>>        
38214>>>        //  Redirect to a specific operation based on the path
38214>>>        If ((aPath[0]) = "") Begin
38216>>>            If (SizeOfArray(aPath) = 2 and (Integer(aPath[1]) > 0)) Begin
38218>>>                Send StudentInfo aPath[1]
38219>>>            End
38219>>>>
38219>>>            Else Begin
38220>>>                Send StudentList
38221>>>            End
38221>>>>
38221>>>        End
38221>>>>
38221>>>        Else Begin
38222>>>            Send SetResponseStatus 404 "Unknown resource" 
38223>>>        End
38223>>>>
38223>>>    End_Procedure
38224>>>    //------------------------
38224>>>    //  Generate and output JSON for a single customer.
38224>>>    Procedure StudentInfo String sKey
38227>>>        Handle hoJson
38227>>>        
38227>>>        Send Clear of ostudent_DD
38228>>>        Move sKey to student.ID
38229>>>        Send Find of ostudent_DD EQ 1
38230>>>        
38230>>>        If (Found) Begin
38232>>>            Get Create (RefClass(cJsonObject)) to hoJson
38233>>>            Send InitializeJsonType of hoJson jsonTypeObject
38234>>>            
38234>>>            Send SetMemberValue of hoJson "ID"                  jsonTypeInteger student.ID
38235>>>            Send SetMemberValue of hoJson "Name"                jsonTypeString (Trim(student.Name))
38236>>>            Send SetMemberValue of hoJson "LastName"            jsonTypeString (Trim(student.LastName))
38237>>>            Send SetMemberValue of hoJson "DNI"                 jsonTypeString (Trim(student.DNI))
38238>>>            Send SetMemberValue of hoJson "Email"               jsonTypeString (Trim(student.Email))
38239>>>            Send SetMemberValue of hoJson "County"              jsonTypeString (Trim(student.County))
38240>>>            Send SetMemberValue of hoJson "City"                jsonTypeString (Trim(student.City))
38241>>>            Send SetMemberValue of hoJson "Address"             jsonTypeString student.Address
38242>>>            Send SetMemberValue of hoJson "Birthday"            jsonTypeString student.Birthday
38243>>>            Send SetMemberValue of hoJson "SchoolHouseID"       jsonTypeString schoolhouse.ID
38244>>>            Send SetMemberValue of hoJson "Notes"               jsonTypeString student.Notes
38245>>>            
38245>>>            Send OutputJson hoJson
38246>>>            Send Destroy of hoJson
38247>>>        End
38247>>>>
38247>>>        Else Begin
38248>>>            Send SetResponseStatus 404 "Resource not found"
38249>>>        End
38249>>>>
38249>>>    End_Procedure
38250>>>    //------------------------
38250>>>    //  Helper function that generates a response based on a JSON object.
38250>>>    Procedure OutputJson Handle hoJson
38253>>>        UChar[] ucData
38254>>>        
38254>>>        Send AddHttpResponseHeader "Content-Type" "application/json"
38255>>>        Get StringifyUtf8 of hoJson to ucData
38256>>>        Send OutputUChar ucData
38257>>>    End_Procedure
38258>>>    //------------------------
38258>>>    //  Generate and output JSON with a list of all customers
38258>>>    Procedure StudentList
38261>>>        Handle hoJson
38261>>>        Handle hoStudent
38261>>>        
38261>>>        Get Create (RefClass(cJsonObject)) to hoJson
38262>>>        Send InitializeJsonType of hoJson jsonTypeArray
38263>>>        
38263>>>        Get Create (RefClass(cJsonObject)) to hoStudent
38264>>>        
38264>>>        Send Find of ostudent_DD FIRST_RECORD 1
38265>>>        While (Found)
38269>>>            Send InitializeJsonType of hoStudent jsonTypeObject
38270>>>            
38270>>>            Send SetMemberValue of hoStudent "ID"                   jsonTypeInteger student.ID
38271>>>            Send SetMemberValue of hoStudent "Name"                 jsonTypeString (Trim(student.Name))
38272>>>            Send SetMemberValue of hoStudent "LastName"             jsonTypeString (Trim(student.LastName))
38273>>>            Send SetMemberValue of hoStudent "DNI"                  jsonTypeString (Trim(student.DNI))
38274>>>            Send SetMemberValue of hoStudent "SchoolHouse Name"     jsonTypeString (Trim(schoolhouse.Name))
38275>>>            
38275>>>            Send AddMember of hoJson hoStudent
38276>>>            
38276>>>            Send Find of ostudent_DD NEXT_RECORD 1
38277>>>        Loop
38278>>>>
38278>>>        
38278>>>        Send OutputJson hoJson
38279>>>        
38279>>>        Send Destroy of hoStudent
38280>>>        Send Destroy of hoJson
38281>>>    End_Procedure
38282>>>    //------------------------
38282>>>        Procedure OnHttpPost String sPath String sContentType String sAcceptType Integer iSize
38285>>>        String[] aPath
38286>>>        
38286>>>        //  Split the path into parts
38286>>>        Get StrSplitToArray sPath "/" to aPath
38287>>>        If (SizeOfArray(aPath) < 1) Begin
38289>>>            Send SetResponseStatus 404 "Invalid resource" 
38290>>>            Procedure_Return
38291>>>        End
38291>>>>
38291>>>        
38291>>>        //  Redirect to a specific operation based on the path
38291>>>        If (Lowercase(aPath[0]) = "") Begin
38293>>>            If (SizeOfArray(aPath) = 2 and ((aPath[1]) = "new")) Begin
38295>>>                Send SaveStudent True ""
38296>>>            End
38296>>>>
38296>>>            Else Begin
38297>>>                Send SetResponseStatus 400 "Only use POST for creating new resources"
38298>>>            End
38298>>>>
38298>>>        End
38298>>>>
38298>>>        Else Begin
38299>>>            Send SetResponseStatus 404 "Unknown resource"
38300>>>        End
38300>>>>
38300>>>    End_Procedure
38301>>>    //------------------------
38301>>>    //  Saves an existing customer based on the data posted
38301>>>    Procedure SaveStudent Boolean bCreate String sKey
38304>>>        Handle hoJson
38304>>>        Boolean bSuccess
38304>>>        String sVal
38304>>>        Boolean bVal bErr
38304>>>        
38304>>>        //  Find the right record
38304>>>        If (bCreate) Begin
38306>>>            Send Clear of ostudent_DD
38307>>>        End
38307>>>>
38307>>>        Else Begin
38308>>>            Send Clear of ostudent_DD
38309>>>            Move sKey to student.ID
38310>>>            Send Find of ostudent_DD EQ 1
38311>>>            
38311>>>            If (not(Found)) Begin
38313>>>                Send SetResponseStatus 404 "Resource not found"
38314>>>                Procedure_Return
38315>>>            End
38315>>>>
38315>>>        End
38315>>>>
38315>>>        
38315>>>        //  Read the request data
38315>>>        Get RequestDataJson (&hoJson) to bSuccess
38316>>>        
38316>>>        If (bSuccess) Begin
38318>>>            Send ErrorQueueStart
38319>>>            
38319>>>            //  Set the values
38319>>>            If (HasMember(hoJson, "Name")) Begin
38321>>>                Get MemberValue of hoJson "Name" to sVal
38322>>>                Set Field_Changed_Value of ostudent_DD (RefTable(student.Name)) to sVal
38323>>>            End
38323>>>>
38323>>>            If (HasMember(hoJson, "LastName")) Begin
38325>>>                Get MemberValue of hoJson "LastName" to sVal
38326>>>                Set Field_Changed_Value of ostudent_DD (RefTable(student.LastName)) to sVal
38327>>>            End
38327>>>>
38327>>>            If (HasMember(hoJson, "DNI")) Begin
38329>>>                Get MemberValue of hoJson "DNI" to sVal
38330>>>                Set Field_Changed_Value of ostudent_DD (RefTable(student.DNI)) to sVal
38331>>>            End
38331>>>>
38331>>>            If (HasMember(hoJson, "County")) Begin
38333>>>                Get MemberValue of hoJson "County" to sVal
38334>>>                Set Field_Changed_Value of ostudent_DD (RefTable(student.County)) to sVal
38335>>>            End
38335>>>>
38335>>>            
38335>>>            If (HasMember(hoJson, "Email")) Begin
38337>>>                Get MemberValue of hoJson "Email" to sVal
38338>>>                Set Field_Changed_Value of ostudent_DD (RefTable(student.Email)) to sVal
38339>>>            End
38339>>>>
38339>>>            
38339>>>            If (HasMember(hoJson, "City")) Begin
38341>>>                Get MemberValue of hoJson "City" to sVal
38342>>>                Set Field_Changed_Value of ostudent_DD (RefTable(student.City)) to sVal
38343>>>            End
38343>>>>
38343>>>            
38343>>>            If (HasMember(hoJson, "Address")) Begin
38345>>>                Get MemberValue of hoJson "Address" to sVal
38346>>>                Set Field_Changed_Value of ostudent_DD (RefTable(student.Address)) to sVal
38347>>>            End
38347>>>>
38347>>>            
38347>>>            If (HasMember(hoJson, "SchoolHouseID")) Begin
38349>>>                Get MemberValue of hoJson "SchoolHouseID" to sVal
38350>>>                Send Clear of oschoolhouse_DD
38351>>>                Move sVal to schoolhouse.ID
38352>>>                Send Find of oschoolhouse_DD EQ 1
38353>>>            End
38353>>>>
38353>>>            
38353>>>            If (HasMember(hoJson, "Notes")) Begin
38355>>>                Get MemberValue of hoJson "Notes" to sVal
38356>>>                Set Field_Changed_Value of ostudent_DD (RefTable(student.Notes)) to sVal
38357>>>            End
38357>>>>
38357>>>            
38357>>>            //  Perform the save
38357>>>            If (ErrorCount(Self) = 0) Begin
38359>>>                Get Request_Validate of ostudent_DD to bErr
38360>>>                If (not(bErr)) Begin
38362>>>                   Send Request_Save of ostudent_DD
38363>>>                   
38363>>>                   If (not(Err)) Begin
38365>>>                        Send StudentInfo student.ID
38366>>>                   End
38366>>>>
38366>>>                End
38366>>>>
38366>>>                Else Begin
38367>>>                    Send SetResponseStatus 404 "Invalid resource" 
38368>>>                End
38368>>>>
38368>>>            End            
38368>>>>
38368>>>            
38368>>>            Send ErrorQueueEnd
38369>>>            Send ErrorReportJson
38370>>>        End
38370>>>>
38370>>>        
38370>>>        If (hoJson > 0) Begin
38372>>>            Send Destroy of hoJson
38373>>>        End
38373>>>>
38373>>>    End_Procedure
38374>>>    //  Helper function that reads an entire request into a JSON object.
38374>>>    Function RequestDataJson Handle ByRef hoJson Returns Boolean
38377>>>        UChar[] ucData
38378>>>        Boolean bSuccess
38378>>>        String sErr
38378>>>        
38378>>>        Get Create (RefClass(cJsonObject)) to hoJson
38379>>>        
38379>>>        Get RequestDataUChar -1 to ucData
38380>>>        Get ParseUtf8 of hoJson ucData to bSuccess
38381>>>        
38381>>>        If (not(bSuccess)) Begin
38383>>>            Get psParseError of hoJson to sErr
38384>>>            Send SetResponseStatus 400 sErr
38385>>>        End
38385>>>>
38385>>>        
38385>>>        Function_Return bSuccess
38386>>>    End_Function
38387>>>    //  Helper function that reports all errors on the error queue in JSON format.
38387>>>    Procedure ErrorReportJson
38390>>>        Integer iErr iErrC
38390>>>        Handle hoJson hoErrors   
38390>>>        String sMessage
38390>>>        
38390>>>        Get ErrorCount to iErrC
38391>>>        If (iErrC > 0) Begin
38393>>>            Send SetResponseStatus 400 "Errors occurred"
38394>>>            
38394>>>            Get Create (RefClass(cJsonObject)) to hoJson
38395>>>            Send InitializeJsonType of hoJson jsonTypeObject
38396>>>            
38396>>>            Get Create (RefClass(cJsonObject)) to hoErrors
38397>>>            Send InitializeJsonType of hoErrors jsonTypeArray
38398>>>            
38398>>>            For iErr from 0 to (iErrC - 1)
38404>>>>
38404>>>                Get ErrorMessage iErr to sMessage
38405>>>                Send AddMemberValue of hoErrors jsonTypeString  sMessage
38406>>>            Loop
38407>>>>
38407>>>            
38407>>>            Send SetMember of hoJson "aErrors" hoErrors
38408>>>            
38408>>>            Send OutputJson hoJson
38409>>>            
38409>>>            Send Destroy of hoErrors
38410>>>            Send Destroy of hoJson
38411>>>        End
38411>>>>
38411>>>    End_Procedure
38412>>>    
38412>>>End_Object
38413>    Set phoDefaultView to oDashboard
38414>
38414>End_Object
38415>
38415>Send StartWebApp of oWebApp
38416>
Summary
Memory Available: 55052075008
Total Warnings : 0
Total Errors   : 0
Total Symbols  : 25525
Total Resources: 0
Total Commands : 38415
Total Windows  : 0
Total Pages    : 0
Static Data    : 474541
Message area   : 257878
Total Blocks   : 17120
